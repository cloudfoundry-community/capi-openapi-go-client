/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LinkWithMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkWithMethod{}

// LinkWithMethod struct for LinkWithMethod
type LinkWithMethod struct {
	Href string `json:"href"`
	Method string `json:"method"`
}

type _LinkWithMethod LinkWithMethod

// NewLinkWithMethod instantiates a new LinkWithMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkWithMethod(href string, method string) *LinkWithMethod {
	this := LinkWithMethod{}
	this.Href = href
	this.Method = method
	return &this
}

// NewLinkWithMethodWithDefaults instantiates a new LinkWithMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkWithMethodWithDefaults() *LinkWithMethod {
	this := LinkWithMethod{}
	return &this
}

// GetHref returns the Href field value
func (o *LinkWithMethod) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *LinkWithMethod) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *LinkWithMethod) SetHref(v string) {
	o.Href = v
}

// GetMethod returns the Method field value
func (o *LinkWithMethod) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *LinkWithMethod) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *LinkWithMethod) SetMethod(v string) {
	o.Method = v
}

func (o LinkWithMethod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkWithMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["href"] = o.Href
	toSerialize["method"] = o.Method
	return toSerialize, nil
}

func (o *LinkWithMethod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"href",
		"method",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLinkWithMethod := _LinkWithMethod{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLinkWithMethod)

	if err != nil {
		return err
	}

	*o = LinkWithMethod(varLinkWithMethod)

	return err
}

type NullableLinkWithMethod struct {
	value *LinkWithMethod
	isSet bool
}

func (v NullableLinkWithMethod) Get() *LinkWithMethod {
	return v.value
}

func (v *NullableLinkWithMethod) Set(val *LinkWithMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkWithMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkWithMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkWithMethod(val *LinkWithMethod) *NullableLinkWithMethod {
	return &NullableLinkWithMethod{value: val, isSet: true}
}

func (v NullableLinkWithMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkWithMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


