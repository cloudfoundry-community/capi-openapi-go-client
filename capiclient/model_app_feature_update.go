/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppFeatureUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppFeatureUpdate{}

// AppFeatureUpdate struct for AppFeatureUpdate
type AppFeatureUpdate struct {
	// Whether to enable or disable the feature
	Enabled bool `json:"enabled"`
	Metadata *AppFeatureUpdateMetadata `json:"metadata,omitempty"`
}

type _AppFeatureUpdate AppFeatureUpdate

// NewAppFeatureUpdate instantiates a new AppFeatureUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppFeatureUpdate(enabled bool) *AppFeatureUpdate {
	this := AppFeatureUpdate{}
	this.Enabled = enabled
	return &this
}

// NewAppFeatureUpdateWithDefaults instantiates a new AppFeatureUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppFeatureUpdateWithDefaults() *AppFeatureUpdate {
	this := AppFeatureUpdate{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *AppFeatureUpdate) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AppFeatureUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AppFeatureUpdate) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AppFeatureUpdate) GetMetadata() AppFeatureUpdateMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret AppFeatureUpdateMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppFeatureUpdate) GetMetadataOk() (*AppFeatureUpdateMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AppFeatureUpdate) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given AppFeatureUpdateMetadata and assigns it to the Metadata field.
func (o *AppFeatureUpdate) SetMetadata(v AppFeatureUpdateMetadata) {
	o.Metadata = &v
}

func (o AppFeatureUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppFeatureUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *AppFeatureUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppFeatureUpdate := _AppFeatureUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppFeatureUpdate)

	if err != nil {
		return err
	}

	*o = AppFeatureUpdate(varAppFeatureUpdate)

	return err
}

type NullableAppFeatureUpdate struct {
	value *AppFeatureUpdate
	isSet bool
}

func (v NullableAppFeatureUpdate) Get() *AppFeatureUpdate {
	return v.value
}

func (v *NullableAppFeatureUpdate) Set(val *AppFeatureUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAppFeatureUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAppFeatureUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppFeatureUpdate(val *AppFeatureUpdate) *NullableAppFeatureUpdate {
	return &NullableAppFeatureUpdate{value: val, isSet: true}
}

func (v NullableAppFeatureUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppFeatureUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


