/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
)

// checks if the PlatformInfoCliVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlatformInfoCliVersion{}

// PlatformInfoCliVersion struct for PlatformInfoCliVersion
type PlatformInfoCliVersion struct {
	Minimum *string `json:"minimum,omitempty"`
	Recommended *string `json:"recommended,omitempty"`
}

// NewPlatformInfoCliVersion instantiates a new PlatformInfoCliVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlatformInfoCliVersion() *PlatformInfoCliVersion {
	this := PlatformInfoCliVersion{}
	return &this
}

// NewPlatformInfoCliVersionWithDefaults instantiates a new PlatformInfoCliVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlatformInfoCliVersionWithDefaults() *PlatformInfoCliVersion {
	this := PlatformInfoCliVersion{}
	return &this
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *PlatformInfoCliVersion) GetMinimum() string {
	if o == nil || IsNil(o.Minimum) {
		var ret string
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatformInfoCliVersion) GetMinimumOk() (*string, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *PlatformInfoCliVersion) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given string and assigns it to the Minimum field.
func (o *PlatformInfoCliVersion) SetMinimum(v string) {
	o.Minimum = &v
}

// GetRecommended returns the Recommended field value if set, zero value otherwise.
func (o *PlatformInfoCliVersion) GetRecommended() string {
	if o == nil || IsNil(o.Recommended) {
		var ret string
		return ret
	}
	return *o.Recommended
}

// GetRecommendedOk returns a tuple with the Recommended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatformInfoCliVersion) GetRecommendedOk() (*string, bool) {
	if o == nil || IsNil(o.Recommended) {
		return nil, false
	}
	return o.Recommended, true
}

// HasRecommended returns a boolean if a field has been set.
func (o *PlatformInfoCliVersion) HasRecommended() bool {
	if o != nil && !IsNil(o.Recommended) {
		return true
	}

	return false
}

// SetRecommended gets a reference to the given string and assigns it to the Recommended field.
func (o *PlatformInfoCliVersion) SetRecommended(v string) {
	o.Recommended = &v
}

func (o PlatformInfoCliVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlatformInfoCliVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !IsNil(o.Recommended) {
		toSerialize["recommended"] = o.Recommended
	}
	return toSerialize, nil
}

type NullablePlatformInfoCliVersion struct {
	value *PlatformInfoCliVersion
	isSet bool
}

func (v NullablePlatformInfoCliVersion) Get() *PlatformInfoCliVersion {
	return v.value
}

func (v *NullablePlatformInfoCliVersion) Set(val *PlatformInfoCliVersion) {
	v.value = val
	v.isSet = true
}

func (v NullablePlatformInfoCliVersion) IsSet() bool {
	return v.isSet
}

func (v *NullablePlatformInfoCliVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlatformInfoCliVersion(val *PlatformInfoCliVersion) *NullablePlatformInfoCliVersion {
	return &NullablePlatformInfoCliVersion{value: val, isSet: true}
}

func (v NullablePlatformInfoCliVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlatformInfoCliVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


