/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoleRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleRelationships{}

// RoleRelationships struct for RoleRelationships
type RoleRelationships struct {
	Organization *RoleRelationshipsOrganization `json:"organization,omitempty"`
	Space *RoleRelationshipsSpace `json:"space,omitempty"`
	User RoleRelationshipsUser `json:"user"`
}

type _RoleRelationships RoleRelationships

// NewRoleRelationships instantiates a new RoleRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleRelationships(user RoleRelationshipsUser) *RoleRelationships {
	this := RoleRelationships{}
	this.User = user
	return &this
}

// NewRoleRelationshipsWithDefaults instantiates a new RoleRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleRelationshipsWithDefaults() *RoleRelationships {
	this := RoleRelationships{}
	return &this
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *RoleRelationships) GetOrganization() RoleRelationshipsOrganization {
	if o == nil || IsNil(o.Organization) {
		var ret RoleRelationshipsOrganization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleRelationships) GetOrganizationOk() (*RoleRelationshipsOrganization, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *RoleRelationships) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given RoleRelationshipsOrganization and assigns it to the Organization field.
func (o *RoleRelationships) SetOrganization(v RoleRelationshipsOrganization) {
	o.Organization = &v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *RoleRelationships) GetSpace() RoleRelationshipsSpace {
	if o == nil || IsNil(o.Space) {
		var ret RoleRelationshipsSpace
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleRelationships) GetSpaceOk() (*RoleRelationshipsSpace, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *RoleRelationships) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given RoleRelationshipsSpace and assigns it to the Space field.
func (o *RoleRelationships) SetSpace(v RoleRelationshipsSpace) {
	o.Space = &v
}

// GetUser returns the User field value
func (o *RoleRelationships) GetUser() RoleRelationshipsUser {
	if o == nil {
		var ret RoleRelationshipsUser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *RoleRelationships) GetUserOk() (*RoleRelationshipsUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *RoleRelationships) SetUser(v RoleRelationshipsUser) {
	o.User = v
}

func (o RoleRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}
	toSerialize["user"] = o.User
	return toSerialize, nil
}

func (o *RoleRelationships) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleRelationships := _RoleRelationships{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoleRelationships)

	if err != nil {
		return err
	}

	*o = RoleRelationships(varRoleRelationships)

	return err
}

type NullableRoleRelationships struct {
	value *RoleRelationships
	isSet bool
}

func (v NullableRoleRelationships) Get() *RoleRelationships {
	return v.value
}

func (v *NullableRoleRelationships) Set(val *RoleRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleRelationships(val *RoleRelationships) *NullableRoleRelationships {
	return &NullableRoleRelationships{value: val, isSet: true}
}

func (v NullableRoleRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


