/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type RouteMappingsAPI interface {

	/*
	V3RoutesGuidDestinationsDestinationGuidDelete Remove destination from a route

	Remove a specific destination from a route

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@param destinationGuid The destination GUID
	@return ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest
	*/
	V3RoutesGuidDestinationsDestinationGuidDelete(ctx context.Context, guid string, destinationGuid string) ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest

	// V3RoutesGuidDestinationsDestinationGuidDeleteExecute executes the request
	V3RoutesGuidDestinationsDestinationGuidDeleteExecute(r ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest) (*http.Response, error)

	/*
	V3RoutesGuidDestinationsGet List destinations for a route

	List all destinations (app/port combinations) mapped to a route

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidDestinationsGetRequest
	*/
	V3RoutesGuidDestinationsGet(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsGetRequest

	// V3RoutesGuidDestinationsGetExecute executes the request
	//  @return V3RoutesGuidDestinationsGet200Response
	V3RoutesGuidDestinationsGetExecute(r ApiV3RoutesGuidDestinationsGetRequest) (*V3RoutesGuidDestinationsGet200Response, *http.Response, error)

	/*
	V3RoutesGuidDestinationsPatch Update destinations for a route

	Update or replace destinations for a route

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidDestinationsPatchRequest
	*/
	V3RoutesGuidDestinationsPatch(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsPatchRequest

	// V3RoutesGuidDestinationsPatchExecute executes the request
	//  @return V3RoutesGuidDestinationsPost200Response
	V3RoutesGuidDestinationsPatchExecute(r ApiV3RoutesGuidDestinationsPatchRequest) (*V3RoutesGuidDestinationsPost200Response, *http.Response, error)

	/*
	V3RoutesGuidDestinationsPost Add destinations to a route

	Add one or more destinations (app/port combinations) to a route

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidDestinationsPostRequest
	*/
	V3RoutesGuidDestinationsPost(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsPostRequest

	// V3RoutesGuidDestinationsPostExecute executes the request
	//  @return V3RoutesGuidDestinationsPost200Response
	V3RoutesGuidDestinationsPostExecute(r ApiV3RoutesGuidDestinationsPostRequest) (*V3RoutesGuidDestinationsPost200Response, *http.Response, error)
}

// RouteMappingsAPIService RouteMappingsAPI service
type RouteMappingsAPIService service

type ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest struct {
	ctx context.Context
	ApiService RouteMappingsAPI
	guid string
	destinationGuid string
}

func (r ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3RoutesGuidDestinationsDestinationGuidDeleteExecute(r)
}

/*
V3RoutesGuidDestinationsDestinationGuidDelete Remove destination from a route

Remove a specific destination from a route

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @param destinationGuid The destination GUID
 @return ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest
*/
func (a *RouteMappingsAPIService) V3RoutesGuidDestinationsDestinationGuidDelete(ctx context.Context, guid string, destinationGuid string) ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest {
	return ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
		destinationGuid: destinationGuid,
	}
}

// Execute executes the request
func (a *RouteMappingsAPIService) V3RoutesGuidDestinationsDestinationGuidDeleteExecute(r ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RouteMappingsAPIService.V3RoutesGuidDestinationsDestinationGuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/destinations/{destination_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"destination_guid"+"}", url.PathEscape(parameterValueToString(r.destinationGuid, "destinationGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV3RoutesGuidDestinationsGetRequest struct {
	ctx context.Context
	ApiService RouteMappingsAPI
	guid string
	page *int32
	perPage *int32
	appGuids *string
}

// Page number for pagination
func (r ApiV3RoutesGuidDestinationsGetRequest) Page(page int32) ApiV3RoutesGuidDestinationsGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3RoutesGuidDestinationsGetRequest) PerPage(perPage int32) ApiV3RoutesGuidDestinationsGetRequest {
	r.perPage = &perPage
	return r
}

// Filter by app GUIDs (comma-separated)
func (r ApiV3RoutesGuidDestinationsGetRequest) AppGuids(appGuids string) ApiV3RoutesGuidDestinationsGetRequest {
	r.appGuids = &appGuids
	return r
}

func (r ApiV3RoutesGuidDestinationsGetRequest) Execute() (*V3RoutesGuidDestinationsGet200Response, *http.Response, error) {
	return r.ApiService.V3RoutesGuidDestinationsGetExecute(r)
}

/*
V3RoutesGuidDestinationsGet List destinations for a route

List all destinations (app/port combinations) mapped to a route

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidDestinationsGetRequest
*/
func (a *RouteMappingsAPIService) V3RoutesGuidDestinationsGet(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsGetRequest {
	return ApiV3RoutesGuidDestinationsGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3RoutesGuidDestinationsGet200Response
func (a *RouteMappingsAPIService) V3RoutesGuidDestinationsGetExecute(r ApiV3RoutesGuidDestinationsGetRequest) (*V3RoutesGuidDestinationsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3RoutesGuidDestinationsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RouteMappingsAPIService.V3RoutesGuidDestinationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/destinations"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	}
	if r.appGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_guids", r.appGuids, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesGuidDestinationsPatchRequest struct {
	ctx context.Context
	ApiService RouteMappingsAPI
	guid string
	v3RoutesGuidDestinationsPatchRequest *V3RoutesGuidDestinationsPatchRequest
}

func (r ApiV3RoutesGuidDestinationsPatchRequest) V3RoutesGuidDestinationsPatchRequest(v3RoutesGuidDestinationsPatchRequest V3RoutesGuidDestinationsPatchRequest) ApiV3RoutesGuidDestinationsPatchRequest {
	r.v3RoutesGuidDestinationsPatchRequest = &v3RoutesGuidDestinationsPatchRequest
	return r
}

func (r ApiV3RoutesGuidDestinationsPatchRequest) Execute() (*V3RoutesGuidDestinationsPost200Response, *http.Response, error) {
	return r.ApiService.V3RoutesGuidDestinationsPatchExecute(r)
}

/*
V3RoutesGuidDestinationsPatch Update destinations for a route

Update or replace destinations for a route

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidDestinationsPatchRequest
*/
func (a *RouteMappingsAPIService) V3RoutesGuidDestinationsPatch(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsPatchRequest {
	return ApiV3RoutesGuidDestinationsPatchRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3RoutesGuidDestinationsPost200Response
func (a *RouteMappingsAPIService) V3RoutesGuidDestinationsPatchExecute(r ApiV3RoutesGuidDestinationsPatchRequest) (*V3RoutesGuidDestinationsPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3RoutesGuidDestinationsPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RouteMappingsAPIService.V3RoutesGuidDestinationsPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/destinations"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3RoutesGuidDestinationsPatchRequest == nil {
		return localVarReturnValue, nil, reportError("v3RoutesGuidDestinationsPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3RoutesGuidDestinationsPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesGuidDestinationsPostRequest struct {
	ctx context.Context
	ApiService RouteMappingsAPI
	guid string
	v3RoutesGuidDestinationsPostRequest *V3RoutesGuidDestinationsPostRequest
}

func (r ApiV3RoutesGuidDestinationsPostRequest) V3RoutesGuidDestinationsPostRequest(v3RoutesGuidDestinationsPostRequest V3RoutesGuidDestinationsPostRequest) ApiV3RoutesGuidDestinationsPostRequest {
	r.v3RoutesGuidDestinationsPostRequest = &v3RoutesGuidDestinationsPostRequest
	return r
}

func (r ApiV3RoutesGuidDestinationsPostRequest) Execute() (*V3RoutesGuidDestinationsPost200Response, *http.Response, error) {
	return r.ApiService.V3RoutesGuidDestinationsPostExecute(r)
}

/*
V3RoutesGuidDestinationsPost Add destinations to a route

Add one or more destinations (app/port combinations) to a route

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidDestinationsPostRequest
*/
func (a *RouteMappingsAPIService) V3RoutesGuidDestinationsPost(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsPostRequest {
	return ApiV3RoutesGuidDestinationsPostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3RoutesGuidDestinationsPost200Response
func (a *RouteMappingsAPIService) V3RoutesGuidDestinationsPostExecute(r ApiV3RoutesGuidDestinationsPostRequest) (*V3RoutesGuidDestinationsPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3RoutesGuidDestinationsPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RouteMappingsAPIService.V3RoutesGuidDestinationsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/destinations"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3RoutesGuidDestinationsPostRequest == nil {
		return localVarReturnValue, nil, reportError("v3RoutesGuidDestinationsPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3RoutesGuidDestinationsPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
