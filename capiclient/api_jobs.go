/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type JobsAPI interface {

	/*
	V3JobsGet List jobs

	Retrieve all jobs the user has access to.

This endpoint returns jobs across all resources and operations. Jobs are
automatically cleaned up after completion, so only recent jobs are available.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3JobsGetRequest
	*/
	V3JobsGet(ctx context.Context) ApiV3JobsGetRequest

	// V3JobsGetExecute executes the request
	//  @return V3JobsGet200Response
	V3JobsGetExecute(r ApiV3JobsGetRequest) (*V3JobsGet200Response, *http.Response, error)

	/*
	V3JobsGuidGet Get a job

	Retrieve a job by its GUID.

Jobs represent asynchronous operations in Cloud Foundry. When an operation
returns a 202 Accepted response, it provides a Location header with the job URL.
Clients should poll this endpoint to check the job's completion status.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The job GUID
	@return ApiV3JobsGuidGetRequest
	*/
	V3JobsGuidGet(ctx context.Context, guid string) ApiV3JobsGuidGetRequest

	// V3JobsGuidGetExecute executes the request
	//  @return Job
	V3JobsGuidGetExecute(r ApiV3JobsGuidGetRequest) (*Job, *http.Response, error)
}

// JobsAPIService JobsAPI service
type JobsAPIService service

type ApiV3JobsGetRequest struct {
	ctx context.Context
	ApiService JobsAPI
	page *int32
	perPage *int32
	orderBy *string
	states *string
	labelSelector *string
	createdAts *string
	updatedAts *string
	guids *string
}

// Page to display
func (r ApiV3JobsGetRequest) Page(page int32) ApiV3JobsGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3JobsGetRequest) PerPage(perPage int32) ApiV3JobsGetRequest {
	r.perPage = &perPage
	return r
}

// Value to sort by
func (r ApiV3JobsGetRequest) OrderBy(orderBy string) ApiV3JobsGetRequest {
	r.orderBy = &orderBy
	return r
}

// Comma-delimited list of job states to filter by
func (r ApiV3JobsGetRequest) States(states string) ApiV3JobsGetRequest {
	r.states = &states
	return r
}

// Filter by label selector
func (r ApiV3JobsGetRequest) LabelSelector(labelSelector string) ApiV3JobsGetRequest {
	r.labelSelector = &labelSelector
	return r
}

// Filter by creation time
func (r ApiV3JobsGetRequest) CreatedAts(createdAts string) ApiV3JobsGetRequest {
	r.createdAts = &createdAts
	return r
}

// Filter by update time
func (r ApiV3JobsGetRequest) UpdatedAts(updatedAts string) ApiV3JobsGetRequest {
	r.updatedAts = &updatedAts
	return r
}

// Comma-delimited list of job GUIDs to filter by
func (r ApiV3JobsGetRequest) Guids(guids string) ApiV3JobsGetRequest {
	r.guids = &guids
	return r
}

func (r ApiV3JobsGetRequest) Execute() (*V3JobsGet200Response, *http.Response, error) {
	return r.ApiService.V3JobsGetExecute(r)
}

/*
V3JobsGet List jobs

Retrieve all jobs the user has access to.

This endpoint returns jobs across all resources and operations. Jobs are
automatically cleaned up after completion, so only recent jobs are available.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3JobsGetRequest
*/
func (a *JobsAPIService) V3JobsGet(ctx context.Context) ApiV3JobsGetRequest {
	return ApiV3JobsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V3JobsGet200Response
func (a *JobsAPIService) V3JobsGetExecute(r ApiV3JobsGetRequest) (*V3JobsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3JobsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobsAPIService.V3JobsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	} else {
		var defaultValue int32 = 50
		r.perPage = &defaultValue
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	} else {
		var defaultValue string = "-created_at"
		r.orderBy = &defaultValue
	}
	if r.states != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "states", r.states, "form", "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label_selector", r.labelSelector, "form", "")
	}
	if r.createdAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_ats", r.createdAts, "form", "")
	}
	if r.updatedAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_ats", r.updatedAts, "form", "")
	}
	if r.guids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guids", r.guids, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3JobsGuidGetRequest struct {
	ctx context.Context
	ApiService JobsAPI
	guid string
}

func (r ApiV3JobsGuidGetRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.V3JobsGuidGetExecute(r)
}

/*
V3JobsGuidGet Get a job

Retrieve a job by its GUID.

Jobs represent asynchronous operations in Cloud Foundry. When an operation
returns a 202 Accepted response, it provides a Location header with the job URL.
Clients should poll this endpoint to check the job's completion status.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The job GUID
 @return ApiV3JobsGuidGetRequest
*/
func (a *JobsAPIService) V3JobsGuidGet(ctx context.Context, guid string) ApiV3JobsGuidGetRequest {
	return ApiV3JobsGuidGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return Job
func (a *JobsAPIService) V3JobsGuidGetExecute(r ApiV3JobsGuidGetRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobsAPIService.V3JobsGuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/jobs/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
