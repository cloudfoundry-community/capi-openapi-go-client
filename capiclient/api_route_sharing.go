/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type RouteSharingAPI interface {

	/*
	V3RoutesGuidRelationshipsSharedSpacesGet List shared spaces for a route (experimental)

	List all spaces that a route is shared with. This is an experimental feature.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest
	*/
	V3RoutesGuidRelationshipsSharedSpacesGet(ctx context.Context, guid string) ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest

	// V3RoutesGuidRelationshipsSharedSpacesGetExecute executes the request
	//  @return V3RoutesGuidRelationshipsSharedSpacesGet200Response
	V3RoutesGuidRelationshipsSharedSpacesGetExecute(r ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest) (*V3RoutesGuidRelationshipsSharedSpacesGet200Response, *http.Response, error)

	/*
	V3RoutesGuidRelationshipsSpacePatch Share a route to another space (experimental)

	Share a route with another space, allowing apps in that space to be mapped to the route. This is an experimental feature.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidRelationshipsSpacePatchRequest
	*/
	V3RoutesGuidRelationshipsSpacePatch(ctx context.Context, guid string) ApiV3RoutesGuidRelationshipsSpacePatchRequest

	// V3RoutesGuidRelationshipsSpacePatchExecute executes the request
	//  @return V3RoutesGuidRelationshipsSpacePatch200Response
	V3RoutesGuidRelationshipsSpacePatchExecute(r ApiV3RoutesGuidRelationshipsSpacePatchRequest) (*V3RoutesGuidRelationshipsSpacePatch200Response, *http.Response, error)
}

// RouteSharingAPIService RouteSharingAPI service
type RouteSharingAPIService service

type ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest struct {
	ctx context.Context
	ApiService RouteSharingAPI
	guid string
}

func (r ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest) Execute() (*V3RoutesGuidRelationshipsSharedSpacesGet200Response, *http.Response, error) {
	return r.ApiService.V3RoutesGuidRelationshipsSharedSpacesGetExecute(r)
}

/*
V3RoutesGuidRelationshipsSharedSpacesGet List shared spaces for a route (experimental)

List all spaces that a route is shared with. This is an experimental feature.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest
*/
func (a *RouteSharingAPIService) V3RoutesGuidRelationshipsSharedSpacesGet(ctx context.Context, guid string) ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest {
	return ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3RoutesGuidRelationshipsSharedSpacesGet200Response
func (a *RouteSharingAPIService) V3RoutesGuidRelationshipsSharedSpacesGetExecute(r ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest) (*V3RoutesGuidRelationshipsSharedSpacesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3RoutesGuidRelationshipsSharedSpacesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RouteSharingAPIService.V3RoutesGuidRelationshipsSharedSpacesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/relationships/shared_spaces"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesGuidRelationshipsSpacePatchRequest struct {
	ctx context.Context
	ApiService RouteSharingAPI
	guid string
	v3RoutesGuidRelationshipsSpacePatchRequest *V3RoutesGuidRelationshipsSpacePatchRequest
}

func (r ApiV3RoutesGuidRelationshipsSpacePatchRequest) V3RoutesGuidRelationshipsSpacePatchRequest(v3RoutesGuidRelationshipsSpacePatchRequest V3RoutesGuidRelationshipsSpacePatchRequest) ApiV3RoutesGuidRelationshipsSpacePatchRequest {
	r.v3RoutesGuidRelationshipsSpacePatchRequest = &v3RoutesGuidRelationshipsSpacePatchRequest
	return r
}

func (r ApiV3RoutesGuidRelationshipsSpacePatchRequest) Execute() (*V3RoutesGuidRelationshipsSpacePatch200Response, *http.Response, error) {
	return r.ApiService.V3RoutesGuidRelationshipsSpacePatchExecute(r)
}

/*
V3RoutesGuidRelationshipsSpacePatch Share a route to another space (experimental)

Share a route with another space, allowing apps in that space to be mapped to the route. This is an experimental feature.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidRelationshipsSpacePatchRequest
*/
func (a *RouteSharingAPIService) V3RoutesGuidRelationshipsSpacePatch(ctx context.Context, guid string) ApiV3RoutesGuidRelationshipsSpacePatchRequest {
	return ApiV3RoutesGuidRelationshipsSpacePatchRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3RoutesGuidRelationshipsSpacePatch200Response
func (a *RouteSharingAPIService) V3RoutesGuidRelationshipsSpacePatchExecute(r ApiV3RoutesGuidRelationshipsSpacePatchRequest) (*V3RoutesGuidRelationshipsSpacePatch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3RoutesGuidRelationshipsSpacePatch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RouteSharingAPIService.V3RoutesGuidRelationshipsSpacePatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/relationships/space"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3RoutesGuidRelationshipsSpacePatchRequest == nil {
		return localVarReturnValue, nil, reportError("v3RoutesGuidRelationshipsSpacePatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3RoutesGuidRelationshipsSpacePatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
