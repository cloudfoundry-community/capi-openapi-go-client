/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
)

// checks if the ErrorTestModeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorTestModeInfo{}

// ErrorTestModeInfo Additional information when in test mode
type ErrorTestModeInfo struct {
	// Stack trace of the error
	Backtrace []string `json:"backtrace,omitempty"`
	Source *ErrorTestModeInfoSource `json:"source,omitempty"`
}

// NewErrorTestModeInfo instantiates a new ErrorTestModeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorTestModeInfo() *ErrorTestModeInfo {
	this := ErrorTestModeInfo{}
	return &this
}

// NewErrorTestModeInfoWithDefaults instantiates a new ErrorTestModeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorTestModeInfoWithDefaults() *ErrorTestModeInfo {
	this := ErrorTestModeInfo{}
	return &this
}

// GetBacktrace returns the Backtrace field value if set, zero value otherwise.
func (o *ErrorTestModeInfo) GetBacktrace() []string {
	if o == nil || IsNil(o.Backtrace) {
		var ret []string
		return ret
	}
	return o.Backtrace
}

// GetBacktraceOk returns a tuple with the Backtrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorTestModeInfo) GetBacktraceOk() ([]string, bool) {
	if o == nil || IsNil(o.Backtrace) {
		return nil, false
	}
	return o.Backtrace, true
}

// HasBacktrace returns a boolean if a field has been set.
func (o *ErrorTestModeInfo) HasBacktrace() bool {
	if o != nil && !IsNil(o.Backtrace) {
		return true
	}

	return false
}

// SetBacktrace gets a reference to the given []string and assigns it to the Backtrace field.
func (o *ErrorTestModeInfo) SetBacktrace(v []string) {
	o.Backtrace = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ErrorTestModeInfo) GetSource() ErrorTestModeInfoSource {
	if o == nil || IsNil(o.Source) {
		var ret ErrorTestModeInfoSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorTestModeInfo) GetSourceOk() (*ErrorTestModeInfoSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ErrorTestModeInfo) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given ErrorTestModeInfoSource and assigns it to the Source field.
func (o *ErrorTestModeInfo) SetSource(v ErrorTestModeInfoSource) {
	o.Source = &v
}

func (o ErrorTestModeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorTestModeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Backtrace) {
		toSerialize["backtrace"] = o.Backtrace
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableErrorTestModeInfo struct {
	value *ErrorTestModeInfo
	isSet bool
}

func (v NullableErrorTestModeInfo) Get() *ErrorTestModeInfo {
	return v.value
}

func (v *NullableErrorTestModeInfo) Set(val *ErrorTestModeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorTestModeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorTestModeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorTestModeInfo(val *ErrorTestModeInfo) *NullableErrorTestModeInfo {
	return &NullableErrorTestModeInfo{value: val, isSet: true}
}

func (v NullableErrorTestModeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorTestModeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


