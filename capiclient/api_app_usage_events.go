/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type AppUsageEventsAPI interface {

	/*
	V3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPost Purge and seed app usage events

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostRequest
	*/
	V3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPost(ctx context.Context) ApiV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostRequest

	// V3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostExecute executes the request
	//  @return map[string]interface{}
	V3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostExecute(r ApiV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostRequest) (map[string]interface{}, *http.Response, error)

	/*
	V3AppUsageEventsGet List app usage events

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3AppUsageEventsGetRequest
	*/
	V3AppUsageEventsGet(ctx context.Context) ApiV3AppUsageEventsGetRequest

	// V3AppUsageEventsGetExecute executes the request
	//  @return AppUsageEventList
	V3AppUsageEventsGetExecute(r ApiV3AppUsageEventsGetRequest) (*AppUsageEventList, *http.Response, error)

	/*
	V3AppUsageEventsGuidGet Retrieve an app usage event

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid Unique identifier for the event
	@return ApiV3AppUsageEventsGuidGetRequest
	*/
	V3AppUsageEventsGuidGet(ctx context.Context, guid string) ApiV3AppUsageEventsGuidGetRequest

	// V3AppUsageEventsGuidGetExecute executes the request
	//  @return AppUsageEvent
	V3AppUsageEventsGuidGetExecute(r ApiV3AppUsageEventsGuidGetRequest) (*AppUsageEvent, *http.Response, error)
}

// AppUsageEventsAPIService AppUsageEventsAPI service
type AppUsageEventsAPIService service

type ApiV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostRequest struct {
	ctx context.Context
	ApiService AppUsageEventsAPI
}

func (r ApiV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.V3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostExecute(r)
}

/*
V3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPost Purge and seed app usage events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostRequest
*/
func (a *AppUsageEventsAPIService) V3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPost(ctx context.Context) ApiV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostRequest {
	return ApiV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *AppUsageEventsAPIService) V3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostExecute(r ApiV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPostRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppUsageEventsAPIService.V3AppUsageEventsActionsDestructivelyPurgeAllAndReseedPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/app_usage_events/actions/destructively_purge_all_and_reseed"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3AppUsageEventsGetRequest struct {
	ctx context.Context
	ApiService AppUsageEventsAPI
	page *int32
	perPage *int32
	orderBy *string
	afterGuid *string
	guids *[]string
	createdAts *[]time.Time
}

// Page to display
func (r ApiV3AppUsageEventsGetRequest) Page(page int32) ApiV3AppUsageEventsGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3AppUsageEventsGetRequest) PerPage(perPage int32) ApiV3AppUsageEventsGetRequest {
	r.perPage = &perPage
	return r
}

// Value to sort by
func (r ApiV3AppUsageEventsGetRequest) OrderBy(orderBy string) ApiV3AppUsageEventsGetRequest {
	r.orderBy = &orderBy
	return r
}

// Filters out events before and including the event with the given guid
func (r ApiV3AppUsageEventsGetRequest) AfterGuid(afterGuid string) ApiV3AppUsageEventsGetRequest {
	r.afterGuid = &afterGuid
	return r
}

// Comma-delimited list of usage event guids to filter by
func (r ApiV3AppUsageEventsGetRequest) Guids(guids []string) ApiV3AppUsageEventsGetRequest {
	r.guids = &guids
	return r
}

// Timestamp to filter by
func (r ApiV3AppUsageEventsGetRequest) CreatedAts(createdAts []time.Time) ApiV3AppUsageEventsGetRequest {
	r.createdAts = &createdAts
	return r
}

func (r ApiV3AppUsageEventsGetRequest) Execute() (*AppUsageEventList, *http.Response, error) {
	return r.ApiService.V3AppUsageEventsGetExecute(r)
}

/*
V3AppUsageEventsGet List app usage events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3AppUsageEventsGetRequest
*/
func (a *AppUsageEventsAPIService) V3AppUsageEventsGet(ctx context.Context) ApiV3AppUsageEventsGetRequest {
	return ApiV3AppUsageEventsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppUsageEventList
func (a *AppUsageEventsAPIService) V3AppUsageEventsGetExecute(r ApiV3AppUsageEventsGetRequest) (*AppUsageEventList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppUsageEventList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppUsageEventsAPIService.V3AppUsageEventsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/app_usage_events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	}
	if r.afterGuid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after_guid", r.afterGuid, "form", "")
	}
	if r.guids != nil {
		t := *r.guids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "guids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "guids", t, "form", "multi")
		}
	}
	if r.createdAts != nil {
		t := *r.createdAts
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created_ats", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created_ats", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3AppUsageEventsGuidGetRequest struct {
	ctx context.Context
	ApiService AppUsageEventsAPI
	guid string
}

func (r ApiV3AppUsageEventsGuidGetRequest) Execute() (*AppUsageEvent, *http.Response, error) {
	return r.ApiService.V3AppUsageEventsGuidGetExecute(r)
}

/*
V3AppUsageEventsGuidGet Retrieve an app usage event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid Unique identifier for the event
 @return ApiV3AppUsageEventsGuidGetRequest
*/
func (a *AppUsageEventsAPIService) V3AppUsageEventsGuidGet(ctx context.Context, guid string) ApiV3AppUsageEventsGuidGetRequest {
	return ApiV3AppUsageEventsGuidGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return AppUsageEvent
func (a *AppUsageEventsAPIService) V3AppUsageEventsGuidGetExecute(r ApiV3AppUsageEventsGuidGetRequest) (*AppUsageEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppUsageEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppUsageEventsAPIService.V3AppUsageEventsGuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/app_usage_events/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
