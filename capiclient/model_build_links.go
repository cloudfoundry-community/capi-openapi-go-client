/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
)

// checks if the BuildLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildLinks{}

// BuildLinks struct for BuildLinks
type BuildLinks struct {
	App *BuildLinksApp `json:"app,omitempty"`
	Droplet NullableBuildLinksDroplet `json:"droplet,omitempty"`
	Package *BuildLinksPackage `json:"package,omitempty"`
	Self *BuildLinksSelf `json:"self,omitempty"`
}

// NewBuildLinks instantiates a new BuildLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildLinks() *BuildLinks {
	this := BuildLinks{}
	return &this
}

// NewBuildLinksWithDefaults instantiates a new BuildLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildLinksWithDefaults() *BuildLinks {
	this := BuildLinks{}
	return &this
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *BuildLinks) GetApp() BuildLinksApp {
	if o == nil || IsNil(o.App) {
		var ret BuildLinksApp
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildLinks) GetAppOk() (*BuildLinksApp, bool) {
	if o == nil || IsNil(o.App) {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *BuildLinks) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}

// SetApp gets a reference to the given BuildLinksApp and assigns it to the App field.
func (o *BuildLinks) SetApp(v BuildLinksApp) {
	o.App = &v
}

// GetDroplet returns the Droplet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BuildLinks) GetDroplet() BuildLinksDroplet {
	if o == nil || IsNil(o.Droplet.Get()) {
		var ret BuildLinksDroplet
		return ret
	}
	return *o.Droplet.Get()
}

// GetDropletOk returns a tuple with the Droplet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BuildLinks) GetDropletOk() (*BuildLinksDroplet, bool) {
	if o == nil {
		return nil, false
	}
	return o.Droplet.Get(), o.Droplet.IsSet()
}

// HasDroplet returns a boolean if a field has been set.
func (o *BuildLinks) HasDroplet() bool {
	if o != nil && o.Droplet.IsSet() {
		return true
	}

	return false
}

// SetDroplet gets a reference to the given NullableBuildLinksDroplet and assigns it to the Droplet field.
func (o *BuildLinks) SetDroplet(v BuildLinksDroplet) {
	o.Droplet.Set(&v)
}
// SetDropletNil sets the value for Droplet to be an explicit nil
func (o *BuildLinks) SetDropletNil() {
	o.Droplet.Set(nil)
}

// UnsetDroplet ensures that no value is present for Droplet, not even an explicit nil
func (o *BuildLinks) UnsetDroplet() {
	o.Droplet.Unset()
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *BuildLinks) GetPackage() BuildLinksPackage {
	if o == nil || IsNil(o.Package) {
		var ret BuildLinksPackage
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildLinks) GetPackageOk() (*BuildLinksPackage, bool) {
	if o == nil || IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *BuildLinks) HasPackage() bool {
	if o != nil && !IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given BuildLinksPackage and assigns it to the Package field.
func (o *BuildLinks) SetPackage(v BuildLinksPackage) {
	o.Package = &v
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *BuildLinks) GetSelf() BuildLinksSelf {
	if o == nil || IsNil(o.Self) {
		var ret BuildLinksSelf
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildLinks) GetSelfOk() (*BuildLinksSelf, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *BuildLinks) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given BuildLinksSelf and assigns it to the Self field.
func (o *BuildLinks) SetSelf(v BuildLinksSelf) {
	o.Self = &v
}

func (o BuildLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	if o.Droplet.IsSet() {
		toSerialize["droplet"] = o.Droplet.Get()
	}
	if !IsNil(o.Package) {
		toSerialize["package"] = o.Package
	}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	return toSerialize, nil
}

type NullableBuildLinks struct {
	value *BuildLinks
	isSet bool
}

func (v NullableBuildLinks) Get() *BuildLinks {
	return v.value
}

func (v *NullableBuildLinks) Set(val *BuildLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildLinks(val *BuildLinks) *NullableBuildLinks {
	return &NullableBuildLinks{value: val, isSet: true}
}

func (v NullableBuildLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


