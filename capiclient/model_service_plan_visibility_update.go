/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServicePlanVisibilityUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicePlanVisibilityUpdate{}

// ServicePlanVisibilityUpdate struct for ServicePlanVisibilityUpdate
type ServicePlanVisibilityUpdate struct {
	Metadata *ServicePlanVisibilityUpdateMetadata `json:"metadata,omitempty"`
	// List of organizations where the plan should be visible (required for organization type)
	Organizations []ApplyOrganizationQuotaToOrganizationsRequestDataInner `json:"organizations,omitempty"`
	// Denotes the visibility of the plan
	Type string `json:"type"`
}

type _ServicePlanVisibilityUpdate ServicePlanVisibilityUpdate

// NewServicePlanVisibilityUpdate instantiates a new ServicePlanVisibilityUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicePlanVisibilityUpdate(type_ string) *ServicePlanVisibilityUpdate {
	this := ServicePlanVisibilityUpdate{}
	this.Type = type_
	return &this
}

// NewServicePlanVisibilityUpdateWithDefaults instantiates a new ServicePlanVisibilityUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicePlanVisibilityUpdateWithDefaults() *ServicePlanVisibilityUpdate {
	this := ServicePlanVisibilityUpdate{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ServicePlanVisibilityUpdate) GetMetadata() ServicePlanVisibilityUpdateMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ServicePlanVisibilityUpdateMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePlanVisibilityUpdate) GetMetadataOk() (*ServicePlanVisibilityUpdateMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ServicePlanVisibilityUpdate) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ServicePlanVisibilityUpdateMetadata and assigns it to the Metadata field.
func (o *ServicePlanVisibilityUpdate) SetMetadata(v ServicePlanVisibilityUpdateMetadata) {
	o.Metadata = &v
}

// GetOrganizations returns the Organizations field value if set, zero value otherwise.
func (o *ServicePlanVisibilityUpdate) GetOrganizations() []ApplyOrganizationQuotaToOrganizationsRequestDataInner {
	if o == nil || IsNil(o.Organizations) {
		var ret []ApplyOrganizationQuotaToOrganizationsRequestDataInner
		return ret
	}
	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePlanVisibilityUpdate) GetOrganizationsOk() ([]ApplyOrganizationQuotaToOrganizationsRequestDataInner, bool) {
	if o == nil || IsNil(o.Organizations) {
		return nil, false
	}
	return o.Organizations, true
}

// HasOrganizations returns a boolean if a field has been set.
func (o *ServicePlanVisibilityUpdate) HasOrganizations() bool {
	if o != nil && !IsNil(o.Organizations) {
		return true
	}

	return false
}

// SetOrganizations gets a reference to the given []ApplyOrganizationQuotaToOrganizationsRequestDataInner and assigns it to the Organizations field.
func (o *ServicePlanVisibilityUpdate) SetOrganizations(v []ApplyOrganizationQuotaToOrganizationsRequestDataInner) {
	o.Organizations = v
}

// GetType returns the Type field value
func (o *ServicePlanVisibilityUpdate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ServicePlanVisibilityUpdate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ServicePlanVisibilityUpdate) SetType(v string) {
	o.Type = v
}

func (o ServicePlanVisibilityUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicePlanVisibilityUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Organizations) {
		toSerialize["organizations"] = o.Organizations
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ServicePlanVisibilityUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicePlanVisibilityUpdate := _ServicePlanVisibilityUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServicePlanVisibilityUpdate)

	if err != nil {
		return err
	}

	*o = ServicePlanVisibilityUpdate(varServicePlanVisibilityUpdate)

	return err
}

type NullableServicePlanVisibilityUpdate struct {
	value *ServicePlanVisibilityUpdate
	isSet bool
}

func (v NullableServicePlanVisibilityUpdate) Get() *ServicePlanVisibilityUpdate {
	return v.value
}

func (v *NullableServicePlanVisibilityUpdate) Set(val *ServicePlanVisibilityUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableServicePlanVisibilityUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableServicePlanVisibilityUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicePlanVisibilityUpdate(val *ServicePlanVisibilityUpdate) *NullableServicePlanVisibilityUpdate {
	return &NullableServicePlanVisibilityUpdate{value: val, isSet: true}
}

func (v NullableServicePlanVisibilityUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicePlanVisibilityUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


