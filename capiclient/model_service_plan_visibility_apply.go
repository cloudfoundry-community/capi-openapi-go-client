/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServicePlanVisibilityApply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicePlanVisibilityApply{}

// ServicePlanVisibilityApply struct for ServicePlanVisibilityApply
type ServicePlanVisibilityApply struct {
	// List of organizations to add to the visibility list
	Organizations []ApplyOrganizationQuotaToOrganizationsRequestDataInner `json:"organizations,omitempty"`
	// Denotes the visibility of the plan
	Type string `json:"type"`
}

type _ServicePlanVisibilityApply ServicePlanVisibilityApply

// NewServicePlanVisibilityApply instantiates a new ServicePlanVisibilityApply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicePlanVisibilityApply(type_ string) *ServicePlanVisibilityApply {
	this := ServicePlanVisibilityApply{}
	this.Type = type_
	return &this
}

// NewServicePlanVisibilityApplyWithDefaults instantiates a new ServicePlanVisibilityApply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicePlanVisibilityApplyWithDefaults() *ServicePlanVisibilityApply {
	this := ServicePlanVisibilityApply{}
	return &this
}

// GetOrganizations returns the Organizations field value if set, zero value otherwise.
func (o *ServicePlanVisibilityApply) GetOrganizations() []ApplyOrganizationQuotaToOrganizationsRequestDataInner {
	if o == nil || IsNil(o.Organizations) {
		var ret []ApplyOrganizationQuotaToOrganizationsRequestDataInner
		return ret
	}
	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePlanVisibilityApply) GetOrganizationsOk() ([]ApplyOrganizationQuotaToOrganizationsRequestDataInner, bool) {
	if o == nil || IsNil(o.Organizations) {
		return nil, false
	}
	return o.Organizations, true
}

// HasOrganizations returns a boolean if a field has been set.
func (o *ServicePlanVisibilityApply) HasOrganizations() bool {
	if o != nil && !IsNil(o.Organizations) {
		return true
	}

	return false
}

// SetOrganizations gets a reference to the given []ApplyOrganizationQuotaToOrganizationsRequestDataInner and assigns it to the Organizations field.
func (o *ServicePlanVisibilityApply) SetOrganizations(v []ApplyOrganizationQuotaToOrganizationsRequestDataInner) {
	o.Organizations = v
}

// GetType returns the Type field value
func (o *ServicePlanVisibilityApply) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ServicePlanVisibilityApply) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ServicePlanVisibilityApply) SetType(v string) {
	o.Type = v
}

func (o ServicePlanVisibilityApply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicePlanVisibilityApply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Organizations) {
		toSerialize["organizations"] = o.Organizations
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ServicePlanVisibilityApply) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicePlanVisibilityApply := _ServicePlanVisibilityApply{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServicePlanVisibilityApply)

	if err != nil {
		return err
	}

	*o = ServicePlanVisibilityApply(varServicePlanVisibilityApply)

	return err
}

type NullableServicePlanVisibilityApply struct {
	value *ServicePlanVisibilityApply
	isSet bool
}

func (v NullableServicePlanVisibilityApply) Get() *ServicePlanVisibilityApply {
	return v.value
}

func (v *NullableServicePlanVisibilityApply) Set(val *ServicePlanVisibilityApply) {
	v.value = val
	v.isSet = true
}

func (v NullableServicePlanVisibilityApply) IsSet() bool {
	return v.isSet
}

func (v *NullableServicePlanVisibilityApply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicePlanVisibilityApply(val *ServicePlanVisibilityApply) *NullableServicePlanVisibilityApply {
	return &NullableServicePlanVisibilityApply{value: val, isSet: true}
}

func (v NullableServicePlanVisibilityApply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicePlanVisibilityApply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


