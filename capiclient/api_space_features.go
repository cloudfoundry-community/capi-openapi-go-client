/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SpaceFeaturesAPI interface {

	/*
	V3SpacesGuidFeaturesGet List space features

	Retrieve the list of features for the specified space.

Space features control specific capabilities within a space. Currently supported features:
- SSH: Enables SSH access to application instances in the space


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space GUID
	@return ApiV3SpacesGuidFeaturesGetRequest
	*/
	V3SpacesGuidFeaturesGet(ctx context.Context, guid string) ApiV3SpacesGuidFeaturesGetRequest

	// V3SpacesGuidFeaturesGetExecute executes the request
	//  @return V3SpacesGuidFeaturesGet200Response
	V3SpacesGuidFeaturesGetExecute(r ApiV3SpacesGuidFeaturesGetRequest) (*V3SpacesGuidFeaturesGet200Response, *http.Response, error)

	/*
	V3SpacesGuidFeaturesNameGet Get a space feature

	Retrieve a specific space feature by name.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space GUID
	@param name The feature name
	@return ApiV3SpacesGuidFeaturesNameGetRequest
	*/
	V3SpacesGuidFeaturesNameGet(ctx context.Context, guid string, name string) ApiV3SpacesGuidFeaturesNameGetRequest

	// V3SpacesGuidFeaturesNameGetExecute executes the request
	//  @return SpaceFeature
	V3SpacesGuidFeaturesNameGetExecute(r ApiV3SpacesGuidFeaturesNameGetRequest) (*SpaceFeature, *http.Response, error)

	/*
	V3SpacesGuidFeaturesNamePatch Update a space feature

	Update a space feature.

Only space managers and administrators can update space features.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space GUID
	@param name The feature name
	@return ApiV3SpacesGuidFeaturesNamePatchRequest
	*/
	V3SpacesGuidFeaturesNamePatch(ctx context.Context, guid string, name string) ApiV3SpacesGuidFeaturesNamePatchRequest

	// V3SpacesGuidFeaturesNamePatchExecute executes the request
	//  @return SpaceFeature
	V3SpacesGuidFeaturesNamePatchExecute(r ApiV3SpacesGuidFeaturesNamePatchRequest) (*SpaceFeature, *http.Response, error)
}

// SpaceFeaturesAPIService SpaceFeaturesAPI service
type SpaceFeaturesAPIService service

type ApiV3SpacesGuidFeaturesGetRequest struct {
	ctx context.Context
	ApiService SpaceFeaturesAPI
	guid string
}

func (r ApiV3SpacesGuidFeaturesGetRequest) Execute() (*V3SpacesGuidFeaturesGet200Response, *http.Response, error) {
	return r.ApiService.V3SpacesGuidFeaturesGetExecute(r)
}

/*
V3SpacesGuidFeaturesGet List space features

Retrieve the list of features for the specified space.

Space features control specific capabilities within a space. Currently supported features:
- SSH: Enables SSH access to application instances in the space


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space GUID
 @return ApiV3SpacesGuidFeaturesGetRequest
*/
func (a *SpaceFeaturesAPIService) V3SpacesGuidFeaturesGet(ctx context.Context, guid string) ApiV3SpacesGuidFeaturesGetRequest {
	return ApiV3SpacesGuidFeaturesGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3SpacesGuidFeaturesGet200Response
func (a *SpaceFeaturesAPIService) V3SpacesGuidFeaturesGetExecute(r ApiV3SpacesGuidFeaturesGetRequest) (*V3SpacesGuidFeaturesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3SpacesGuidFeaturesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceFeaturesAPIService.V3SpacesGuidFeaturesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/spaces/{guid}/features"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpacesGuidFeaturesNameGetRequest struct {
	ctx context.Context
	ApiService SpaceFeaturesAPI
	guid string
	name string
}

func (r ApiV3SpacesGuidFeaturesNameGetRequest) Execute() (*SpaceFeature, *http.Response, error) {
	return r.ApiService.V3SpacesGuidFeaturesNameGetExecute(r)
}

/*
V3SpacesGuidFeaturesNameGet Get a space feature

Retrieve a specific space feature by name.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space GUID
 @param name The feature name
 @return ApiV3SpacesGuidFeaturesNameGetRequest
*/
func (a *SpaceFeaturesAPIService) V3SpacesGuidFeaturesNameGet(ctx context.Context, guid string, name string) ApiV3SpacesGuidFeaturesNameGetRequest {
	return ApiV3SpacesGuidFeaturesNameGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
		name: name,
	}
}

// Execute executes the request
//  @return SpaceFeature
func (a *SpaceFeaturesAPIService) V3SpacesGuidFeaturesNameGetExecute(r ApiV3SpacesGuidFeaturesNameGetRequest) (*SpaceFeature, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpaceFeature
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceFeaturesAPIService.V3SpacesGuidFeaturesNameGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/spaces/{guid}/features/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpacesGuidFeaturesNamePatchRequest struct {
	ctx context.Context
	ApiService SpaceFeaturesAPI
	guid string
	name string
	spaceFeatureUpdate *SpaceFeatureUpdate
}

func (r ApiV3SpacesGuidFeaturesNamePatchRequest) SpaceFeatureUpdate(spaceFeatureUpdate SpaceFeatureUpdate) ApiV3SpacesGuidFeaturesNamePatchRequest {
	r.spaceFeatureUpdate = &spaceFeatureUpdate
	return r
}

func (r ApiV3SpacesGuidFeaturesNamePatchRequest) Execute() (*SpaceFeature, *http.Response, error) {
	return r.ApiService.V3SpacesGuidFeaturesNamePatchExecute(r)
}

/*
V3SpacesGuidFeaturesNamePatch Update a space feature

Update a space feature.

Only space managers and administrators can update space features.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space GUID
 @param name The feature name
 @return ApiV3SpacesGuidFeaturesNamePatchRequest
*/
func (a *SpaceFeaturesAPIService) V3SpacesGuidFeaturesNamePatch(ctx context.Context, guid string, name string) ApiV3SpacesGuidFeaturesNamePatchRequest {
	return ApiV3SpacesGuidFeaturesNamePatchRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
		name: name,
	}
}

// Execute executes the request
//  @return SpaceFeature
func (a *SpaceFeaturesAPIService) V3SpacesGuidFeaturesNamePatchExecute(r ApiV3SpacesGuidFeaturesNamePatchRequest) (*SpaceFeature, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpaceFeature
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceFeaturesAPIService.V3SpacesGuidFeaturesNamePatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/spaces/{guid}/features/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.spaceFeatureUpdate == nil {
		return localVarReturnValue, nil, reportError("spaceFeatureUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.spaceFeatureUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
