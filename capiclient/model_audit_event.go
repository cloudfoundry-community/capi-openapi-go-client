/*
Cloud Controller API

API specification for managing environment variable groups in Cloud Controller.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"time"
)

// checks if the AuditEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditEvent{}

// AuditEvent struct for AuditEvent
type AuditEvent struct {
	Actor *AuditEventActor `json:"actor,omitempty"`
	// The time with zone when the object was created
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Additional information about event
	Data map[string]interface{} `json:"data,omitempty"`
	// Unique identifier for the event
	Guid *string `json:"guid,omitempty"`
	Links *AuditEventLinks `json:"links,omitempty"`
	Organization *AuditEventOrganization `json:"organization,omitempty"`
	Space *AuditEventSpace `json:"space,omitempty"`
	Target *AuditEventTarget `json:"target,omitempty"`
	// The type of the event
	Type *string `json:"type,omitempty"`
	// The time with zone when the object was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewAuditEvent instantiates a new AuditEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditEvent() *AuditEvent {
	this := AuditEvent{}
	return &this
}

// NewAuditEventWithDefaults instantiates a new AuditEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditEventWithDefaults() *AuditEvent {
	this := AuditEvent{}
	return &this
}

// GetActor returns the Actor field value if set, zero value otherwise.
func (o *AuditEvent) GetActor() AuditEventActor {
	if o == nil || IsNil(o.Actor) {
		var ret AuditEventActor
		return ret
	}
	return *o.Actor
}

// GetActorOk returns a tuple with the Actor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetActorOk() (*AuditEventActor, bool) {
	if o == nil || IsNil(o.Actor) {
		return nil, false
	}
	return o.Actor, true
}

// HasActor returns a boolean if a field has been set.
func (o *AuditEvent) HasActor() bool {
	if o != nil && !IsNil(o.Actor) {
		return true
	}

	return false
}

// SetActor gets a reference to the given AuditEventActor and assigns it to the Actor field.
func (o *AuditEvent) SetActor(v AuditEventActor) {
	o.Actor = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AuditEvent) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AuditEvent) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AuditEvent) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *AuditEvent) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *AuditEvent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *AuditEvent) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *AuditEvent) GetGuid() string {
	if o == nil || IsNil(o.Guid) {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetGuidOk() (*string, bool) {
	if o == nil || IsNil(o.Guid) {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *AuditEvent) HasGuid() bool {
	if o != nil && !IsNil(o.Guid) {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *AuditEvent) SetGuid(v string) {
	o.Guid = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AuditEvent) GetLinks() AuditEventLinks {
	if o == nil || IsNil(o.Links) {
		var ret AuditEventLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetLinksOk() (*AuditEventLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AuditEvent) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given AuditEventLinks and assigns it to the Links field.
func (o *AuditEvent) SetLinks(v AuditEventLinks) {
	o.Links = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *AuditEvent) GetOrganization() AuditEventOrganization {
	if o == nil || IsNil(o.Organization) {
		var ret AuditEventOrganization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetOrganizationOk() (*AuditEventOrganization, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *AuditEvent) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given AuditEventOrganization and assigns it to the Organization field.
func (o *AuditEvent) SetOrganization(v AuditEventOrganization) {
	o.Organization = &v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *AuditEvent) GetSpace() AuditEventSpace {
	if o == nil || IsNil(o.Space) {
		var ret AuditEventSpace
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetSpaceOk() (*AuditEventSpace, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *AuditEvent) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given AuditEventSpace and assigns it to the Space field.
func (o *AuditEvent) SetSpace(v AuditEventSpace) {
	o.Space = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *AuditEvent) GetTarget() AuditEventTarget {
	if o == nil || IsNil(o.Target) {
		var ret AuditEventTarget
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetTargetOk() (*AuditEventTarget, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *AuditEvent) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given AuditEventTarget and assigns it to the Target field.
func (o *AuditEvent) SetTarget(v AuditEventTarget) {
	o.Target = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AuditEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AuditEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AuditEvent) SetType(v string) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AuditEvent) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditEvent) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AuditEvent) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *AuditEvent) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o AuditEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actor) {
		toSerialize["actor"] = o.Actor
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Guid) {
		toSerialize["guid"] = o.Guid
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableAuditEvent struct {
	value *AuditEvent
	isSet bool
}

func (v NullableAuditEvent) Get() *AuditEvent {
	return v.value
}

func (v *NullableAuditEvent) Set(val *AuditEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditEvent(val *AuditEvent) *NullableAuditEvent {
	return &NullableAuditEvent{value: val, isSet: true}
}

func (v NullableAuditEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


