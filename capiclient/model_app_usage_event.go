/*
Cloud Controller API

API specification for managing environment variable groups in Cloud Controller.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"time"
)

// checks if the AppUsageEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppUsageEvent{}

// AppUsageEvent struct for AppUsageEvent
type AppUsageEvent struct {
	App *AppUsageEventApp `json:"app,omitempty"`
	Buildpack *AppUsageEventBuildpack `json:"buildpack,omitempty"`
	// The time with zone when the event occurred
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Unique identifier for the event
	Guid *string `json:"guid,omitempty"`
	InstanceCount *AppUsageEventInstanceCount `json:"instance_count,omitempty"`
	Links *AppUsageEventLinks `json:"links,omitempty"`
	MemoryInMbPerInstance *AppUsageEventMemoryInMbPerInstance `json:"memory_in_mb_per_instance,omitempty"`
	Organization *AppUsageEventOrganization `json:"organization,omitempty"`
	Process *AppUsageEventProcess `json:"process,omitempty"`
	Space *AppUsageEventSpace `json:"space,omitempty"`
	State *AppUsageEventState `json:"state,omitempty"`
	Task *AppUsageEventTask `json:"task,omitempty"`
	// Identical to created_at (events are created, never updated)
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewAppUsageEvent instantiates a new AppUsageEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppUsageEvent() *AppUsageEvent {
	this := AppUsageEvent{}
	return &this
}

// NewAppUsageEventWithDefaults instantiates a new AppUsageEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppUsageEventWithDefaults() *AppUsageEvent {
	this := AppUsageEvent{}
	return &this
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *AppUsageEvent) GetApp() AppUsageEventApp {
	if o == nil || IsNil(o.App) {
		var ret AppUsageEventApp
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetAppOk() (*AppUsageEventApp, bool) {
	if o == nil || IsNil(o.App) {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *AppUsageEvent) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}

// SetApp gets a reference to the given AppUsageEventApp and assigns it to the App field.
func (o *AppUsageEvent) SetApp(v AppUsageEventApp) {
	o.App = &v
}

// GetBuildpack returns the Buildpack field value if set, zero value otherwise.
func (o *AppUsageEvent) GetBuildpack() AppUsageEventBuildpack {
	if o == nil || IsNil(o.Buildpack) {
		var ret AppUsageEventBuildpack
		return ret
	}
	return *o.Buildpack
}

// GetBuildpackOk returns a tuple with the Buildpack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetBuildpackOk() (*AppUsageEventBuildpack, bool) {
	if o == nil || IsNil(o.Buildpack) {
		return nil, false
	}
	return o.Buildpack, true
}

// HasBuildpack returns a boolean if a field has been set.
func (o *AppUsageEvent) HasBuildpack() bool {
	if o != nil && !IsNil(o.Buildpack) {
		return true
	}

	return false
}

// SetBuildpack gets a reference to the given AppUsageEventBuildpack and assigns it to the Buildpack field.
func (o *AppUsageEvent) SetBuildpack(v AppUsageEventBuildpack) {
	o.Buildpack = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AppUsageEvent) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AppUsageEvent) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AppUsageEvent) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *AppUsageEvent) GetGuid() string {
	if o == nil || IsNil(o.Guid) {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetGuidOk() (*string, bool) {
	if o == nil || IsNil(o.Guid) {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *AppUsageEvent) HasGuid() bool {
	if o != nil && !IsNil(o.Guid) {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *AppUsageEvent) SetGuid(v string) {
	o.Guid = &v
}

// GetInstanceCount returns the InstanceCount field value if set, zero value otherwise.
func (o *AppUsageEvent) GetInstanceCount() AppUsageEventInstanceCount {
	if o == nil || IsNil(o.InstanceCount) {
		var ret AppUsageEventInstanceCount
		return ret
	}
	return *o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetInstanceCountOk() (*AppUsageEventInstanceCount, bool) {
	if o == nil || IsNil(o.InstanceCount) {
		return nil, false
	}
	return o.InstanceCount, true
}

// HasInstanceCount returns a boolean if a field has been set.
func (o *AppUsageEvent) HasInstanceCount() bool {
	if o != nil && !IsNil(o.InstanceCount) {
		return true
	}

	return false
}

// SetInstanceCount gets a reference to the given AppUsageEventInstanceCount and assigns it to the InstanceCount field.
func (o *AppUsageEvent) SetInstanceCount(v AppUsageEventInstanceCount) {
	o.InstanceCount = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AppUsageEvent) GetLinks() AppUsageEventLinks {
	if o == nil || IsNil(o.Links) {
		var ret AppUsageEventLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetLinksOk() (*AppUsageEventLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AppUsageEvent) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given AppUsageEventLinks and assigns it to the Links field.
func (o *AppUsageEvent) SetLinks(v AppUsageEventLinks) {
	o.Links = &v
}

// GetMemoryInMbPerInstance returns the MemoryInMbPerInstance field value if set, zero value otherwise.
func (o *AppUsageEvent) GetMemoryInMbPerInstance() AppUsageEventMemoryInMbPerInstance {
	if o == nil || IsNil(o.MemoryInMbPerInstance) {
		var ret AppUsageEventMemoryInMbPerInstance
		return ret
	}
	return *o.MemoryInMbPerInstance
}

// GetMemoryInMbPerInstanceOk returns a tuple with the MemoryInMbPerInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetMemoryInMbPerInstanceOk() (*AppUsageEventMemoryInMbPerInstance, bool) {
	if o == nil || IsNil(o.MemoryInMbPerInstance) {
		return nil, false
	}
	return o.MemoryInMbPerInstance, true
}

// HasMemoryInMbPerInstance returns a boolean if a field has been set.
func (o *AppUsageEvent) HasMemoryInMbPerInstance() bool {
	if o != nil && !IsNil(o.MemoryInMbPerInstance) {
		return true
	}

	return false
}

// SetMemoryInMbPerInstance gets a reference to the given AppUsageEventMemoryInMbPerInstance and assigns it to the MemoryInMbPerInstance field.
func (o *AppUsageEvent) SetMemoryInMbPerInstance(v AppUsageEventMemoryInMbPerInstance) {
	o.MemoryInMbPerInstance = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *AppUsageEvent) GetOrganization() AppUsageEventOrganization {
	if o == nil || IsNil(o.Organization) {
		var ret AppUsageEventOrganization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetOrganizationOk() (*AppUsageEventOrganization, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *AppUsageEvent) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given AppUsageEventOrganization and assigns it to the Organization field.
func (o *AppUsageEvent) SetOrganization(v AppUsageEventOrganization) {
	o.Organization = &v
}

// GetProcess returns the Process field value if set, zero value otherwise.
func (o *AppUsageEvent) GetProcess() AppUsageEventProcess {
	if o == nil || IsNil(o.Process) {
		var ret AppUsageEventProcess
		return ret
	}
	return *o.Process
}

// GetProcessOk returns a tuple with the Process field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetProcessOk() (*AppUsageEventProcess, bool) {
	if o == nil || IsNil(o.Process) {
		return nil, false
	}
	return o.Process, true
}

// HasProcess returns a boolean if a field has been set.
func (o *AppUsageEvent) HasProcess() bool {
	if o != nil && !IsNil(o.Process) {
		return true
	}

	return false
}

// SetProcess gets a reference to the given AppUsageEventProcess and assigns it to the Process field.
func (o *AppUsageEvent) SetProcess(v AppUsageEventProcess) {
	o.Process = &v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *AppUsageEvent) GetSpace() AppUsageEventSpace {
	if o == nil || IsNil(o.Space) {
		var ret AppUsageEventSpace
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetSpaceOk() (*AppUsageEventSpace, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *AppUsageEvent) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given AppUsageEventSpace and assigns it to the Space field.
func (o *AppUsageEvent) SetSpace(v AppUsageEventSpace) {
	o.Space = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AppUsageEvent) GetState() AppUsageEventState {
	if o == nil || IsNil(o.State) {
		var ret AppUsageEventState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetStateOk() (*AppUsageEventState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AppUsageEvent) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given AppUsageEventState and assigns it to the State field.
func (o *AppUsageEvent) SetState(v AppUsageEventState) {
	o.State = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *AppUsageEvent) GetTask() AppUsageEventTask {
	if o == nil || IsNil(o.Task) {
		var ret AppUsageEventTask
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetTaskOk() (*AppUsageEventTask, bool) {
	if o == nil || IsNil(o.Task) {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *AppUsageEvent) HasTask() bool {
	if o != nil && !IsNil(o.Task) {
		return true
	}

	return false
}

// SetTask gets a reference to the given AppUsageEventTask and assigns it to the Task field.
func (o *AppUsageEvent) SetTask(v AppUsageEventTask) {
	o.Task = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AppUsageEvent) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUsageEvent) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AppUsageEvent) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *AppUsageEvent) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o AppUsageEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppUsageEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	if !IsNil(o.Buildpack) {
		toSerialize["buildpack"] = o.Buildpack
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Guid) {
		toSerialize["guid"] = o.Guid
	}
	if !IsNil(o.InstanceCount) {
		toSerialize["instance_count"] = o.InstanceCount
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.MemoryInMbPerInstance) {
		toSerialize["memory_in_mb_per_instance"] = o.MemoryInMbPerInstance
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Process) {
		toSerialize["process"] = o.Process
	}
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Task) {
		toSerialize["task"] = o.Task
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableAppUsageEvent struct {
	value *AppUsageEvent
	isSet bool
}

func (v NullableAppUsageEvent) Get() *AppUsageEvent {
	return v.value
}

func (v *NullableAppUsageEvent) Set(val *AppUsageEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAppUsageEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAppUsageEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppUsageEvent(val *AppUsageEvent) *NullableAppUsageEvent {
	return &NullableAppUsageEvent{value: val, isSet: true}
}

func (v NullableAppUsageEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppUsageEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


