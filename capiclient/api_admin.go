/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type AdminAPI interface {

	/*
	V3AdminActionsClearBuildpackCachePost Clear buildpack cache

	This endpoint will delete all of the existing buildpack caches in the blobstore. This endpoint will return a job; the client will need to poll the job's status to determine when the operation is complete.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3AdminActionsClearBuildpackCachePostRequest
	*/
	V3AdminActionsClearBuildpackCachePost(ctx context.Context) ApiV3AdminActionsClearBuildpackCachePostRequest

	// V3AdminActionsClearBuildpackCachePostExecute executes the request
	//  @return Job
	V3AdminActionsClearBuildpackCachePostExecute(r ApiV3AdminActionsClearBuildpackCachePostRequest) (*Job, *http.Response, error)
}

// AdminAPIService AdminAPI service
type AdminAPIService service

type ApiV3AdminActionsClearBuildpackCachePostRequest struct {
	ctx context.Context
	ApiService AdminAPI
}

func (r ApiV3AdminActionsClearBuildpackCachePostRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.V3AdminActionsClearBuildpackCachePostExecute(r)
}

/*
V3AdminActionsClearBuildpackCachePost Clear buildpack cache

This endpoint will delete all of the existing buildpack caches in the blobstore. This endpoint will return a job; the client will need to poll the job's status to determine when the operation is complete.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3AdminActionsClearBuildpackCachePostRequest
*/
func (a *AdminAPIService) V3AdminActionsClearBuildpackCachePost(ctx context.Context) ApiV3AdminActionsClearBuildpackCachePostRequest {
	return ApiV3AdminActionsClearBuildpackCachePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Job
func (a *AdminAPIService) V3AdminActionsClearBuildpackCachePostExecute(r ApiV3AdminActionsClearBuildpackCachePostRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminAPIService.V3AdminActionsClearBuildpackCachePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/admin/actions/clear_buildpack_cache"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
