/*
Cloud Controller API

API specification for managing environment variable groups in Cloud Controller.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type DomainsAPI interface {

	/*
	V3DomainsGet List domains

	Retrieve all domains the user has access to.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3DomainsGetRequest
	*/
	V3DomainsGet(ctx context.Context) ApiV3DomainsGetRequest

	// V3DomainsGetExecute executes the request
	//  @return V3DomainsGet200Response
	V3DomainsGetExecute(r ApiV3DomainsGetRequest) (*V3DomainsGet200Response, *http.Response, error)

	/*
	V3DomainsGuidDelete Delete a domain

	Delete a domain by its guid.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid
	@return ApiV3DomainsGuidDeleteRequest
	*/
	V3DomainsGuidDelete(ctx context.Context, guid string) ApiV3DomainsGuidDeleteRequest

	// V3DomainsGuidDeleteExecute executes the request
	V3DomainsGuidDeleteExecute(r ApiV3DomainsGuidDeleteRequest) (*http.Response, error)

	/*
	V3DomainsGuidGet Get a domain

	Retrieve a domain by its guid.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid
	@return ApiV3DomainsGuidGetRequest
	*/
	V3DomainsGuidGet(ctx context.Context, guid string) ApiV3DomainsGuidGetRequest

	// V3DomainsGuidGetExecute executes the request
	//  @return Domain
	V3DomainsGuidGetExecute(r ApiV3DomainsGuidGetRequest) (*Domain, *http.Response, error)

	/*
	V3DomainsGuidPatch Update a domain

	Update a domain by its guid.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid
	@return ApiV3DomainsGuidPatchRequest
	*/
	V3DomainsGuidPatch(ctx context.Context, guid string) ApiV3DomainsGuidPatchRequest

	// V3DomainsGuidPatchExecute executes the request
	//  @return Domain
	V3DomainsGuidPatchExecute(r ApiV3DomainsGuidPatchRequest) (*Domain, *http.Response, error)

	/*
	V3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDelete Unshare a domain

	Unshare a domain from an organization.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid
	@param orgGuid
	@return ApiV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteRequest
	*/
	V3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDelete(ctx context.Context, guid string, orgGuid string) ApiV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteRequest

	// V3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteExecute executes the request
	V3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteExecute(r ApiV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteRequest) (*http.Response, error)

	/*
	V3DomainsGuidRelationshipsSharedOrganizationsPost Share a domain

	Share a domain with other organizations.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid
	@return ApiV3DomainsGuidRelationshipsSharedOrganizationsPostRequest
	*/
	V3DomainsGuidRelationshipsSharedOrganizationsPost(ctx context.Context, guid string) ApiV3DomainsGuidRelationshipsSharedOrganizationsPostRequest

	// V3DomainsGuidRelationshipsSharedOrganizationsPostExecute executes the request
	//  @return V3DomainsGuidRelationshipsSharedOrganizationsPost200Response
	V3DomainsGuidRelationshipsSharedOrganizationsPostExecute(r ApiV3DomainsGuidRelationshipsSharedOrganizationsPostRequest) (*V3DomainsGuidRelationshipsSharedOrganizationsPost200Response, *http.Response, error)

	/*
	V3DomainsPost Create a domain

	Create a new domain.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3DomainsPostRequest
	*/
	V3DomainsPost(ctx context.Context) ApiV3DomainsPostRequest

	// V3DomainsPostExecute executes the request
	//  @return Domain
	V3DomainsPostExecute(r ApiV3DomainsPostRequest) (*Domain, *http.Response, error)
}

// DomainsAPIService DomainsAPI service
type DomainsAPIService service

type ApiV3DomainsGetRequest struct {
	ctx context.Context
	ApiService DomainsAPI
	guids *[]string
	names *[]string
	organizationGuids *[]string
	page *int32
	perPage *int32
	orderBy *string
	labelSelector *string
	createdAts *string
	updatedAts *string
}

// Comma-delimited list of guids to filter by
func (r ApiV3DomainsGetRequest) Guids(guids []string) ApiV3DomainsGetRequest {
	r.guids = &guids
	return r
}

// Comma-delimited list of domain names to filter by
func (r ApiV3DomainsGetRequest) Names(names []string) ApiV3DomainsGetRequest {
	r.names = &names
	return r
}

// Comma-delimited list of owning organization guids to filter by
func (r ApiV3DomainsGetRequest) OrganizationGuids(organizationGuids []string) ApiV3DomainsGetRequest {
	r.organizationGuids = &organizationGuids
	return r
}

// Page to display
func (r ApiV3DomainsGetRequest) Page(page int32) ApiV3DomainsGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3DomainsGetRequest) PerPage(perPage int32) ApiV3DomainsGetRequest {
	r.perPage = &perPage
	return r
}

// Value to sort by
func (r ApiV3DomainsGetRequest) OrderBy(orderBy string) ApiV3DomainsGetRequest {
	r.orderBy = &orderBy
	return r
}

// List of label selector requirements
func (r ApiV3DomainsGetRequest) LabelSelector(labelSelector string) ApiV3DomainsGetRequest {
	r.labelSelector = &labelSelector
	return r
}

// Timestamp to filter by
func (r ApiV3DomainsGetRequest) CreatedAts(createdAts string) ApiV3DomainsGetRequest {
	r.createdAts = &createdAts
	return r
}

// Timestamp to filter by
func (r ApiV3DomainsGetRequest) UpdatedAts(updatedAts string) ApiV3DomainsGetRequest {
	r.updatedAts = &updatedAts
	return r
}

func (r ApiV3DomainsGetRequest) Execute() (*V3DomainsGet200Response, *http.Response, error) {
	return r.ApiService.V3DomainsGetExecute(r)
}

/*
V3DomainsGet List domains

Retrieve all domains the user has access to.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3DomainsGetRequest
*/
func (a *DomainsAPIService) V3DomainsGet(ctx context.Context) ApiV3DomainsGetRequest {
	return ApiV3DomainsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V3DomainsGet200Response
func (a *DomainsAPIService) V3DomainsGetExecute(r ApiV3DomainsGetRequest) (*V3DomainsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3DomainsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsAPIService.V3DomainsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/domains"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.guids != nil {
		t := *r.guids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "guids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "guids", t, "form", "multi")
		}
	}
	if r.names != nil {
		t := *r.names
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "names", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "names", t, "form", "multi")
		}
	}
	if r.organizationGuids != nil {
		t := *r.organizationGuids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "organization_guids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "organization_guids", t, "form", "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label_selector", r.labelSelector, "form", "")
	}
	if r.createdAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_ats", r.createdAts, "form", "")
	}
	if r.updatedAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_ats", r.updatedAts, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3DomainsGuidDeleteRequest struct {
	ctx context.Context
	ApiService DomainsAPI
	guid string
}

func (r ApiV3DomainsGuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3DomainsGuidDeleteExecute(r)
}

/*
V3DomainsGuidDelete Delete a domain

Delete a domain by its guid.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid
 @return ApiV3DomainsGuidDeleteRequest
*/
func (a *DomainsAPIService) V3DomainsGuidDelete(ctx context.Context, guid string) ApiV3DomainsGuidDeleteRequest {
	return ApiV3DomainsGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
func (a *DomainsAPIService) V3DomainsGuidDeleteExecute(r ApiV3DomainsGuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsAPIService.V3DomainsGuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/domains/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV3DomainsGuidGetRequest struct {
	ctx context.Context
	ApiService DomainsAPI
	guid string
}

func (r ApiV3DomainsGuidGetRequest) Execute() (*Domain, *http.Response, error) {
	return r.ApiService.V3DomainsGuidGetExecute(r)
}

/*
V3DomainsGuidGet Get a domain

Retrieve a domain by its guid.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid
 @return ApiV3DomainsGuidGetRequest
*/
func (a *DomainsAPIService) V3DomainsGuidGet(ctx context.Context, guid string) ApiV3DomainsGuidGetRequest {
	return ApiV3DomainsGuidGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return Domain
func (a *DomainsAPIService) V3DomainsGuidGetExecute(r ApiV3DomainsGuidGetRequest) (*Domain, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Domain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsAPIService.V3DomainsGuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/domains/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3DomainsGuidPatchRequest struct {
	ctx context.Context
	ApiService DomainsAPI
	guid string
	v3DomainsGuidPatchRequest *V3DomainsGuidPatchRequest
}

func (r ApiV3DomainsGuidPatchRequest) V3DomainsGuidPatchRequest(v3DomainsGuidPatchRequest V3DomainsGuidPatchRequest) ApiV3DomainsGuidPatchRequest {
	r.v3DomainsGuidPatchRequest = &v3DomainsGuidPatchRequest
	return r
}

func (r ApiV3DomainsGuidPatchRequest) Execute() (*Domain, *http.Response, error) {
	return r.ApiService.V3DomainsGuidPatchExecute(r)
}

/*
V3DomainsGuidPatch Update a domain

Update a domain by its guid.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid
 @return ApiV3DomainsGuidPatchRequest
*/
func (a *DomainsAPIService) V3DomainsGuidPatch(ctx context.Context, guid string) ApiV3DomainsGuidPatchRequest {
	return ApiV3DomainsGuidPatchRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return Domain
func (a *DomainsAPIService) V3DomainsGuidPatchExecute(r ApiV3DomainsGuidPatchRequest) (*Domain, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Domain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsAPIService.V3DomainsGuidPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/domains/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3DomainsGuidPatchRequest == nil {
		return localVarReturnValue, nil, reportError("v3DomainsGuidPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3DomainsGuidPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteRequest struct {
	ctx context.Context
	ApiService DomainsAPI
	guid string
	orgGuid string
}

func (r ApiV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteExecute(r)
}

/*
V3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDelete Unshare a domain

Unshare a domain from an organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid
 @param orgGuid
 @return ApiV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteRequest
*/
func (a *DomainsAPIService) V3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDelete(ctx context.Context, guid string, orgGuid string) ApiV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteRequest {
	return ApiV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
		orgGuid: orgGuid,
	}
}

// Execute executes the request
func (a *DomainsAPIService) V3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteExecute(r ApiV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsAPIService.V3DomainsGuidRelationshipsSharedOrganizationsOrgGuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/domains/{guid}/relationships/shared_organizations/{org_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"org_guid"+"}", url.PathEscape(parameterValueToString(r.orgGuid, "orgGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV3DomainsGuidRelationshipsSharedOrganizationsPostRequest struct {
	ctx context.Context
	ApiService DomainsAPI
	guid string
	v3DomainsGuidRelationshipsSharedOrganizationsPostRequest *V3DomainsGuidRelationshipsSharedOrganizationsPostRequest
}

func (r ApiV3DomainsGuidRelationshipsSharedOrganizationsPostRequest) V3DomainsGuidRelationshipsSharedOrganizationsPostRequest(v3DomainsGuidRelationshipsSharedOrganizationsPostRequest V3DomainsGuidRelationshipsSharedOrganizationsPostRequest) ApiV3DomainsGuidRelationshipsSharedOrganizationsPostRequest {
	r.v3DomainsGuidRelationshipsSharedOrganizationsPostRequest = &v3DomainsGuidRelationshipsSharedOrganizationsPostRequest
	return r
}

func (r ApiV3DomainsGuidRelationshipsSharedOrganizationsPostRequest) Execute() (*V3DomainsGuidRelationshipsSharedOrganizationsPost200Response, *http.Response, error) {
	return r.ApiService.V3DomainsGuidRelationshipsSharedOrganizationsPostExecute(r)
}

/*
V3DomainsGuidRelationshipsSharedOrganizationsPost Share a domain

Share a domain with other organizations.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid
 @return ApiV3DomainsGuidRelationshipsSharedOrganizationsPostRequest
*/
func (a *DomainsAPIService) V3DomainsGuidRelationshipsSharedOrganizationsPost(ctx context.Context, guid string) ApiV3DomainsGuidRelationshipsSharedOrganizationsPostRequest {
	return ApiV3DomainsGuidRelationshipsSharedOrganizationsPostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3DomainsGuidRelationshipsSharedOrganizationsPost200Response
func (a *DomainsAPIService) V3DomainsGuidRelationshipsSharedOrganizationsPostExecute(r ApiV3DomainsGuidRelationshipsSharedOrganizationsPostRequest) (*V3DomainsGuidRelationshipsSharedOrganizationsPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3DomainsGuidRelationshipsSharedOrganizationsPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsAPIService.V3DomainsGuidRelationshipsSharedOrganizationsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/domains/{guid}/relationships/shared_organizations"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3DomainsGuidRelationshipsSharedOrganizationsPostRequest == nil {
		return localVarReturnValue, nil, reportError("v3DomainsGuidRelationshipsSharedOrganizationsPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3DomainsGuidRelationshipsSharedOrganizationsPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3DomainsPostRequest struct {
	ctx context.Context
	ApiService DomainsAPI
	v3DomainsPostRequest *V3DomainsPostRequest
}

func (r ApiV3DomainsPostRequest) V3DomainsPostRequest(v3DomainsPostRequest V3DomainsPostRequest) ApiV3DomainsPostRequest {
	r.v3DomainsPostRequest = &v3DomainsPostRequest
	return r
}

func (r ApiV3DomainsPostRequest) Execute() (*Domain, *http.Response, error) {
	return r.ApiService.V3DomainsPostExecute(r)
}

/*
V3DomainsPost Create a domain

Create a new domain.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3DomainsPostRequest
*/
func (a *DomainsAPIService) V3DomainsPost(ctx context.Context) ApiV3DomainsPostRequest {
	return ApiV3DomainsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Domain
func (a *DomainsAPIService) V3DomainsPostExecute(r ApiV3DomainsPostRequest) (*Domain, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Domain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsAPIService.V3DomainsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/domains"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3DomainsPostRequest == nil {
		return localVarReturnValue, nil, reportError("v3DomainsPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3DomainsPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
