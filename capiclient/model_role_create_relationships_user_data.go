/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RoleCreateRelationshipsUserData - struct for RoleCreateRelationshipsUserData
type RoleCreateRelationshipsUserData struct {
	RoleCreateRelationshipsUserDataOneOf *RoleCreateRelationshipsUserDataOneOf
	RoleCreateRelationshipsUserDataOneOf1 *RoleCreateRelationshipsUserDataOneOf1
}

// RoleCreateRelationshipsUserDataOneOfAsRoleCreateRelationshipsUserData is a convenience function that returns RoleCreateRelationshipsUserDataOneOf wrapped in RoleCreateRelationshipsUserData
func RoleCreateRelationshipsUserDataOneOfAsRoleCreateRelationshipsUserData(v *RoleCreateRelationshipsUserDataOneOf) RoleCreateRelationshipsUserData {
	return RoleCreateRelationshipsUserData{
		RoleCreateRelationshipsUserDataOneOf: v,
	}
}

// RoleCreateRelationshipsUserDataOneOf1AsRoleCreateRelationshipsUserData is a convenience function that returns RoleCreateRelationshipsUserDataOneOf1 wrapped in RoleCreateRelationshipsUserData
func RoleCreateRelationshipsUserDataOneOf1AsRoleCreateRelationshipsUserData(v *RoleCreateRelationshipsUserDataOneOf1) RoleCreateRelationshipsUserData {
	return RoleCreateRelationshipsUserData{
		RoleCreateRelationshipsUserDataOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RoleCreateRelationshipsUserData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RoleCreateRelationshipsUserDataOneOf
	err = newStrictDecoder(data).Decode(&dst.RoleCreateRelationshipsUserDataOneOf)
	if err == nil {
		jsonRoleCreateRelationshipsUserDataOneOf, _ := json.Marshal(dst.RoleCreateRelationshipsUserDataOneOf)
		if string(jsonRoleCreateRelationshipsUserDataOneOf) == "{}" { // empty struct
			dst.RoleCreateRelationshipsUserDataOneOf = nil
		} else {
			if err = validator.Validate(dst.RoleCreateRelationshipsUserDataOneOf); err != nil {
				dst.RoleCreateRelationshipsUserDataOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.RoleCreateRelationshipsUserDataOneOf = nil
	}

	// try to unmarshal data into RoleCreateRelationshipsUserDataOneOf1
	err = newStrictDecoder(data).Decode(&dst.RoleCreateRelationshipsUserDataOneOf1)
	if err == nil {
		jsonRoleCreateRelationshipsUserDataOneOf1, _ := json.Marshal(dst.RoleCreateRelationshipsUserDataOneOf1)
		if string(jsonRoleCreateRelationshipsUserDataOneOf1) == "{}" { // empty struct
			dst.RoleCreateRelationshipsUserDataOneOf1 = nil
		} else {
			if err = validator.Validate(dst.RoleCreateRelationshipsUserDataOneOf1); err != nil {
				dst.RoleCreateRelationshipsUserDataOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.RoleCreateRelationshipsUserDataOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RoleCreateRelationshipsUserDataOneOf = nil
		dst.RoleCreateRelationshipsUserDataOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RoleCreateRelationshipsUserData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RoleCreateRelationshipsUserData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RoleCreateRelationshipsUserData) MarshalJSON() ([]byte, error) {
	if src.RoleCreateRelationshipsUserDataOneOf != nil {
		return json.Marshal(&src.RoleCreateRelationshipsUserDataOneOf)
	}

	if src.RoleCreateRelationshipsUserDataOneOf1 != nil {
		return json.Marshal(&src.RoleCreateRelationshipsUserDataOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RoleCreateRelationshipsUserData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RoleCreateRelationshipsUserDataOneOf != nil {
		return obj.RoleCreateRelationshipsUserDataOneOf
	}

	if obj.RoleCreateRelationshipsUserDataOneOf1 != nil {
		return obj.RoleCreateRelationshipsUserDataOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RoleCreateRelationshipsUserData) GetActualInstanceValue() (interface{}) {
	if obj.RoleCreateRelationshipsUserDataOneOf != nil {
		return *obj.RoleCreateRelationshipsUserDataOneOf
	}

	if obj.RoleCreateRelationshipsUserDataOneOf1 != nil {
		return *obj.RoleCreateRelationshipsUserDataOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableRoleCreateRelationshipsUserData struct {
	value *RoleCreateRelationshipsUserData
	isSet bool
}

func (v NullableRoleCreateRelationshipsUserData) Get() *RoleCreateRelationshipsUserData {
	return v.value
}

func (v *NullableRoleCreateRelationshipsUserData) Set(val *RoleCreateRelationshipsUserData) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleCreateRelationshipsUserData) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleCreateRelationshipsUserData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleCreateRelationshipsUserData(val *RoleCreateRelationshipsUserData) *NullableRoleCreateRelationshipsUserData {
	return &NullableRoleCreateRelationshipsUserData{value: val, isSet: true}
}

func (v NullableRoleCreateRelationshipsUserData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleCreateRelationshipsUserData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


