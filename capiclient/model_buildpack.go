/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Buildpack type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Buildpack{}

// Buildpack struct for Buildpack
type Buildpack struct {
	BuildpackName *string `json:"buildpack_name,omitempty"`
	// The time the buildpack was created
	CreatedAt time.Time `json:"created_at"`
	DetectOutput *string `json:"detect_output,omitempty"`
	// Whether buildpack is available for use
	Enabled bool `json:"enabled"`
	// Filename of uploaded buildpack
	Filename NullableString `json:"filename"`
	// Unique identifier for the buildpack
	Guid string `json:"guid"`
	Lifecycle *BuildpackLifecycle `json:"lifecycle,omitempty"`
	Links BuildpackLinks `json:"links"`
	// Whether buildpack updates are prevented
	Locked bool `json:"locked"`
	Metadata V3AppsGuidTasksPostRequestMetadata `json:"metadata"`
	// Name of the buildpack
	Name string `json:"name"`
	// Priority position for automatic detection
	Position int32 `json:"position"`
	// Stack the buildpack runs on
	Stack NullableString `json:"stack"`
	// Current state of the buildpack
	State string `json:"state"`
	// The time the buildpack was last updated
	UpdatedAt time.Time `json:"updated_at"`
	Version *string `json:"version,omitempty"`
}

type _Buildpack Buildpack

// NewBuildpack instantiates a new Buildpack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildpack(createdAt time.Time, enabled bool, filename NullableString, guid string, links BuildpackLinks, locked bool, metadata V3AppsGuidTasksPostRequestMetadata, name string, position int32, stack NullableString, state string, updatedAt time.Time) *Buildpack {
	this := Buildpack{}
	this.CreatedAt = createdAt
	this.Enabled = enabled
	this.Filename = filename
	this.Guid = guid
	this.Links = links
	this.Locked = locked
	this.Metadata = metadata
	this.Name = name
	this.Position = position
	this.Stack = stack
	this.State = state
	this.UpdatedAt = updatedAt
	return &this
}

// NewBuildpackWithDefaults instantiates a new Buildpack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildpackWithDefaults() *Buildpack {
	this := Buildpack{}
	return &this
}

// GetBuildpackName returns the BuildpackName field value if set, zero value otherwise.
func (o *Buildpack) GetBuildpackName() string {
	if o == nil || IsNil(o.BuildpackName) {
		var ret string
		return ret
	}
	return *o.BuildpackName
}

// GetBuildpackNameOk returns a tuple with the BuildpackName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Buildpack) GetBuildpackNameOk() (*string, bool) {
	if o == nil || IsNil(o.BuildpackName) {
		return nil, false
	}
	return o.BuildpackName, true
}

// HasBuildpackName returns a boolean if a field has been set.
func (o *Buildpack) HasBuildpackName() bool {
	if o != nil && !IsNil(o.BuildpackName) {
		return true
	}

	return false
}

// SetBuildpackName gets a reference to the given string and assigns it to the BuildpackName field.
func (o *Buildpack) SetBuildpackName(v string) {
	o.BuildpackName = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Buildpack) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Buildpack) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Buildpack) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDetectOutput returns the DetectOutput field value if set, zero value otherwise.
func (o *Buildpack) GetDetectOutput() string {
	if o == nil || IsNil(o.DetectOutput) {
		var ret string
		return ret
	}
	return *o.DetectOutput
}

// GetDetectOutputOk returns a tuple with the DetectOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Buildpack) GetDetectOutputOk() (*string, bool) {
	if o == nil || IsNil(o.DetectOutput) {
		return nil, false
	}
	return o.DetectOutput, true
}

// HasDetectOutput returns a boolean if a field has been set.
func (o *Buildpack) HasDetectOutput() bool {
	if o != nil && !IsNil(o.DetectOutput) {
		return true
	}

	return false
}

// SetDetectOutput gets a reference to the given string and assigns it to the DetectOutput field.
func (o *Buildpack) SetDetectOutput(v string) {
	o.DetectOutput = &v
}

// GetEnabled returns the Enabled field value
func (o *Buildpack) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Buildpack) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Buildpack) SetEnabled(v bool) {
	o.Enabled = v
}

// GetFilename returns the Filename field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Buildpack) GetFilename() string {
	if o == nil || o.Filename.Get() == nil {
		var ret string
		return ret
	}

	return *o.Filename.Get()
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Buildpack) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filename.Get(), o.Filename.IsSet()
}

// SetFilename sets field value
func (o *Buildpack) SetFilename(v string) {
	o.Filename.Set(&v)
}

// GetGuid returns the Guid field value
func (o *Buildpack) GetGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Guid
}

// GetGuidOk returns a tuple with the Guid field value
// and a boolean to check if the value has been set.
func (o *Buildpack) GetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Guid, true
}

// SetGuid sets field value
func (o *Buildpack) SetGuid(v string) {
	o.Guid = v
}

// GetLifecycle returns the Lifecycle field value if set, zero value otherwise.
func (o *Buildpack) GetLifecycle() BuildpackLifecycle {
	if o == nil || IsNil(o.Lifecycle) {
		var ret BuildpackLifecycle
		return ret
	}
	return *o.Lifecycle
}

// GetLifecycleOk returns a tuple with the Lifecycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Buildpack) GetLifecycleOk() (*BuildpackLifecycle, bool) {
	if o == nil || IsNil(o.Lifecycle) {
		return nil, false
	}
	return o.Lifecycle, true
}

// HasLifecycle returns a boolean if a field has been set.
func (o *Buildpack) HasLifecycle() bool {
	if o != nil && !IsNil(o.Lifecycle) {
		return true
	}

	return false
}

// SetLifecycle gets a reference to the given BuildpackLifecycle and assigns it to the Lifecycle field.
func (o *Buildpack) SetLifecycle(v BuildpackLifecycle) {
	o.Lifecycle = &v
}

// GetLinks returns the Links field value
func (o *Buildpack) GetLinks() BuildpackLinks {
	if o == nil {
		var ret BuildpackLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *Buildpack) GetLinksOk() (*BuildpackLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *Buildpack) SetLinks(v BuildpackLinks) {
	o.Links = v
}

// GetLocked returns the Locked field value
func (o *Buildpack) GetLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Locked
}

// GetLockedOk returns a tuple with the Locked field value
// and a boolean to check if the value has been set.
func (o *Buildpack) GetLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locked, true
}

// SetLocked sets field value
func (o *Buildpack) SetLocked(v bool) {
	o.Locked = v
}

// GetMetadata returns the Metadata field value
func (o *Buildpack) GetMetadata() V3AppsGuidTasksPostRequestMetadata {
	if o == nil {
		var ret V3AppsGuidTasksPostRequestMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Buildpack) GetMetadataOk() (*V3AppsGuidTasksPostRequestMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Buildpack) SetMetadata(v V3AppsGuidTasksPostRequestMetadata) {
	o.Metadata = v
}

// GetName returns the Name field value
func (o *Buildpack) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Buildpack) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Buildpack) SetName(v string) {
	o.Name = v
}

// GetPosition returns the Position field value
func (o *Buildpack) GetPosition() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *Buildpack) GetPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *Buildpack) SetPosition(v int32) {
	o.Position = v
}

// GetStack returns the Stack field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Buildpack) GetStack() string {
	if o == nil || o.Stack.Get() == nil {
		var ret string
		return ret
	}

	return *o.Stack.Get()
}

// GetStackOk returns a tuple with the Stack field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Buildpack) GetStackOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stack.Get(), o.Stack.IsSet()
}

// SetStack sets field value
func (o *Buildpack) SetStack(v string) {
	o.Stack.Set(&v)
}

// GetState returns the State field value
func (o *Buildpack) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Buildpack) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Buildpack) SetState(v string) {
	o.State = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Buildpack) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Buildpack) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Buildpack) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Buildpack) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Buildpack) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Buildpack) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Buildpack) SetVersion(v string) {
	o.Version = &v
}

func (o Buildpack) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Buildpack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildpackName) {
		toSerialize["buildpack_name"] = o.BuildpackName
	}
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.DetectOutput) {
		toSerialize["detect_output"] = o.DetectOutput
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["filename"] = o.Filename.Get()
	toSerialize["guid"] = o.Guid
	if !IsNil(o.Lifecycle) {
		toSerialize["lifecycle"] = o.Lifecycle
	}
	toSerialize["links"] = o.Links
	toSerialize["locked"] = o.Locked
	toSerialize["metadata"] = o.Metadata
	toSerialize["name"] = o.Name
	toSerialize["position"] = o.Position
	toSerialize["stack"] = o.Stack.Get()
	toSerialize["state"] = o.State
	toSerialize["updated_at"] = o.UpdatedAt
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *Buildpack) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"enabled",
		"filename",
		"guid",
		"links",
		"locked",
		"metadata",
		"name",
		"position",
		"stack",
		"state",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuildpack := _Buildpack{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuildpack)

	if err != nil {
		return err
	}

	*o = Buildpack(varBuildpack)

	return err
}

type NullableBuildpack struct {
	value *Buildpack
	isSet bool
}

func (v NullableBuildpack) Get() *Buildpack {
	return v.value
}

func (v *NullableBuildpack) Set(val *Buildpack) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildpack) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildpack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildpack(val *Buildpack) *NullableBuildpack {
	return &NullableBuildpack{value: val, isSet: true}
}

func (v NullableBuildpack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildpack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


