/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SpacesAPI interface {

	/*
	V3SpacesGuidManifestDiffPost Generate manifest diff for a space

	Compare a provided manifest with the current state of applications in the space.

This endpoint returns a diff showing what would change if the manifest were applied,
without actually making any changes. This is useful for preview and validation.

This feature is experimental and subject to change.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space GUID
	@return ApiV3SpacesGuidManifestDiffPostRequest
	*/
	V3SpacesGuidManifestDiffPost(ctx context.Context, guid string) ApiV3SpacesGuidManifestDiffPostRequest

	// V3SpacesGuidManifestDiffPostExecute executes the request
	//  @return ManifestDiff
	V3SpacesGuidManifestDiffPostExecute(r ApiV3SpacesGuidManifestDiffPostRequest) (*ManifestDiff, *http.Response, error)

	/*
	V3SpacesGuidManifestPost Apply manifest to a space

	Apply a manifest to create or update multiple applications in a space.

This endpoint processes a YAML manifest and creates or updates applications
according to the manifest specification. This is an asynchronous operation
that returns a job to track progress.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space GUID
	@return ApiV3SpacesGuidManifestPostRequest
	*/
	V3SpacesGuidManifestPost(ctx context.Context, guid string) ApiV3SpacesGuidManifestPostRequest

	// V3SpacesGuidManifestPostExecute executes the request
	//  @return V3AppsGuidActionsApplyManifestPost202Response
	V3SpacesGuidManifestPostExecute(r ApiV3SpacesGuidManifestPostRequest) (*V3AppsGuidActionsApplyManifestPost202Response, *http.Response, error)

	/*
	V3SpacesGuidRunningSecurityGroupsGet List running security groups for a space

	Returns security groups enabled for running apps in the space.

This includes both globally-enabled and space-specific running security groups.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space GUID
	@return ApiV3SpacesGuidRunningSecurityGroupsGetRequest
	*/
	V3SpacesGuidRunningSecurityGroupsGet(ctx context.Context, guid string) ApiV3SpacesGuidRunningSecurityGroupsGetRequest

	// V3SpacesGuidRunningSecurityGroupsGetExecute executes the request
	//  @return V3SecurityGroupsGet200Response
	V3SpacesGuidRunningSecurityGroupsGetExecute(r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) (*V3SecurityGroupsGet200Response, *http.Response, error)

	/*
	V3SpacesGuidStagingSecurityGroupsGet List staging security groups for a space

	Returns security groups enabled for staging apps in the space.

This includes both globally-enabled and space-specific staging security groups.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space GUID
	@return ApiV3SpacesGuidStagingSecurityGroupsGetRequest
	*/
	V3SpacesGuidStagingSecurityGroupsGet(ctx context.Context, guid string) ApiV3SpacesGuidStagingSecurityGroupsGetRequest

	// V3SpacesGuidStagingSecurityGroupsGetExecute executes the request
	//  @return V3SecurityGroupsGet200Response
	V3SpacesGuidStagingSecurityGroupsGetExecute(r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) (*V3SecurityGroupsGet200Response, *http.Response, error)
}

// SpacesAPIService SpacesAPI service
type SpacesAPIService service

type ApiV3SpacesGuidManifestDiffPostRequest struct {
	ctx context.Context
	ApiService SpacesAPI
	guid string
	body *string
}

func (r ApiV3SpacesGuidManifestDiffPostRequest) Body(body string) ApiV3SpacesGuidManifestDiffPostRequest {
	r.body = &body
	return r
}

func (r ApiV3SpacesGuidManifestDiffPostRequest) Execute() (*ManifestDiff, *http.Response, error) {
	return r.ApiService.V3SpacesGuidManifestDiffPostExecute(r)
}

/*
V3SpacesGuidManifestDiffPost Generate manifest diff for a space

Compare a provided manifest with the current state of applications in the space.

This endpoint returns a diff showing what would change if the manifest were applied,
without actually making any changes. This is useful for preview and validation.

This feature is experimental and subject to change.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space GUID
 @return ApiV3SpacesGuidManifestDiffPostRequest
*/
func (a *SpacesAPIService) V3SpacesGuidManifestDiffPost(ctx context.Context, guid string) ApiV3SpacesGuidManifestDiffPostRequest {
	return ApiV3SpacesGuidManifestDiffPostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return ManifestDiff
func (a *SpacesAPIService) V3SpacesGuidManifestDiffPostExecute(r ApiV3SpacesGuidManifestDiffPostRequest) (*ManifestDiff, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManifestDiff
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpacesAPIService.V3SpacesGuidManifestDiffPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/spaces/{guid}/manifest_diff"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpacesGuidManifestPostRequest struct {
	ctx context.Context
	ApiService SpacesAPI
	guid string
	body *string
}

func (r ApiV3SpacesGuidManifestPostRequest) Body(body string) ApiV3SpacesGuidManifestPostRequest {
	r.body = &body
	return r
}

func (r ApiV3SpacesGuidManifestPostRequest) Execute() (*V3AppsGuidActionsApplyManifestPost202Response, *http.Response, error) {
	return r.ApiService.V3SpacesGuidManifestPostExecute(r)
}

/*
V3SpacesGuidManifestPost Apply manifest to a space

Apply a manifest to create or update multiple applications in a space.

This endpoint processes a YAML manifest and creates or updates applications
according to the manifest specification. This is an asynchronous operation
that returns a job to track progress.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space GUID
 @return ApiV3SpacesGuidManifestPostRequest
*/
func (a *SpacesAPIService) V3SpacesGuidManifestPost(ctx context.Context, guid string) ApiV3SpacesGuidManifestPostRequest {
	return ApiV3SpacesGuidManifestPostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3AppsGuidActionsApplyManifestPost202Response
func (a *SpacesAPIService) V3SpacesGuidManifestPostExecute(r ApiV3SpacesGuidManifestPostRequest) (*V3AppsGuidActionsApplyManifestPost202Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3AppsGuidActionsApplyManifestPost202Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpacesAPIService.V3SpacesGuidManifestPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/spaces/{guid}/manifest"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpacesGuidRunningSecurityGroupsGetRequest struct {
	ctx context.Context
	ApiService SpacesAPI
	guid string
	guids *string
	names *string
	page *int32
	perPage *int32
	orderBy *string
}

// Comma-delimited list of security group guids to filter by
func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) Guids(guids string) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	r.guids = &guids
	return r
}

// Comma-delimited list of security group names to filter by
func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) Names(names string) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	r.names = &names
	return r
}

// Page to display
func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) Page(page int32) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) PerPage(perPage int32) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	r.perPage = &perPage
	return r
}

// Value to sort by
func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) OrderBy(orderBy string) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) Execute() (*V3SecurityGroupsGet200Response, *http.Response, error) {
	return r.ApiService.V3SpacesGuidRunningSecurityGroupsGetExecute(r)
}

/*
V3SpacesGuidRunningSecurityGroupsGet List running security groups for a space

Returns security groups enabled for running apps in the space.

This includes both globally-enabled and space-specific running security groups.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space GUID
 @return ApiV3SpacesGuidRunningSecurityGroupsGetRequest
*/
func (a *SpacesAPIService) V3SpacesGuidRunningSecurityGroupsGet(ctx context.Context, guid string) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	return ApiV3SpacesGuidRunningSecurityGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3SecurityGroupsGet200Response
func (a *SpacesAPIService) V3SpacesGuidRunningSecurityGroupsGetExecute(r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) (*V3SecurityGroupsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3SecurityGroupsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpacesAPIService.V3SpacesGuidRunningSecurityGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/spaces/{guid}/running_security_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.guids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guids", r.guids, "form", "")
	}
	if r.names != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "names", r.names, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	} else {
		var defaultValue int32 = 50
		r.perPage = &defaultValue
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.orderBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpacesGuidStagingSecurityGroupsGetRequest struct {
	ctx context.Context
	ApiService SpacesAPI
	guid string
	guids *string
	names *string
	page *int32
	perPage *int32
	orderBy *string
}

// Comma-delimited list of security group guids to filter by
func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) Guids(guids string) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	r.guids = &guids
	return r
}

// Comma-delimited list of security group names to filter by
func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) Names(names string) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	r.names = &names
	return r
}

// Page to display
func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) Page(page int32) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) PerPage(perPage int32) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	r.perPage = &perPage
	return r
}

// Value to sort by
func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) OrderBy(orderBy string) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) Execute() (*V3SecurityGroupsGet200Response, *http.Response, error) {
	return r.ApiService.V3SpacesGuidStagingSecurityGroupsGetExecute(r)
}

/*
V3SpacesGuidStagingSecurityGroupsGet List staging security groups for a space

Returns security groups enabled for staging apps in the space.

This includes both globally-enabled and space-specific staging security groups.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space GUID
 @return ApiV3SpacesGuidStagingSecurityGroupsGetRequest
*/
func (a *SpacesAPIService) V3SpacesGuidStagingSecurityGroupsGet(ctx context.Context, guid string) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	return ApiV3SpacesGuidStagingSecurityGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3SecurityGroupsGet200Response
func (a *SpacesAPIService) V3SpacesGuidStagingSecurityGroupsGetExecute(r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) (*V3SecurityGroupsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3SecurityGroupsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpacesAPIService.V3SpacesGuidStagingSecurityGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/spaces/{guid}/staging_security_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.guids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guids", r.guids, "form", "")
	}
	if r.names != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "names", r.names, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	} else {
		var defaultValue int32 = 50
		r.perPage = &defaultValue
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.orderBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
