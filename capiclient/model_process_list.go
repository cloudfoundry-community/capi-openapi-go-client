/*
Cloud Controller API

API specification for managing environment variable groups in Cloud Controller.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
)

// checks if the ProcessList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessList{}

// ProcessList struct for ProcessList
type ProcessList struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	Resources []Process `json:"resources,omitempty"`
}

// NewProcessList instantiates a new ProcessList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessList() *ProcessList {
	this := ProcessList{}
	return &this
}

// NewProcessListWithDefaults instantiates a new ProcessList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessListWithDefaults() *ProcessList {
	this := ProcessList{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ProcessList) GetPagination() Pagination {
	if o == nil || IsNil(o.Pagination) {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessList) GetPaginationOk() (*Pagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ProcessList) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *ProcessList) SetPagination(v Pagination) {
	o.Pagination = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *ProcessList) GetResources() []Process {
	if o == nil || IsNil(o.Resources) {
		var ret []Process
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessList) GetResourcesOk() ([]Process, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ProcessList) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []Process and assigns it to the Resources field.
func (o *ProcessList) SetResources(v []Process) {
	o.Resources = v
}

func (o ProcessList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	return toSerialize, nil
}

type NullableProcessList struct {
	value *ProcessList
	isSet bool
}

func (v NullableProcessList) Get() *ProcessList {
	return v.value
}

func (v *NullableProcessList) Set(val *ProcessList) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessList) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessList(val *ProcessList) *NullableProcessList {
	return &NullableProcessList{value: val, isSet: true}
}

func (v NullableProcessList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


