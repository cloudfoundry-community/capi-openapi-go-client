/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type OrganizationQuotasAPI interface {

	/*
	ApplyOrganizationQuotaToOrganizations Apply an organization quota to organizations

	Apply an organization quota to one or more organizations.

This sets resource limits for the specified organizations.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The organization quota GUID
	@return ApiApplyOrganizationQuotaToOrganizationsRequest
	*/
	ApplyOrganizationQuotaToOrganizations(ctx context.Context, guid string) ApiApplyOrganizationQuotaToOrganizationsRequest

	// ApplyOrganizationQuotaToOrganizationsExecute executes the request
	//  @return ApplyOrganizationQuotaToOrganizations201Response
	ApplyOrganizationQuotaToOrganizationsExecute(r ApiApplyOrganizationQuotaToOrganizationsRequest) (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error)

	/*
	CreateOrganizationQuota Create an organization quota

	Create a new organization quota to define resource limits.

Organization quotas are used to limit the resources that can be consumed by all
spaces and applications within an organization. They provide control over memory,
services, routes, domains, and other resources at the organization level.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateOrganizationQuotaRequest
	*/
	CreateOrganizationQuota(ctx context.Context) ApiCreateOrganizationQuotaRequest

	// CreateOrganizationQuotaExecute executes the request
	//  @return OrganizationQuota
	CreateOrganizationQuotaExecute(r ApiCreateOrganizationQuotaRequest) (*OrganizationQuota, *http.Response, error)

	/*
	DeleteOrganizationQuota Delete an organization quota

	Delete an organization quota.

The organization quota cannot be deleted if it is currently applied to any organizations.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The organization quota GUID
	@return ApiDeleteOrganizationQuotaRequest
	*/
	DeleteOrganizationQuota(ctx context.Context, guid string) ApiDeleteOrganizationQuotaRequest

	// DeleteOrganizationQuotaExecute executes the request
	//  @return DeleteOrganizationQuota202Response
	DeleteOrganizationQuotaExecute(r ApiDeleteOrganizationQuotaRequest) (*DeleteOrganizationQuota202Response, *http.Response, error)

	/*
	GetOrganizationQuota Get an organization quota

	Retrieve detailed information about a specific organization quota.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The organization quota GUID
	@return ApiGetOrganizationQuotaRequest
	*/
	GetOrganizationQuota(ctx context.Context, guid string) ApiGetOrganizationQuotaRequest

	// GetOrganizationQuotaExecute executes the request
	//  @return OrganizationQuota
	GetOrganizationQuotaExecute(r ApiGetOrganizationQuotaRequest) (*OrganizationQuota, *http.Response, error)

	/*
	ListOrganizationQuotas List organization quotas

	List all organization quota resources.

Organization quotas define resource limits that can be applied to organizations.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListOrganizationQuotasRequest
	*/
	ListOrganizationQuotas(ctx context.Context) ApiListOrganizationQuotasRequest

	// ListOrganizationQuotasExecute executes the request
	//  @return ListOrganizationQuotas200Response
	ListOrganizationQuotasExecute(r ApiListOrganizationQuotasRequest) (*ListOrganizationQuotas200Response, *http.Response, error)

	/*
	UpdateOrganizationQuota Update an organization quota

	Update the specified attributes of an organization quota.

Only the fields provided in the request body will be updated.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The organization quota GUID
	@return ApiUpdateOrganizationQuotaRequest
	*/
	UpdateOrganizationQuota(ctx context.Context, guid string) ApiUpdateOrganizationQuotaRequest

	// UpdateOrganizationQuotaExecute executes the request
	//  @return OrganizationQuota
	UpdateOrganizationQuotaExecute(r ApiUpdateOrganizationQuotaRequest) (*OrganizationQuota, *http.Response, error)
}

// OrganizationQuotasAPIService OrganizationQuotasAPI service
type OrganizationQuotasAPIService service

type ApiApplyOrganizationQuotaToOrganizationsRequest struct {
	ctx context.Context
	ApiService OrganizationQuotasAPI
	guid string
	applyOrganizationQuotaToOrganizationsRequest *ApplyOrganizationQuotaToOrganizationsRequest
}

func (r ApiApplyOrganizationQuotaToOrganizationsRequest) ApplyOrganizationQuotaToOrganizationsRequest(applyOrganizationQuotaToOrganizationsRequest ApplyOrganizationQuotaToOrganizationsRequest) ApiApplyOrganizationQuotaToOrganizationsRequest {
	r.applyOrganizationQuotaToOrganizationsRequest = &applyOrganizationQuotaToOrganizationsRequest
	return r
}

func (r ApiApplyOrganizationQuotaToOrganizationsRequest) Execute() (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error) {
	return r.ApiService.ApplyOrganizationQuotaToOrganizationsExecute(r)
}

/*
ApplyOrganizationQuotaToOrganizations Apply an organization quota to organizations

Apply an organization quota to one or more organizations.

This sets resource limits for the specified organizations.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The organization quota GUID
 @return ApiApplyOrganizationQuotaToOrganizationsRequest
*/
func (a *OrganizationQuotasAPIService) ApplyOrganizationQuotaToOrganizations(ctx context.Context, guid string) ApiApplyOrganizationQuotaToOrganizationsRequest {
	return ApiApplyOrganizationQuotaToOrganizationsRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return ApplyOrganizationQuotaToOrganizations201Response
func (a *OrganizationQuotasAPIService) ApplyOrganizationQuotaToOrganizationsExecute(r ApiApplyOrganizationQuotaToOrganizationsRequest) (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplyOrganizationQuotaToOrganizations201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationQuotasAPIService.ApplyOrganizationQuotaToOrganizations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/organization_quotas/{guid}/relationships/organizations"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.applyOrganizationQuotaToOrganizationsRequest == nil {
		return localVarReturnValue, nil, reportError("applyOrganizationQuotaToOrganizationsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.applyOrganizationQuotaToOrganizationsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateOrganizationQuotaRequest struct {
	ctx context.Context
	ApiService OrganizationQuotasAPI
	organizationQuotaCreate *OrganizationQuotaCreate
}

func (r ApiCreateOrganizationQuotaRequest) OrganizationQuotaCreate(organizationQuotaCreate OrganizationQuotaCreate) ApiCreateOrganizationQuotaRequest {
	r.organizationQuotaCreate = &organizationQuotaCreate
	return r
}

func (r ApiCreateOrganizationQuotaRequest) Execute() (*OrganizationQuota, *http.Response, error) {
	return r.ApiService.CreateOrganizationQuotaExecute(r)
}

/*
CreateOrganizationQuota Create an organization quota

Create a new organization quota to define resource limits.

Organization quotas are used to limit the resources that can be consumed by all
spaces and applications within an organization. They provide control over memory,
services, routes, domains, and other resources at the organization level.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateOrganizationQuotaRequest
*/
func (a *OrganizationQuotasAPIService) CreateOrganizationQuota(ctx context.Context) ApiCreateOrganizationQuotaRequest {
	return ApiCreateOrganizationQuotaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OrganizationQuota
func (a *OrganizationQuotasAPIService) CreateOrganizationQuotaExecute(r ApiCreateOrganizationQuotaRequest) (*OrganizationQuota, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationQuota
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationQuotasAPIService.CreateOrganizationQuota")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/organization_quotas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.organizationQuotaCreate == nil {
		return localVarReturnValue, nil, reportError("organizationQuotaCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.organizationQuotaCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteOrganizationQuotaRequest struct {
	ctx context.Context
	ApiService OrganizationQuotasAPI
	guid string
}

func (r ApiDeleteOrganizationQuotaRequest) Execute() (*DeleteOrganizationQuota202Response, *http.Response, error) {
	return r.ApiService.DeleteOrganizationQuotaExecute(r)
}

/*
DeleteOrganizationQuota Delete an organization quota

Delete an organization quota.

The organization quota cannot be deleted if it is currently applied to any organizations.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The organization quota GUID
 @return ApiDeleteOrganizationQuotaRequest
*/
func (a *OrganizationQuotasAPIService) DeleteOrganizationQuota(ctx context.Context, guid string) ApiDeleteOrganizationQuotaRequest {
	return ApiDeleteOrganizationQuotaRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return DeleteOrganizationQuota202Response
func (a *OrganizationQuotasAPIService) DeleteOrganizationQuotaExecute(r ApiDeleteOrganizationQuotaRequest) (*DeleteOrganizationQuota202Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteOrganizationQuota202Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationQuotasAPIService.DeleteOrganizationQuota")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/organization_quotas/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOrganizationQuotaRequest struct {
	ctx context.Context
	ApiService OrganizationQuotasAPI
	guid string
	include *string
}

// Optionally include related resources in the response
func (r ApiGetOrganizationQuotaRequest) Include(include string) ApiGetOrganizationQuotaRequest {
	r.include = &include
	return r
}

func (r ApiGetOrganizationQuotaRequest) Execute() (*OrganizationQuota, *http.Response, error) {
	return r.ApiService.GetOrganizationQuotaExecute(r)
}

/*
GetOrganizationQuota Get an organization quota

Retrieve detailed information about a specific organization quota.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The organization quota GUID
 @return ApiGetOrganizationQuotaRequest
*/
func (a *OrganizationQuotasAPIService) GetOrganizationQuota(ctx context.Context, guid string) ApiGetOrganizationQuotaRequest {
	return ApiGetOrganizationQuotaRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return OrganizationQuota
func (a *OrganizationQuotasAPIService) GetOrganizationQuotaExecute(r ApiGetOrganizationQuotaRequest) (*OrganizationQuota, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationQuota
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationQuotasAPIService.GetOrganizationQuota")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/organization_quotas/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOrganizationQuotasRequest struct {
	ctx context.Context
	ApiService OrganizationQuotasAPI
	guids *string
	names *string
	organizationGuids *string
	labelSelector *string
	page *int32
	perPage *int32
	orderBy *string
	createdAts *string
	updatedAts *string
	include *string
}

// Comma-delimited list of organization quota guids to filter by
func (r ApiListOrganizationQuotasRequest) Guids(guids string) ApiListOrganizationQuotasRequest {
	r.guids = &guids
	return r
}

// Comma-delimited list of organization quota names to filter by
func (r ApiListOrganizationQuotasRequest) Names(names string) ApiListOrganizationQuotasRequest {
	r.names = &names
	return r
}

// Comma-delimited list of organization guids to filter by
func (r ApiListOrganizationQuotasRequest) OrganizationGuids(organizationGuids string) ApiListOrganizationQuotasRequest {
	r.organizationGuids = &organizationGuids
	return r
}

// Filter by label selector
func (r ApiListOrganizationQuotasRequest) LabelSelector(labelSelector string) ApiListOrganizationQuotasRequest {
	r.labelSelector = &labelSelector
	return r
}

// Page to display
func (r ApiListOrganizationQuotasRequest) Page(page int32) ApiListOrganizationQuotasRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiListOrganizationQuotasRequest) PerPage(perPage int32) ApiListOrganizationQuotasRequest {
	r.perPage = &perPage
	return r
}

// Value to sort by
func (r ApiListOrganizationQuotasRequest) OrderBy(orderBy string) ApiListOrganizationQuotasRequest {
	r.orderBy = &orderBy
	return r
}

// Filter by creation time
func (r ApiListOrganizationQuotasRequest) CreatedAts(createdAts string) ApiListOrganizationQuotasRequest {
	r.createdAts = &createdAts
	return r
}

// Filter by update time
func (r ApiListOrganizationQuotasRequest) UpdatedAts(updatedAts string) ApiListOrganizationQuotasRequest {
	r.updatedAts = &updatedAts
	return r
}

// Optionally include related resources in the response
func (r ApiListOrganizationQuotasRequest) Include(include string) ApiListOrganizationQuotasRequest {
	r.include = &include
	return r
}

func (r ApiListOrganizationQuotasRequest) Execute() (*ListOrganizationQuotas200Response, *http.Response, error) {
	return r.ApiService.ListOrganizationQuotasExecute(r)
}

/*
ListOrganizationQuotas List organization quotas

List all organization quota resources.

Organization quotas define resource limits that can be applied to organizations.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOrganizationQuotasRequest
*/
func (a *OrganizationQuotasAPIService) ListOrganizationQuotas(ctx context.Context) ApiListOrganizationQuotasRequest {
	return ApiListOrganizationQuotasRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOrganizationQuotas200Response
func (a *OrganizationQuotasAPIService) ListOrganizationQuotasExecute(r ApiListOrganizationQuotasRequest) (*ListOrganizationQuotas200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOrganizationQuotas200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationQuotasAPIService.ListOrganizationQuotas")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/organization_quotas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.guids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guids", r.guids, "form", "")
	}
	if r.names != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "names", r.names, "form", "")
	}
	if r.organizationGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organization_guids", r.organizationGuids, "form", "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label_selector", r.labelSelector, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	} else {
		var defaultValue int32 = 50
		r.perPage = &defaultValue
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.orderBy = &defaultValue
	}
	if r.createdAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_ats", r.createdAts, "form", "")
	}
	if r.updatedAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_ats", r.updatedAts, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOrganizationQuotaRequest struct {
	ctx context.Context
	ApiService OrganizationQuotasAPI
	guid string
	organizationQuotaUpdate *OrganizationQuotaUpdate
}

func (r ApiUpdateOrganizationQuotaRequest) OrganizationQuotaUpdate(organizationQuotaUpdate OrganizationQuotaUpdate) ApiUpdateOrganizationQuotaRequest {
	r.organizationQuotaUpdate = &organizationQuotaUpdate
	return r
}

func (r ApiUpdateOrganizationQuotaRequest) Execute() (*OrganizationQuota, *http.Response, error) {
	return r.ApiService.UpdateOrganizationQuotaExecute(r)
}

/*
UpdateOrganizationQuota Update an organization quota

Update the specified attributes of an organization quota.

Only the fields provided in the request body will be updated.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The organization quota GUID
 @return ApiUpdateOrganizationQuotaRequest
*/
func (a *OrganizationQuotasAPIService) UpdateOrganizationQuota(ctx context.Context, guid string) ApiUpdateOrganizationQuotaRequest {
	return ApiUpdateOrganizationQuotaRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return OrganizationQuota
func (a *OrganizationQuotasAPIService) UpdateOrganizationQuotaExecute(r ApiUpdateOrganizationQuotaRequest) (*OrganizationQuota, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationQuota
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationQuotasAPIService.UpdateOrganizationQuota")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/organization_quotas/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.organizationQuotaUpdate == nil {
		return localVarReturnValue, nil, reportError("organizationQuotaUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.organizationQuotaUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
