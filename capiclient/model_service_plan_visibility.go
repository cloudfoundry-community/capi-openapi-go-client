/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServicePlanVisibility type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicePlanVisibility{}

// ServicePlanVisibility struct for ServicePlanVisibility
type ServicePlanVisibility struct {
	Metadata *ServicePlanVisibilityMetadata `json:"metadata,omitempty"`
	// List of organizations where the plan is visible (only for organization type)
	Organizations []OrganizationVisibility `json:"organizations,omitempty"`
	Space *ServicePlanVisibilitySpace `json:"space,omitempty"`
	// Denotes the visibility of the plan
	Type string `json:"type"`
}

type _ServicePlanVisibility ServicePlanVisibility

// NewServicePlanVisibility instantiates a new ServicePlanVisibility object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicePlanVisibility(type_ string) *ServicePlanVisibility {
	this := ServicePlanVisibility{}
	this.Type = type_
	return &this
}

// NewServicePlanVisibilityWithDefaults instantiates a new ServicePlanVisibility object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicePlanVisibilityWithDefaults() *ServicePlanVisibility {
	this := ServicePlanVisibility{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ServicePlanVisibility) GetMetadata() ServicePlanVisibilityMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ServicePlanVisibilityMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePlanVisibility) GetMetadataOk() (*ServicePlanVisibilityMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ServicePlanVisibility) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ServicePlanVisibilityMetadata and assigns it to the Metadata field.
func (o *ServicePlanVisibility) SetMetadata(v ServicePlanVisibilityMetadata) {
	o.Metadata = &v
}

// GetOrganizations returns the Organizations field value if set, zero value otherwise.
func (o *ServicePlanVisibility) GetOrganizations() []OrganizationVisibility {
	if o == nil || IsNil(o.Organizations) {
		var ret []OrganizationVisibility
		return ret
	}
	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePlanVisibility) GetOrganizationsOk() ([]OrganizationVisibility, bool) {
	if o == nil || IsNil(o.Organizations) {
		return nil, false
	}
	return o.Organizations, true
}

// HasOrganizations returns a boolean if a field has been set.
func (o *ServicePlanVisibility) HasOrganizations() bool {
	if o != nil && !IsNil(o.Organizations) {
		return true
	}

	return false
}

// SetOrganizations gets a reference to the given []OrganizationVisibility and assigns it to the Organizations field.
func (o *ServicePlanVisibility) SetOrganizations(v []OrganizationVisibility) {
	o.Organizations = v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *ServicePlanVisibility) GetSpace() ServicePlanVisibilitySpace {
	if o == nil || IsNil(o.Space) {
		var ret ServicePlanVisibilitySpace
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePlanVisibility) GetSpaceOk() (*ServicePlanVisibilitySpace, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *ServicePlanVisibility) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given ServicePlanVisibilitySpace and assigns it to the Space field.
func (o *ServicePlanVisibility) SetSpace(v ServicePlanVisibilitySpace) {
	o.Space = &v
}

// GetType returns the Type field value
func (o *ServicePlanVisibility) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ServicePlanVisibility) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ServicePlanVisibility) SetType(v string) {
	o.Type = v
}

func (o ServicePlanVisibility) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicePlanVisibility) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Organizations) {
		toSerialize["organizations"] = o.Organizations
	}
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ServicePlanVisibility) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicePlanVisibility := _ServicePlanVisibility{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServicePlanVisibility)

	if err != nil {
		return err
	}

	*o = ServicePlanVisibility(varServicePlanVisibility)

	return err
}

type NullableServicePlanVisibility struct {
	value *ServicePlanVisibility
	isSet bool
}

func (v NullableServicePlanVisibility) Get() *ServicePlanVisibility {
	return v.value
}

func (v *NullableServicePlanVisibility) Set(val *ServicePlanVisibility) {
	v.value = val
	v.isSet = true
}

func (v NullableServicePlanVisibility) IsSet() bool {
	return v.isSet
}

func (v *NullableServicePlanVisibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicePlanVisibility(val *ServicePlanVisibility) *NullableServicePlanVisibility {
	return &NullableServicePlanVisibility{value: val, isSet: true}
}

func (v NullableServicePlanVisibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicePlanVisibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


