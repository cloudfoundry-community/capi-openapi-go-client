/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ManifestDiff type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManifestDiff{}

// ManifestDiff struct for ManifestDiff
type ManifestDiff struct {
	// List of differences between manifest and current state
	Diff []ManifestDiffDiffInner `json:"diff"`
}

type _ManifestDiff ManifestDiff

// NewManifestDiff instantiates a new ManifestDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManifestDiff(diff []ManifestDiffDiffInner) *ManifestDiff {
	this := ManifestDiff{}
	this.Diff = diff
	return &this
}

// NewManifestDiffWithDefaults instantiates a new ManifestDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManifestDiffWithDefaults() *ManifestDiff {
	this := ManifestDiff{}
	return &this
}

// GetDiff returns the Diff field value
func (o *ManifestDiff) GetDiff() []ManifestDiffDiffInner {
	if o == nil {
		var ret []ManifestDiffDiffInner
		return ret
	}

	return o.Diff
}

// GetDiffOk returns a tuple with the Diff field value
// and a boolean to check if the value has been set.
func (o *ManifestDiff) GetDiffOk() ([]ManifestDiffDiffInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Diff, true
}

// SetDiff sets field value
func (o *ManifestDiff) SetDiff(v []ManifestDiffDiffInner) {
	o.Diff = v
}

func (o ManifestDiff) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManifestDiff) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["diff"] = o.Diff
	return toSerialize, nil
}

func (o *ManifestDiff) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"diff",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManifestDiff := _ManifestDiff{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManifestDiff)

	if err != nil {
		return err
	}

	*o = ManifestDiff(varManifestDiff)

	return err
}

type NullableManifestDiff struct {
	value *ManifestDiff
	isSet bool
}

func (v NullableManifestDiff) Get() *ManifestDiff {
	return v.value
}

func (v *NullableManifestDiff) Set(val *ManifestDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableManifestDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableManifestDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManifestDiff(val *ManifestDiff) *NullableManifestDiff {
	return &NullableManifestDiff{value: val, isSet: true}
}

func (v NullableManifestDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManifestDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


