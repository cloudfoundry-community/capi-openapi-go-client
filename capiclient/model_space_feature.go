/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SpaceFeature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpaceFeature{}

// SpaceFeature struct for SpaceFeature
type SpaceFeature struct {
	// Human-readable description of the feature
	Description string `json:"description"`
	// Whether the feature is enabled for this space
	Enabled bool `json:"enabled"`
	Metadata *SpaceFeatureMetadata `json:"metadata,omitempty"`
	// The feature identifier
	Name string `json:"name"`
}

type _SpaceFeature SpaceFeature

// NewSpaceFeature instantiates a new SpaceFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpaceFeature(description string, enabled bool, name string) *SpaceFeature {
	this := SpaceFeature{}
	this.Description = description
	this.Enabled = enabled
	this.Name = name
	return &this
}

// NewSpaceFeatureWithDefaults instantiates a new SpaceFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpaceFeatureWithDefaults() *SpaceFeature {
	this := SpaceFeature{}
	return &this
}

// GetDescription returns the Description field value
func (o *SpaceFeature) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SpaceFeature) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SpaceFeature) SetDescription(v string) {
	o.Description = v
}

// GetEnabled returns the Enabled field value
func (o *SpaceFeature) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SpaceFeature) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SpaceFeature) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SpaceFeature) GetMetadata() SpaceFeatureMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret SpaceFeatureMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpaceFeature) GetMetadataOk() (*SpaceFeatureMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SpaceFeature) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given SpaceFeatureMetadata and assigns it to the Metadata field.
func (o *SpaceFeature) SetMetadata(v SpaceFeatureMetadata) {
	o.Metadata = &v
}

// GetName returns the Name field value
func (o *SpaceFeature) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpaceFeature) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpaceFeature) SetName(v string) {
	o.Name = v
}

func (o SpaceFeature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpaceFeature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *SpaceFeature) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"enabled",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpaceFeature := _SpaceFeature{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSpaceFeature)

	if err != nil {
		return err
	}

	*o = SpaceFeature(varSpaceFeature)

	return err
}

type NullableSpaceFeature struct {
	value *SpaceFeature
	isSet bool
}

func (v NullableSpaceFeature) Get() *SpaceFeature {
	return v.value
}

func (v *NullableSpaceFeature) Set(val *SpaceFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceFeature(val *SpaceFeature) *NullableSpaceFeature {
	return &NullableSpaceFeature{value: val, isSet: true}
}

func (v NullableSpaceFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


