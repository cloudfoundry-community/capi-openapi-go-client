/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SecurityGroupsAPI interface {

	/*
	V3SecurityGroupsGet List security groups

	Retrieves a paginated list of security groups.

Security groups are sets of egress traffic rules that can be applied to the containers
running applications and tasks to restrict their outbound network traffic.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3SecurityGroupsGetRequest
	*/
	V3SecurityGroupsGet(ctx context.Context) ApiV3SecurityGroupsGetRequest

	// V3SecurityGroupsGetExecute executes the request
	//  @return V3SecurityGroupsGet200Response
	V3SecurityGroupsGetExecute(r ApiV3SecurityGroupsGetRequest) (*V3SecurityGroupsGet200Response, *http.Response, error)

	/*
	V3SecurityGroupsGuidDelete Delete a security group

	Deletes a security group.

The security group cannot be deleted if it is currently bound to any spaces.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The security group GUID
	@return ApiV3SecurityGroupsGuidDeleteRequest
	*/
	V3SecurityGroupsGuidDelete(ctx context.Context, guid string) ApiV3SecurityGroupsGuidDeleteRequest

	// V3SecurityGroupsGuidDeleteExecute executes the request
	//  @return DeleteOrganizationQuota202Response
	V3SecurityGroupsGuidDeleteExecute(r ApiV3SecurityGroupsGuidDeleteRequest) (*DeleteOrganizationQuota202Response, *http.Response, error)

	/*
	V3SecurityGroupsGuidGet Get a security group

	Retrieves a security group by its GUID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The security group GUID
	@return ApiV3SecurityGroupsGuidGetRequest
	*/
	V3SecurityGroupsGuidGet(ctx context.Context, guid string) ApiV3SecurityGroupsGuidGetRequest

	// V3SecurityGroupsGuidGetExecute executes the request
	//  @return SecurityGroup
	V3SecurityGroupsGuidGetExecute(r ApiV3SecurityGroupsGuidGetRequest) (*SecurityGroup, *http.Response, error)

	/*
	V3SecurityGroupsGuidPatch Update a security group

	Updates the specified attributes of a security group.

Only the fields provided in the request body will be updated.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The security group GUID
	@return ApiV3SecurityGroupsGuidPatchRequest
	*/
	V3SecurityGroupsGuidPatch(ctx context.Context, guid string) ApiV3SecurityGroupsGuidPatchRequest

	// V3SecurityGroupsGuidPatchExecute executes the request
	//  @return SecurityGroup
	V3SecurityGroupsGuidPatchExecute(r ApiV3SecurityGroupsGuidPatchRequest) (*SecurityGroup, *http.Response, error)

	/*
	V3SecurityGroupsGuidRelationshipsRunningSpacesPost Bind running security group to spaces

	Binds one or more spaces to a security group with the running lifecycle.

Running security groups apply to all running app instances in the bound spaces.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The security group GUID
	@return ApiV3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest
	*/
	V3SecurityGroupsGuidRelationshipsRunningSpacesPost(ctx context.Context, guid string) ApiV3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest

	// V3SecurityGroupsGuidRelationshipsRunningSpacesPostExecute executes the request
	//  @return ApplyOrganizationQuotaToOrganizations201Response
	V3SecurityGroupsGuidRelationshipsRunningSpacesPostExecute(r ApiV3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest) (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error)

	/*
	V3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDelete Unbind running security group from a space

	Removes a space from a security group with the running lifecycle.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The security group GUID
	@param spaceGuid The space GUID to unbind
	@return ApiV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteRequest
	*/
	V3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDelete(ctx context.Context, guid string, spaceGuid string) ApiV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteRequest

	// V3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteExecute executes the request
	V3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteExecute(r ApiV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteRequest) (*http.Response, error)

	/*
	V3SecurityGroupsGuidRelationshipsStagingSpacesPost Bind staging security group to spaces

	Binds one or more spaces to a security group with the staging lifecycle.

Staging security groups apply during app staging in the bound spaces.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The security group GUID
	@return ApiV3SecurityGroupsGuidRelationshipsStagingSpacesPostRequest
	*/
	V3SecurityGroupsGuidRelationshipsStagingSpacesPost(ctx context.Context, guid string) ApiV3SecurityGroupsGuidRelationshipsStagingSpacesPostRequest

	// V3SecurityGroupsGuidRelationshipsStagingSpacesPostExecute executes the request
	//  @return ApplyOrganizationQuotaToOrganizations201Response
	V3SecurityGroupsGuidRelationshipsStagingSpacesPostExecute(r ApiV3SecurityGroupsGuidRelationshipsStagingSpacesPostRequest) (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error)

	/*
	V3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDelete Unbind staging security group from a space

	Removes a space from a security group with the staging lifecycle.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The security group GUID
	@param spaceGuid The space GUID to unbind
	@return ApiV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteRequest
	*/
	V3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDelete(ctx context.Context, guid string, spaceGuid string) ApiV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteRequest

	// V3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteExecute executes the request
	V3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteExecute(r ApiV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteRequest) (*http.Response, error)

	/*
	V3SecurityGroupsPost Create a security group

	Creates a new security group with the specified rules.

Security group rules control egress traffic from app and task containers.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3SecurityGroupsPostRequest
	*/
	V3SecurityGroupsPost(ctx context.Context) ApiV3SecurityGroupsPostRequest

	// V3SecurityGroupsPostExecute executes the request
	//  @return SecurityGroup
	V3SecurityGroupsPostExecute(r ApiV3SecurityGroupsPostRequest) (*SecurityGroup, *http.Response, error)

	/*
	V3SpacesGuidRunningSecurityGroupsGet List running security groups for a space

	Returns security groups enabled for running apps in the space.

This includes both globally-enabled and space-specific running security groups.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space GUID
	@return ApiV3SpacesGuidRunningSecurityGroupsGetRequest
	*/
	V3SpacesGuidRunningSecurityGroupsGet(ctx context.Context, guid string) ApiV3SpacesGuidRunningSecurityGroupsGetRequest

	// V3SpacesGuidRunningSecurityGroupsGetExecute executes the request
	//  @return V3SecurityGroupsGet200Response
	V3SpacesGuidRunningSecurityGroupsGetExecute(r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) (*V3SecurityGroupsGet200Response, *http.Response, error)

	/*
	V3SpacesGuidStagingSecurityGroupsGet List staging security groups for a space

	Returns security groups enabled for staging apps in the space.

This includes both globally-enabled and space-specific staging security groups.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space GUID
	@return ApiV3SpacesGuidStagingSecurityGroupsGetRequest
	*/
	V3SpacesGuidStagingSecurityGroupsGet(ctx context.Context, guid string) ApiV3SpacesGuidStagingSecurityGroupsGetRequest

	// V3SpacesGuidStagingSecurityGroupsGetExecute executes the request
	//  @return V3SecurityGroupsGet200Response
	V3SpacesGuidStagingSecurityGroupsGetExecute(r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) (*V3SecurityGroupsGet200Response, *http.Response, error)
}

// SecurityGroupsAPIService SecurityGroupsAPI service
type SecurityGroupsAPIService service

type ApiV3SecurityGroupsGetRequest struct {
	ctx context.Context
	ApiService SecurityGroupsAPI
	guids *string
	names *string
	globallyEnabledRunning *bool
	globallyEnabledStaging *bool
	runningSpaceGuids *string
	stagingSpaceGuids *string
	labelSelector *string
	page *int32
	perPage *int32
	orderBy *string
	createdAts *string
	updatedAts *string
}

// Comma-delimited list of security group guids to filter by
func (r ApiV3SecurityGroupsGetRequest) Guids(guids string) ApiV3SecurityGroupsGetRequest {
	r.guids = &guids
	return r
}

// Comma-delimited list of security group names to filter by
func (r ApiV3SecurityGroupsGetRequest) Names(names string) ApiV3SecurityGroupsGetRequest {
	r.names = &names
	return r
}

// If true, only include security groups enabled globally for running apps
func (r ApiV3SecurityGroupsGetRequest) GloballyEnabledRunning(globallyEnabledRunning bool) ApiV3SecurityGroupsGetRequest {
	r.globallyEnabledRunning = &globallyEnabledRunning
	return r
}

// If true, only include security groups enabled globally for staging apps
func (r ApiV3SecurityGroupsGetRequest) GloballyEnabledStaging(globallyEnabledStaging bool) ApiV3SecurityGroupsGetRequest {
	r.globallyEnabledStaging = &globallyEnabledStaging
	return r
}

// Comma-delimited list of space guids to filter by for running security groups
func (r ApiV3SecurityGroupsGetRequest) RunningSpaceGuids(runningSpaceGuids string) ApiV3SecurityGroupsGetRequest {
	r.runningSpaceGuids = &runningSpaceGuids
	return r
}

// Comma-delimited list of space guids to filter by for staging security groups
func (r ApiV3SecurityGroupsGetRequest) StagingSpaceGuids(stagingSpaceGuids string) ApiV3SecurityGroupsGetRequest {
	r.stagingSpaceGuids = &stagingSpaceGuids
	return r
}

// Filter by label selector
func (r ApiV3SecurityGroupsGetRequest) LabelSelector(labelSelector string) ApiV3SecurityGroupsGetRequest {
	r.labelSelector = &labelSelector
	return r
}

// Page to display
func (r ApiV3SecurityGroupsGetRequest) Page(page int32) ApiV3SecurityGroupsGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3SecurityGroupsGetRequest) PerPage(perPage int32) ApiV3SecurityGroupsGetRequest {
	r.perPage = &perPage
	return r
}

// Value to sort by
func (r ApiV3SecurityGroupsGetRequest) OrderBy(orderBy string) ApiV3SecurityGroupsGetRequest {
	r.orderBy = &orderBy
	return r
}

// Filter by creation time
func (r ApiV3SecurityGroupsGetRequest) CreatedAts(createdAts string) ApiV3SecurityGroupsGetRequest {
	r.createdAts = &createdAts
	return r
}

// Filter by update time
func (r ApiV3SecurityGroupsGetRequest) UpdatedAts(updatedAts string) ApiV3SecurityGroupsGetRequest {
	r.updatedAts = &updatedAts
	return r
}

func (r ApiV3SecurityGroupsGetRequest) Execute() (*V3SecurityGroupsGet200Response, *http.Response, error) {
	return r.ApiService.V3SecurityGroupsGetExecute(r)
}

/*
V3SecurityGroupsGet List security groups

Retrieves a paginated list of security groups.

Security groups are sets of egress traffic rules that can be applied to the containers
running applications and tasks to restrict their outbound network traffic.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3SecurityGroupsGetRequest
*/
func (a *SecurityGroupsAPIService) V3SecurityGroupsGet(ctx context.Context) ApiV3SecurityGroupsGetRequest {
	return ApiV3SecurityGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V3SecurityGroupsGet200Response
func (a *SecurityGroupsAPIService) V3SecurityGroupsGetExecute(r ApiV3SecurityGroupsGetRequest) (*V3SecurityGroupsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3SecurityGroupsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityGroupsAPIService.V3SecurityGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/security_groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.guids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guids", r.guids, "form", "")
	}
	if r.names != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "names", r.names, "form", "")
	}
	if r.globallyEnabledRunning != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "globally_enabled_running", r.globallyEnabledRunning, "form", "")
	}
	if r.globallyEnabledStaging != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "globally_enabled_staging", r.globallyEnabledStaging, "form", "")
	}
	if r.runningSpaceGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "running_space_guids", r.runningSpaceGuids, "form", "")
	}
	if r.stagingSpaceGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "staging_space_guids", r.stagingSpaceGuids, "form", "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label_selector", r.labelSelector, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	} else {
		var defaultValue int32 = 50
		r.perPage = &defaultValue
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.orderBy = &defaultValue
	}
	if r.createdAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_ats", r.createdAts, "form", "")
	}
	if r.updatedAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_ats", r.updatedAts, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SecurityGroupsGuidDeleteRequest struct {
	ctx context.Context
	ApiService SecurityGroupsAPI
	guid string
}

func (r ApiV3SecurityGroupsGuidDeleteRequest) Execute() (*DeleteOrganizationQuota202Response, *http.Response, error) {
	return r.ApiService.V3SecurityGroupsGuidDeleteExecute(r)
}

/*
V3SecurityGroupsGuidDelete Delete a security group

Deletes a security group.

The security group cannot be deleted if it is currently bound to any spaces.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The security group GUID
 @return ApiV3SecurityGroupsGuidDeleteRequest
*/
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidDelete(ctx context.Context, guid string) ApiV3SecurityGroupsGuidDeleteRequest {
	return ApiV3SecurityGroupsGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return DeleteOrganizationQuota202Response
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidDeleteExecute(r ApiV3SecurityGroupsGuidDeleteRequest) (*DeleteOrganizationQuota202Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteOrganizationQuota202Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityGroupsAPIService.V3SecurityGroupsGuidDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/security_groups/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SecurityGroupsGuidGetRequest struct {
	ctx context.Context
	ApiService SecurityGroupsAPI
	guid string
}

func (r ApiV3SecurityGroupsGuidGetRequest) Execute() (*SecurityGroup, *http.Response, error) {
	return r.ApiService.V3SecurityGroupsGuidGetExecute(r)
}

/*
V3SecurityGroupsGuidGet Get a security group

Retrieves a security group by its GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The security group GUID
 @return ApiV3SecurityGroupsGuidGetRequest
*/
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidGet(ctx context.Context, guid string) ApiV3SecurityGroupsGuidGetRequest {
	return ApiV3SecurityGroupsGuidGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return SecurityGroup
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidGetExecute(r ApiV3SecurityGroupsGuidGetRequest) (*SecurityGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityGroupsAPIService.V3SecurityGroupsGuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/security_groups/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SecurityGroupsGuidPatchRequest struct {
	ctx context.Context
	ApiService SecurityGroupsAPI
	guid string
	securityGroupUpdate *SecurityGroupUpdate
}

func (r ApiV3SecurityGroupsGuidPatchRequest) SecurityGroupUpdate(securityGroupUpdate SecurityGroupUpdate) ApiV3SecurityGroupsGuidPatchRequest {
	r.securityGroupUpdate = &securityGroupUpdate
	return r
}

func (r ApiV3SecurityGroupsGuidPatchRequest) Execute() (*SecurityGroup, *http.Response, error) {
	return r.ApiService.V3SecurityGroupsGuidPatchExecute(r)
}

/*
V3SecurityGroupsGuidPatch Update a security group

Updates the specified attributes of a security group.

Only the fields provided in the request body will be updated.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The security group GUID
 @return ApiV3SecurityGroupsGuidPatchRequest
*/
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidPatch(ctx context.Context, guid string) ApiV3SecurityGroupsGuidPatchRequest {
	return ApiV3SecurityGroupsGuidPatchRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return SecurityGroup
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidPatchExecute(r ApiV3SecurityGroupsGuidPatchRequest) (*SecurityGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityGroupsAPIService.V3SecurityGroupsGuidPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/security_groups/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.securityGroupUpdate == nil {
		return localVarReturnValue, nil, reportError("securityGroupUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityGroupUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest struct {
	ctx context.Context
	ApiService SecurityGroupsAPI
	guid string
	v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest *V3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest
}

func (r ApiV3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest) V3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest(v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest V3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest) ApiV3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest {
	r.v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest = &v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest
	return r
}

func (r ApiV3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest) Execute() (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error) {
	return r.ApiService.V3SecurityGroupsGuidRelationshipsRunningSpacesPostExecute(r)
}

/*
V3SecurityGroupsGuidRelationshipsRunningSpacesPost Bind running security group to spaces

Binds one or more spaces to a security group with the running lifecycle.

Running security groups apply to all running app instances in the bound spaces.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The security group GUID
 @return ApiV3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest
*/
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidRelationshipsRunningSpacesPost(ctx context.Context, guid string) ApiV3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest {
	return ApiV3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return ApplyOrganizationQuotaToOrganizations201Response
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidRelationshipsRunningSpacesPostExecute(r ApiV3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest) (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplyOrganizationQuotaToOrganizations201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityGroupsAPIService.V3SecurityGroupsGuidRelationshipsRunningSpacesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/security_groups/{guid}/relationships/running_spaces"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest == nil {
		return localVarReturnValue, nil, reportError("v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteRequest struct {
	ctx context.Context
	ApiService SecurityGroupsAPI
	guid string
	spaceGuid string
}

func (r ApiV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteExecute(r)
}

/*
V3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDelete Unbind running security group from a space

Removes a space from a security group with the running lifecycle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The security group GUID
 @param spaceGuid The space GUID to unbind
 @return ApiV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteRequest
*/
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDelete(ctx context.Context, guid string, spaceGuid string) ApiV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteRequest {
	return ApiV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
		spaceGuid: spaceGuid,
	}
}

// Execute executes the request
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteExecute(r ApiV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityGroupsAPIService.V3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/security_groups/{guid}/relationships/running_spaces/{space_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"space_guid"+"}", url.PathEscape(parameterValueToString(r.spaceGuid, "spaceGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV3SecurityGroupsGuidRelationshipsStagingSpacesPostRequest struct {
	ctx context.Context
	ApiService SecurityGroupsAPI
	guid string
	v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest *V3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest
}

func (r ApiV3SecurityGroupsGuidRelationshipsStagingSpacesPostRequest) V3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest(v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest V3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest) ApiV3SecurityGroupsGuidRelationshipsStagingSpacesPostRequest {
	r.v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest = &v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest
	return r
}

func (r ApiV3SecurityGroupsGuidRelationshipsStagingSpacesPostRequest) Execute() (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error) {
	return r.ApiService.V3SecurityGroupsGuidRelationshipsStagingSpacesPostExecute(r)
}

/*
V3SecurityGroupsGuidRelationshipsStagingSpacesPost Bind staging security group to spaces

Binds one or more spaces to a security group with the staging lifecycle.

Staging security groups apply during app staging in the bound spaces.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The security group GUID
 @return ApiV3SecurityGroupsGuidRelationshipsStagingSpacesPostRequest
*/
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidRelationshipsStagingSpacesPost(ctx context.Context, guid string) ApiV3SecurityGroupsGuidRelationshipsStagingSpacesPostRequest {
	return ApiV3SecurityGroupsGuidRelationshipsStagingSpacesPostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return ApplyOrganizationQuotaToOrganizations201Response
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidRelationshipsStagingSpacesPostExecute(r ApiV3SecurityGroupsGuidRelationshipsStagingSpacesPostRequest) (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplyOrganizationQuotaToOrganizations201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityGroupsAPIService.V3SecurityGroupsGuidRelationshipsStagingSpacesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/security_groups/{guid}/relationships/staging_spaces"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest == nil {
		return localVarReturnValue, nil, reportError("v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3SecurityGroupsGuidRelationshipsRunningSpacesPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteRequest struct {
	ctx context.Context
	ApiService SecurityGroupsAPI
	guid string
	spaceGuid string
}

func (r ApiV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteExecute(r)
}

/*
V3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDelete Unbind staging security group from a space

Removes a space from a security group with the staging lifecycle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The security group GUID
 @param spaceGuid The space GUID to unbind
 @return ApiV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteRequest
*/
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDelete(ctx context.Context, guid string, spaceGuid string) ApiV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteRequest {
	return ApiV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
		spaceGuid: spaceGuid,
	}
}

// Execute executes the request
func (a *SecurityGroupsAPIService) V3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteExecute(r ApiV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityGroupsAPIService.V3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/security_groups/{guid}/relationships/staging_spaces/{space_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"space_guid"+"}", url.PathEscape(parameterValueToString(r.spaceGuid, "spaceGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV3SecurityGroupsPostRequest struct {
	ctx context.Context
	ApiService SecurityGroupsAPI
	securityGroupCreate *SecurityGroupCreate
}

func (r ApiV3SecurityGroupsPostRequest) SecurityGroupCreate(securityGroupCreate SecurityGroupCreate) ApiV3SecurityGroupsPostRequest {
	r.securityGroupCreate = &securityGroupCreate
	return r
}

func (r ApiV3SecurityGroupsPostRequest) Execute() (*SecurityGroup, *http.Response, error) {
	return r.ApiService.V3SecurityGroupsPostExecute(r)
}

/*
V3SecurityGroupsPost Create a security group

Creates a new security group with the specified rules.

Security group rules control egress traffic from app and task containers.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3SecurityGroupsPostRequest
*/
func (a *SecurityGroupsAPIService) V3SecurityGroupsPost(ctx context.Context) ApiV3SecurityGroupsPostRequest {
	return ApiV3SecurityGroupsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityGroup
func (a *SecurityGroupsAPIService) V3SecurityGroupsPostExecute(r ApiV3SecurityGroupsPostRequest) (*SecurityGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityGroupsAPIService.V3SecurityGroupsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/security_groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.securityGroupCreate == nil {
		return localVarReturnValue, nil, reportError("securityGroupCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityGroupCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpacesGuidRunningSecurityGroupsGetRequest struct {
	ctx context.Context
	ApiService SecurityGroupsAPI
	guid string
	guids *string
	names *string
	page *int32
	perPage *int32
	orderBy *string
}

// Comma-delimited list of security group guids to filter by
func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) Guids(guids string) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	r.guids = &guids
	return r
}

// Comma-delimited list of security group names to filter by
func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) Names(names string) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	r.names = &names
	return r
}

// Page to display
func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) Page(page int32) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) PerPage(perPage int32) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	r.perPage = &perPage
	return r
}

// Value to sort by
func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) OrderBy(orderBy string) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) Execute() (*V3SecurityGroupsGet200Response, *http.Response, error) {
	return r.ApiService.V3SpacesGuidRunningSecurityGroupsGetExecute(r)
}

/*
V3SpacesGuidRunningSecurityGroupsGet List running security groups for a space

Returns security groups enabled for running apps in the space.

This includes both globally-enabled and space-specific running security groups.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space GUID
 @return ApiV3SpacesGuidRunningSecurityGroupsGetRequest
*/
func (a *SecurityGroupsAPIService) V3SpacesGuidRunningSecurityGroupsGet(ctx context.Context, guid string) ApiV3SpacesGuidRunningSecurityGroupsGetRequest {
	return ApiV3SpacesGuidRunningSecurityGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3SecurityGroupsGet200Response
func (a *SecurityGroupsAPIService) V3SpacesGuidRunningSecurityGroupsGetExecute(r ApiV3SpacesGuidRunningSecurityGroupsGetRequest) (*V3SecurityGroupsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3SecurityGroupsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityGroupsAPIService.V3SpacesGuidRunningSecurityGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/spaces/{guid}/running_security_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.guids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guids", r.guids, "form", "")
	}
	if r.names != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "names", r.names, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	} else {
		var defaultValue int32 = 50
		r.perPage = &defaultValue
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.orderBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpacesGuidStagingSecurityGroupsGetRequest struct {
	ctx context.Context
	ApiService SecurityGroupsAPI
	guid string
	guids *string
	names *string
	page *int32
	perPage *int32
	orderBy *string
}

// Comma-delimited list of security group guids to filter by
func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) Guids(guids string) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	r.guids = &guids
	return r
}

// Comma-delimited list of security group names to filter by
func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) Names(names string) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	r.names = &names
	return r
}

// Page to display
func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) Page(page int32) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) PerPage(perPage int32) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	r.perPage = &perPage
	return r
}

// Value to sort by
func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) OrderBy(orderBy string) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) Execute() (*V3SecurityGroupsGet200Response, *http.Response, error) {
	return r.ApiService.V3SpacesGuidStagingSecurityGroupsGetExecute(r)
}

/*
V3SpacesGuidStagingSecurityGroupsGet List staging security groups for a space

Returns security groups enabled for staging apps in the space.

This includes both globally-enabled and space-specific staging security groups.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space GUID
 @return ApiV3SpacesGuidStagingSecurityGroupsGetRequest
*/
func (a *SecurityGroupsAPIService) V3SpacesGuidStagingSecurityGroupsGet(ctx context.Context, guid string) ApiV3SpacesGuidStagingSecurityGroupsGetRequest {
	return ApiV3SpacesGuidStagingSecurityGroupsGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3SecurityGroupsGet200Response
func (a *SecurityGroupsAPIService) V3SpacesGuidStagingSecurityGroupsGetExecute(r ApiV3SpacesGuidStagingSecurityGroupsGetRequest) (*V3SecurityGroupsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3SecurityGroupsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityGroupsAPIService.V3SpacesGuidStagingSecurityGroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/spaces/{guid}/staging_security_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.guids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guids", r.guids, "form", "")
	}
	if r.names != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "names", r.names, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	} else {
		var defaultValue int32 = 50
		r.perPage = &defaultValue
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.orderBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
