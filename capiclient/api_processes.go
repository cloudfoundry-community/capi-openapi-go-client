/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ProcessesAPI interface {

	/*
	V3AppsGuidProcessesGet List processes for an app

	List all processes associated with an app

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The app GUID
	@return ApiV3AppsGuidProcessesGetRequest
	*/
	V3AppsGuidProcessesGet(ctx context.Context, guid string) ApiV3AppsGuidProcessesGetRequest

	// V3AppsGuidProcessesGetExecute executes the request
	//  @return V3AppsGuidProcessesGet200Response
	V3AppsGuidProcessesGetExecute(r ApiV3AppsGuidProcessesGetRequest) (*V3AppsGuidProcessesGet200Response, *http.Response, error)

	/*
	V3AppsGuidProcessesTypeGet Get a process by type for an app

	Get a specific process type for an app

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The app GUID
	@param type_ The process type
	@return ApiV3AppsGuidProcessesTypeGetRequest
	*/
	V3AppsGuidProcessesTypeGet(ctx context.Context, guid string, type_ string) ApiV3AppsGuidProcessesTypeGetRequest

	// V3AppsGuidProcessesTypeGetExecute executes the request
	//  @return Process
	V3AppsGuidProcessesTypeGetExecute(r ApiV3AppsGuidProcessesTypeGetRequest) (*Process, *http.Response, error)

	/*
	V3ProcessesGet List processes

	Retrieve a paginated list of processes the user has access to

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3ProcessesGetRequest
	*/
	V3ProcessesGet(ctx context.Context) ApiV3ProcessesGetRequest

	// V3ProcessesGetExecute executes the request
	//  @return V3AppsGuidProcessesGet200Response
	V3ProcessesGetExecute(r ApiV3ProcessesGetRequest) (*V3AppsGuidProcessesGet200Response, *http.Response, error)

	/*
	V3ProcessesGuidActionsScalePost Scale a process

	Scale a process to a different number of instances or adjust resource limits

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The process GUID
	@return ApiV3ProcessesGuidActionsScalePostRequest
	*/
	V3ProcessesGuidActionsScalePost(ctx context.Context, guid string) ApiV3ProcessesGuidActionsScalePostRequest

	// V3ProcessesGuidActionsScalePostExecute executes the request
	//  @return Process
	V3ProcessesGuidActionsScalePostExecute(r ApiV3ProcessesGuidActionsScalePostRequest) (*Process, *http.Response, error)

	/*
	V3ProcessesGuidGet Get a process

	Retrieve details of a specific process

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The process GUID
	@return ApiV3ProcessesGuidGetRequest
	*/
	V3ProcessesGuidGet(ctx context.Context, guid string) ApiV3ProcessesGuidGetRequest

	// V3ProcessesGuidGetExecute executes the request
	//  @return Process
	V3ProcessesGuidGetExecute(r ApiV3ProcessesGuidGetRequest) (*Process, *http.Response, error)

	/*
	V3ProcessesGuidInstancesIndexDelete Terminate a process instance

	Terminate a specific instance of a process

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The process GUID
	@param index The instance index
	@return ApiV3ProcessesGuidInstancesIndexDeleteRequest
	*/
	V3ProcessesGuidInstancesIndexDelete(ctx context.Context, guid string, index int32) ApiV3ProcessesGuidInstancesIndexDeleteRequest

	// V3ProcessesGuidInstancesIndexDeleteExecute executes the request
	V3ProcessesGuidInstancesIndexDeleteExecute(r ApiV3ProcessesGuidInstancesIndexDeleteRequest) (*http.Response, error)

	/*
	V3ProcessesGuidPatch Update a process

	Update a process configuration including command, health check, and metadata

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The process GUID
	@return ApiV3ProcessesGuidPatchRequest
	*/
	V3ProcessesGuidPatch(ctx context.Context, guid string) ApiV3ProcessesGuidPatchRequest

	// V3ProcessesGuidPatchExecute executes the request
	//  @return Process
	V3ProcessesGuidPatchExecute(r ApiV3ProcessesGuidPatchRequest) (*Process, *http.Response, error)

	/*
	V3ProcessesGuidSidecarsGet List sidecars for a process

	Retrieves all sidecars associated with a specific process type.

This endpoint allows you to see which sidecars are configured to run
alongside a particular process type (e.g., web, worker).


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The process GUID
	@return ApiV3ProcessesGuidSidecarsGetRequest
	*/
	V3ProcessesGuidSidecarsGet(ctx context.Context, guid string) ApiV3ProcessesGuidSidecarsGetRequest

	// V3ProcessesGuidSidecarsGetExecute executes the request
	//  @return V3AppsGuidSidecarsGet200Response
	V3ProcessesGuidSidecarsGetExecute(r ApiV3ProcessesGuidSidecarsGetRequest) (*V3AppsGuidSidecarsGet200Response, *http.Response, error)

	/*
	V3ProcessesGuidStatsGet Get stats for a process

	Retrieve runtime statistics for all instances of a process

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The process GUID
	@return ApiV3ProcessesGuidStatsGetRequest
	*/
	V3ProcessesGuidStatsGet(ctx context.Context, guid string) ApiV3ProcessesGuidStatsGetRequest

	// V3ProcessesGuidStatsGetExecute executes the request
	//  @return V3ProcessesGuidStatsGet200Response
	V3ProcessesGuidStatsGetExecute(r ApiV3ProcessesGuidStatsGetRequest) (*V3ProcessesGuidStatsGet200Response, *http.Response, error)

	/*
	V3SidecarsGuidProcessesGet List processes for a sidecar

	List all processes associated with a sidecar

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The sidecar GUID
	@return ApiV3SidecarsGuidProcessesGetRequest
	*/
	V3SidecarsGuidProcessesGet(ctx context.Context, guid string) ApiV3SidecarsGuidProcessesGetRequest

	// V3SidecarsGuidProcessesGetExecute executes the request
	//  @return V3AppsGuidProcessesGet200Response
	V3SidecarsGuidProcessesGetExecute(r ApiV3SidecarsGuidProcessesGetRequest) (*V3AppsGuidProcessesGet200Response, *http.Response, error)
}

// ProcessesAPIService ProcessesAPI service
type ProcessesAPIService service

type ApiV3AppsGuidProcessesGetRequest struct {
	ctx context.Context
	ApiService ProcessesAPI
	guid string
	page *int32
	perPage *int32
	types *string
}

// Page number for pagination
func (r ApiV3AppsGuidProcessesGetRequest) Page(page int32) ApiV3AppsGuidProcessesGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3AppsGuidProcessesGetRequest) PerPage(perPage int32) ApiV3AppsGuidProcessesGetRequest {
	r.perPage = &perPage
	return r
}

// Filter by process types (comma-separated)
func (r ApiV3AppsGuidProcessesGetRequest) Types(types string) ApiV3AppsGuidProcessesGetRequest {
	r.types = &types
	return r
}

func (r ApiV3AppsGuidProcessesGetRequest) Execute() (*V3AppsGuidProcessesGet200Response, *http.Response, error) {
	return r.ApiService.V3AppsGuidProcessesGetExecute(r)
}

/*
V3AppsGuidProcessesGet List processes for an app

List all processes associated with an app

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The app GUID
 @return ApiV3AppsGuidProcessesGetRequest
*/
func (a *ProcessesAPIService) V3AppsGuidProcessesGet(ctx context.Context, guid string) ApiV3AppsGuidProcessesGetRequest {
	return ApiV3AppsGuidProcessesGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3AppsGuidProcessesGet200Response
func (a *ProcessesAPIService) V3AppsGuidProcessesGetExecute(r ApiV3AppsGuidProcessesGetRequest) (*V3AppsGuidProcessesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3AppsGuidProcessesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesAPIService.V3AppsGuidProcessesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/apps/{guid}/processes"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	}
	if r.types != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "types", r.types, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3AppsGuidProcessesTypeGetRequest struct {
	ctx context.Context
	ApiService ProcessesAPI
	guid string
	type_ string
}

func (r ApiV3AppsGuidProcessesTypeGetRequest) Execute() (*Process, *http.Response, error) {
	return r.ApiService.V3AppsGuidProcessesTypeGetExecute(r)
}

/*
V3AppsGuidProcessesTypeGet Get a process by type for an app

Get a specific process type for an app

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The app GUID
 @param type_ The process type
 @return ApiV3AppsGuidProcessesTypeGetRequest
*/
func (a *ProcessesAPIService) V3AppsGuidProcessesTypeGet(ctx context.Context, guid string, type_ string) ApiV3AppsGuidProcessesTypeGetRequest {
	return ApiV3AppsGuidProcessesTypeGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
		type_: type_,
	}
}

// Execute executes the request
//  @return Process
func (a *ProcessesAPIService) V3AppsGuidProcessesTypeGetExecute(r ApiV3AppsGuidProcessesTypeGetRequest) (*Process, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Process
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesAPIService.V3AppsGuidProcessesTypeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/apps/{guid}/processes/{type}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3ProcessesGetRequest struct {
	ctx context.Context
	ApiService ProcessesAPI
	page *int32
	perPage *int32
	orderBy *string
	guids *string
	types *string
	appGuids *string
	spaceGuids *string
	organizationGuids *string
	labelSelector *string
	createdAts *string
	updatedAts *string
}

// Page number for pagination
func (r ApiV3ProcessesGetRequest) Page(page int32) ApiV3ProcessesGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3ProcessesGetRequest) PerPage(perPage int32) ApiV3ProcessesGetRequest {
	r.perPage = &perPage
	return r
}

// Field to sort results by
func (r ApiV3ProcessesGetRequest) OrderBy(orderBy string) ApiV3ProcessesGetRequest {
	r.orderBy = &orderBy
	return r
}

// Filter by process GUIDs (comma-separated)
func (r ApiV3ProcessesGetRequest) Guids(guids string) ApiV3ProcessesGetRequest {
	r.guids = &guids
	return r
}

// Filter by process types (comma-separated)
func (r ApiV3ProcessesGetRequest) Types(types string) ApiV3ProcessesGetRequest {
	r.types = &types
	return r
}

// Filter by app GUIDs (comma-separated)
func (r ApiV3ProcessesGetRequest) AppGuids(appGuids string) ApiV3ProcessesGetRequest {
	r.appGuids = &appGuids
	return r
}

// Filter by space GUIDs (comma-separated)
func (r ApiV3ProcessesGetRequest) SpaceGuids(spaceGuids string) ApiV3ProcessesGetRequest {
	r.spaceGuids = &spaceGuids
	return r
}

// Filter by organization GUIDs (comma-separated)
func (r ApiV3ProcessesGetRequest) OrganizationGuids(organizationGuids string) ApiV3ProcessesGetRequest {
	r.organizationGuids = &organizationGuids
	return r
}

// Filter by labels using label selector syntax
func (r ApiV3ProcessesGetRequest) LabelSelector(labelSelector string) ApiV3ProcessesGetRequest {
	r.labelSelector = &labelSelector
	return r
}

// Filter by creation timestamp range
func (r ApiV3ProcessesGetRequest) CreatedAts(createdAts string) ApiV3ProcessesGetRequest {
	r.createdAts = &createdAts
	return r
}

// Filter by update timestamp range
func (r ApiV3ProcessesGetRequest) UpdatedAts(updatedAts string) ApiV3ProcessesGetRequest {
	r.updatedAts = &updatedAts
	return r
}

func (r ApiV3ProcessesGetRequest) Execute() (*V3AppsGuidProcessesGet200Response, *http.Response, error) {
	return r.ApiService.V3ProcessesGetExecute(r)
}

/*
V3ProcessesGet List processes

Retrieve a paginated list of processes the user has access to

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3ProcessesGetRequest
*/
func (a *ProcessesAPIService) V3ProcessesGet(ctx context.Context) ApiV3ProcessesGetRequest {
	return ApiV3ProcessesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V3AppsGuidProcessesGet200Response
func (a *ProcessesAPIService) V3ProcessesGetExecute(r ApiV3ProcessesGetRequest) (*V3AppsGuidProcessesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3AppsGuidProcessesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesAPIService.V3ProcessesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/processes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	}
	if r.guids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guids", r.guids, "form", "")
	}
	if r.types != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "types", r.types, "form", "")
	}
	if r.appGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_guids", r.appGuids, "form", "")
	}
	if r.spaceGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "space_guids", r.spaceGuids, "form", "")
	}
	if r.organizationGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organization_guids", r.organizationGuids, "form", "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label_selector", r.labelSelector, "form", "")
	}
	if r.createdAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_ats", r.createdAts, "form", "")
	}
	if r.updatedAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_ats", r.updatedAts, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3ProcessesGuidActionsScalePostRequest struct {
	ctx context.Context
	ApiService ProcessesAPI
	guid string
	v3ProcessesGuidActionsScalePostRequest *V3ProcessesGuidActionsScalePostRequest
}

func (r ApiV3ProcessesGuidActionsScalePostRequest) V3ProcessesGuidActionsScalePostRequest(v3ProcessesGuidActionsScalePostRequest V3ProcessesGuidActionsScalePostRequest) ApiV3ProcessesGuidActionsScalePostRequest {
	r.v3ProcessesGuidActionsScalePostRequest = &v3ProcessesGuidActionsScalePostRequest
	return r
}

func (r ApiV3ProcessesGuidActionsScalePostRequest) Execute() (*Process, *http.Response, error) {
	return r.ApiService.V3ProcessesGuidActionsScalePostExecute(r)
}

/*
V3ProcessesGuidActionsScalePost Scale a process

Scale a process to a different number of instances or adjust resource limits

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The process GUID
 @return ApiV3ProcessesGuidActionsScalePostRequest
*/
func (a *ProcessesAPIService) V3ProcessesGuidActionsScalePost(ctx context.Context, guid string) ApiV3ProcessesGuidActionsScalePostRequest {
	return ApiV3ProcessesGuidActionsScalePostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return Process
func (a *ProcessesAPIService) V3ProcessesGuidActionsScalePostExecute(r ApiV3ProcessesGuidActionsScalePostRequest) (*Process, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Process
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesAPIService.V3ProcessesGuidActionsScalePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/processes/{guid}/actions/scale"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3ProcessesGuidActionsScalePostRequest == nil {
		return localVarReturnValue, nil, reportError("v3ProcessesGuidActionsScalePostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3ProcessesGuidActionsScalePostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3ProcessesGuidGetRequest struct {
	ctx context.Context
	ApiService ProcessesAPI
	guid string
}

func (r ApiV3ProcessesGuidGetRequest) Execute() (*Process, *http.Response, error) {
	return r.ApiService.V3ProcessesGuidGetExecute(r)
}

/*
V3ProcessesGuidGet Get a process

Retrieve details of a specific process

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The process GUID
 @return ApiV3ProcessesGuidGetRequest
*/
func (a *ProcessesAPIService) V3ProcessesGuidGet(ctx context.Context, guid string) ApiV3ProcessesGuidGetRequest {
	return ApiV3ProcessesGuidGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return Process
func (a *ProcessesAPIService) V3ProcessesGuidGetExecute(r ApiV3ProcessesGuidGetRequest) (*Process, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Process
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesAPIService.V3ProcessesGuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/processes/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3ProcessesGuidInstancesIndexDeleteRequest struct {
	ctx context.Context
	ApiService ProcessesAPI
	guid string
	index int32
}

func (r ApiV3ProcessesGuidInstancesIndexDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3ProcessesGuidInstancesIndexDeleteExecute(r)
}

/*
V3ProcessesGuidInstancesIndexDelete Terminate a process instance

Terminate a specific instance of a process

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The process GUID
 @param index The instance index
 @return ApiV3ProcessesGuidInstancesIndexDeleteRequest
*/
func (a *ProcessesAPIService) V3ProcessesGuidInstancesIndexDelete(ctx context.Context, guid string, index int32) ApiV3ProcessesGuidInstancesIndexDeleteRequest {
	return ApiV3ProcessesGuidInstancesIndexDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
		index: index,
	}
}

// Execute executes the request
func (a *ProcessesAPIService) V3ProcessesGuidInstancesIndexDeleteExecute(r ApiV3ProcessesGuidInstancesIndexDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesAPIService.V3ProcessesGuidInstancesIndexDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/processes/{guid}/instances/{index}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.index < 0 {
		return nil, reportError("index must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV3ProcessesGuidPatchRequest struct {
	ctx context.Context
	ApiService ProcessesAPI
	guid string
	v3ProcessesGuidPatchRequest *V3ProcessesGuidPatchRequest
}

func (r ApiV3ProcessesGuidPatchRequest) V3ProcessesGuidPatchRequest(v3ProcessesGuidPatchRequest V3ProcessesGuidPatchRequest) ApiV3ProcessesGuidPatchRequest {
	r.v3ProcessesGuidPatchRequest = &v3ProcessesGuidPatchRequest
	return r
}

func (r ApiV3ProcessesGuidPatchRequest) Execute() (*Process, *http.Response, error) {
	return r.ApiService.V3ProcessesGuidPatchExecute(r)
}

/*
V3ProcessesGuidPatch Update a process

Update a process configuration including command, health check, and metadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The process GUID
 @return ApiV3ProcessesGuidPatchRequest
*/
func (a *ProcessesAPIService) V3ProcessesGuidPatch(ctx context.Context, guid string) ApiV3ProcessesGuidPatchRequest {
	return ApiV3ProcessesGuidPatchRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return Process
func (a *ProcessesAPIService) V3ProcessesGuidPatchExecute(r ApiV3ProcessesGuidPatchRequest) (*Process, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Process
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesAPIService.V3ProcessesGuidPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/processes/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3ProcessesGuidPatchRequest == nil {
		return localVarReturnValue, nil, reportError("v3ProcessesGuidPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3ProcessesGuidPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3ProcessesGuidSidecarsGetRequest struct {
	ctx context.Context
	ApiService ProcessesAPI
	guid string
	page *int32
	perPage *int32
	orderBy *string
	names *string
	labelSelector *string
	createdAts *string
	updatedAts *string
}

// Page number for pagination
func (r ApiV3ProcessesGuidSidecarsGetRequest) Page(page int32) ApiV3ProcessesGuidSidecarsGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3ProcessesGuidSidecarsGetRequest) PerPage(perPage int32) ApiV3ProcessesGuidSidecarsGetRequest {
	r.perPage = &perPage
	return r
}

// Sort order for results
func (r ApiV3ProcessesGuidSidecarsGetRequest) OrderBy(orderBy string) ApiV3ProcessesGuidSidecarsGetRequest {
	r.orderBy = &orderBy
	return r
}

// Filter by sidecar names (comma-separated)
func (r ApiV3ProcessesGuidSidecarsGetRequest) Names(names string) ApiV3ProcessesGuidSidecarsGetRequest {
	r.names = &names
	return r
}

// Filter by label selector
func (r ApiV3ProcessesGuidSidecarsGetRequest) LabelSelector(labelSelector string) ApiV3ProcessesGuidSidecarsGetRequest {
	r.labelSelector = &labelSelector
	return r
}

// Filter by creation time
func (r ApiV3ProcessesGuidSidecarsGetRequest) CreatedAts(createdAts string) ApiV3ProcessesGuidSidecarsGetRequest {
	r.createdAts = &createdAts
	return r
}

// Filter by update time
func (r ApiV3ProcessesGuidSidecarsGetRequest) UpdatedAts(updatedAts string) ApiV3ProcessesGuidSidecarsGetRequest {
	r.updatedAts = &updatedAts
	return r
}

func (r ApiV3ProcessesGuidSidecarsGetRequest) Execute() (*V3AppsGuidSidecarsGet200Response, *http.Response, error) {
	return r.ApiService.V3ProcessesGuidSidecarsGetExecute(r)
}

/*
V3ProcessesGuidSidecarsGet List sidecars for a process

Retrieves all sidecars associated with a specific process type.

This endpoint allows you to see which sidecars are configured to run
alongside a particular process type (e.g., web, worker).


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The process GUID
 @return ApiV3ProcessesGuidSidecarsGetRequest
*/
func (a *ProcessesAPIService) V3ProcessesGuidSidecarsGet(ctx context.Context, guid string) ApiV3ProcessesGuidSidecarsGetRequest {
	return ApiV3ProcessesGuidSidecarsGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3AppsGuidSidecarsGet200Response
func (a *ProcessesAPIService) V3ProcessesGuidSidecarsGetExecute(r ApiV3ProcessesGuidSidecarsGetRequest) (*V3AppsGuidSidecarsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3AppsGuidSidecarsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesAPIService.V3ProcessesGuidSidecarsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/processes/{guid}/sidecars"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	} else {
		var defaultValue int32 = 50
		r.perPage = &defaultValue
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.orderBy = &defaultValue
	}
	if r.names != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "names", r.names, "form", "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label_selector", r.labelSelector, "form", "")
	}
	if r.createdAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_ats", r.createdAts, "form", "")
	}
	if r.updatedAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_ats", r.updatedAts, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3ProcessesGuidStatsGetRequest struct {
	ctx context.Context
	ApiService ProcessesAPI
	guid string
}

func (r ApiV3ProcessesGuidStatsGetRequest) Execute() (*V3ProcessesGuidStatsGet200Response, *http.Response, error) {
	return r.ApiService.V3ProcessesGuidStatsGetExecute(r)
}

/*
V3ProcessesGuidStatsGet Get stats for a process

Retrieve runtime statistics for all instances of a process

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The process GUID
 @return ApiV3ProcessesGuidStatsGetRequest
*/
func (a *ProcessesAPIService) V3ProcessesGuidStatsGet(ctx context.Context, guid string) ApiV3ProcessesGuidStatsGetRequest {
	return ApiV3ProcessesGuidStatsGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3ProcessesGuidStatsGet200Response
func (a *ProcessesAPIService) V3ProcessesGuidStatsGetExecute(r ApiV3ProcessesGuidStatsGetRequest) (*V3ProcessesGuidStatsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3ProcessesGuidStatsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesAPIService.V3ProcessesGuidStatsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/processes/{guid}/stats"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SidecarsGuidProcessesGetRequest struct {
	ctx context.Context
	ApiService ProcessesAPI
	guid string
	page *int32
	perPage *int32
}

// Page number for pagination
func (r ApiV3SidecarsGuidProcessesGetRequest) Page(page int32) ApiV3SidecarsGuidProcessesGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3SidecarsGuidProcessesGetRequest) PerPage(perPage int32) ApiV3SidecarsGuidProcessesGetRequest {
	r.perPage = &perPage
	return r
}

func (r ApiV3SidecarsGuidProcessesGetRequest) Execute() (*V3AppsGuidProcessesGet200Response, *http.Response, error) {
	return r.ApiService.V3SidecarsGuidProcessesGetExecute(r)
}

/*
V3SidecarsGuidProcessesGet List processes for a sidecar

List all processes associated with a sidecar

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The sidecar GUID
 @return ApiV3SidecarsGuidProcessesGetRequest
*/
func (a *ProcessesAPIService) V3SidecarsGuidProcessesGet(ctx context.Context, guid string) ApiV3SidecarsGuidProcessesGetRequest {
	return ApiV3SidecarsGuidProcessesGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3AppsGuidProcessesGet200Response
func (a *ProcessesAPIService) V3SidecarsGuidProcessesGetExecute(r ApiV3SidecarsGuidProcessesGetRequest) (*V3AppsGuidProcessesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3AppsGuidProcessesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProcessesAPIService.V3SidecarsGuidProcessesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/sidecars/{guid}/processes"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
