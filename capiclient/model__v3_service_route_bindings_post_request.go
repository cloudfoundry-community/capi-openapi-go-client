/*
Cloud Controller API

API specification for managing environment variable groups in Cloud Controller.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V3ServiceRouteBindingsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V3ServiceRouteBindingsPostRequest{}

// V3ServiceRouteBindingsPostRequest struct for V3ServiceRouteBindingsPostRequest
type V3ServiceRouteBindingsPostRequest struct {
	Metadata *Metadata `json:"metadata,omitempty"`
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	Relationships ServiceRouteBindingRelationships `json:"relationships"`
}

type _V3ServiceRouteBindingsPostRequest V3ServiceRouteBindingsPostRequest

// NewV3ServiceRouteBindingsPostRequest instantiates a new V3ServiceRouteBindingsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3ServiceRouteBindingsPostRequest(relationships ServiceRouteBindingRelationships) *V3ServiceRouteBindingsPostRequest {
	this := V3ServiceRouteBindingsPostRequest{}
	this.Relationships = relationships
	return &this
}

// NewV3ServiceRouteBindingsPostRequestWithDefaults instantiates a new V3ServiceRouteBindingsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3ServiceRouteBindingsPostRequestWithDefaults() *V3ServiceRouteBindingsPostRequest {
	this := V3ServiceRouteBindingsPostRequest{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V3ServiceRouteBindingsPostRequest) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3ServiceRouteBindingsPostRequest) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V3ServiceRouteBindingsPostRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *V3ServiceRouteBindingsPostRequest) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *V3ServiceRouteBindingsPostRequest) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3ServiceRouteBindingsPostRequest) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *V3ServiceRouteBindingsPostRequest) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *V3ServiceRouteBindingsPostRequest) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetRelationships returns the Relationships field value
func (o *V3ServiceRouteBindingsPostRequest) GetRelationships() ServiceRouteBindingRelationships {
	if o == nil {
		var ret ServiceRouteBindingRelationships
		return ret
	}

	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value
// and a boolean to check if the value has been set.
func (o *V3ServiceRouteBindingsPostRequest) GetRelationshipsOk() (*ServiceRouteBindingRelationships, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relationships, true
}

// SetRelationships sets field value
func (o *V3ServiceRouteBindingsPostRequest) SetRelationships(v ServiceRouteBindingRelationships) {
	o.Relationships = v
}

func (o V3ServiceRouteBindingsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V3ServiceRouteBindingsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	toSerialize["relationships"] = o.Relationships
	return toSerialize, nil
}

func (o *V3ServiceRouteBindingsPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"relationships",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV3ServiceRouteBindingsPostRequest := _V3ServiceRouteBindingsPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV3ServiceRouteBindingsPostRequest)

	if err != nil {
		return err
	}

	*o = V3ServiceRouteBindingsPostRequest(varV3ServiceRouteBindingsPostRequest)

	return err
}

type NullableV3ServiceRouteBindingsPostRequest struct {
	value *V3ServiceRouteBindingsPostRequest
	isSet bool
}

func (v NullableV3ServiceRouteBindingsPostRequest) Get() *V3ServiceRouteBindingsPostRequest {
	return v.value
}

func (v *NullableV3ServiceRouteBindingsPostRequest) Set(val *V3ServiceRouteBindingsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV3ServiceRouteBindingsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV3ServiceRouteBindingsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3ServiceRouteBindingsPostRequest(val *V3ServiceRouteBindingsPostRequest) *NullableV3ServiceRouteBindingsPostRequest {
	return &NullableV3ServiceRouteBindingsPostRequest{value: val, isSet: true}
}

func (v NullableV3ServiceRouteBindingsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3ServiceRouteBindingsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


