/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JobLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobLinks{}

// JobLinks struct for JobLinks
type JobLinks struct {
	Resource *JobLinksResource `json:"resource,omitempty"`
	Self JobLinksSelf `json:"self"`
}

type _JobLinks JobLinks

// NewJobLinks instantiates a new JobLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobLinks(self JobLinksSelf) *JobLinks {
	this := JobLinks{}
	this.Self = self
	return &this
}

// NewJobLinksWithDefaults instantiates a new JobLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobLinksWithDefaults() *JobLinks {
	this := JobLinks{}
	return &this
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *JobLinks) GetResource() JobLinksResource {
	if o == nil || IsNil(o.Resource) {
		var ret JobLinksResource
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobLinks) GetResourceOk() (*JobLinksResource, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *JobLinks) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given JobLinksResource and assigns it to the Resource field.
func (o *JobLinks) SetResource(v JobLinksResource) {
	o.Resource = &v
}

// GetSelf returns the Self field value
func (o *JobLinks) GetSelf() JobLinksSelf {
	if o == nil {
		var ret JobLinksSelf
		return ret
	}

	return o.Self
}

// GetSelfOk returns a tuple with the Self field value
// and a boolean to check if the value has been set.
func (o *JobLinks) GetSelfOk() (*JobLinksSelf, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Self, true
}

// SetSelf sets field value
func (o *JobLinks) SetSelf(v JobLinksSelf) {
	o.Self = v
}

func (o JobLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	toSerialize["self"] = o.Self
	return toSerialize, nil
}

func (o *JobLinks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"self",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobLinks := _JobLinks{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobLinks)

	if err != nil {
		return err
	}

	*o = JobLinks(varJobLinks)

	return err
}

type NullableJobLinks struct {
	value *JobLinks
	isSet bool
}

func (v NullableJobLinks) Get() *JobLinks {
	return v.value
}

func (v *NullableJobLinks) Set(val *JobLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableJobLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableJobLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobLinks(val *JobLinks) *NullableJobLinks {
	return &NullableJobLinks{value: val, isSet: true}
}

func (v NullableJobLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


