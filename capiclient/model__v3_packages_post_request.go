/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V3PackagesPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V3PackagesPostRequest{}

// V3PackagesPostRequest struct for V3PackagesPostRequest
type V3PackagesPostRequest struct {
	Data *V3PackagesPostRequestData `json:"data,omitempty"`
	Metadata *UpdateAppRequestMetadata `json:"metadata,omitempty"`
	Relationships V3PackagesPostRequestRelationships `json:"relationships"`
	// Type of package
	Type string `json:"type"`
}

type _V3PackagesPostRequest V3PackagesPostRequest

// NewV3PackagesPostRequest instantiates a new V3PackagesPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3PackagesPostRequest(relationships V3PackagesPostRequestRelationships, type_ string) *V3PackagesPostRequest {
	this := V3PackagesPostRequest{}
	this.Relationships = relationships
	this.Type = type_
	return &this
}

// NewV3PackagesPostRequestWithDefaults instantiates a new V3PackagesPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3PackagesPostRequestWithDefaults() *V3PackagesPostRequest {
	this := V3PackagesPostRequest{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *V3PackagesPostRequest) GetData() V3PackagesPostRequestData {
	if o == nil || IsNil(o.Data) {
		var ret V3PackagesPostRequestData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3PackagesPostRequest) GetDataOk() (*V3PackagesPostRequestData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *V3PackagesPostRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given V3PackagesPostRequestData and assigns it to the Data field.
func (o *V3PackagesPostRequest) SetData(v V3PackagesPostRequestData) {
	o.Data = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V3PackagesPostRequest) GetMetadata() UpdateAppRequestMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret UpdateAppRequestMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3PackagesPostRequest) GetMetadataOk() (*UpdateAppRequestMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V3PackagesPostRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given UpdateAppRequestMetadata and assigns it to the Metadata field.
func (o *V3PackagesPostRequest) SetMetadata(v UpdateAppRequestMetadata) {
	o.Metadata = &v
}

// GetRelationships returns the Relationships field value
func (o *V3PackagesPostRequest) GetRelationships() V3PackagesPostRequestRelationships {
	if o == nil {
		var ret V3PackagesPostRequestRelationships
		return ret
	}

	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value
// and a boolean to check if the value has been set.
func (o *V3PackagesPostRequest) GetRelationshipsOk() (*V3PackagesPostRequestRelationships, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relationships, true
}

// SetRelationships sets field value
func (o *V3PackagesPostRequest) SetRelationships(v V3PackagesPostRequestRelationships) {
	o.Relationships = v
}

// GetType returns the Type field value
func (o *V3PackagesPostRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *V3PackagesPostRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *V3PackagesPostRequest) SetType(v string) {
	o.Type = v
}

func (o V3PackagesPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V3PackagesPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["relationships"] = o.Relationships
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *V3PackagesPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"relationships",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV3PackagesPostRequest := _V3PackagesPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV3PackagesPostRequest)

	if err != nil {
		return err
	}

	*o = V3PackagesPostRequest(varV3PackagesPostRequest)

	return err
}

type NullableV3PackagesPostRequest struct {
	value *V3PackagesPostRequest
	isSet bool
}

func (v NullableV3PackagesPostRequest) Get() *V3PackagesPostRequest {
	return v.value
}

func (v *NullableV3PackagesPostRequest) Set(val *V3PackagesPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV3PackagesPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV3PackagesPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3PackagesPostRequest(val *V3PackagesPostRequest) *NullableV3PackagesPostRequest {
	return &NullableV3PackagesPostRequest{value: val, isSet: true}
}

func (v NullableV3PackagesPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3PackagesPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


