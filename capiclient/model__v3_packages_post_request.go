/*
Cloud Controller API

API specification for managing environment variable groups in Cloud Controller.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
)

// checks if the V3PackagesPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V3PackagesPostRequest{}

// V3PackagesPostRequest struct for V3PackagesPostRequest
type V3PackagesPostRequest struct {
	Data *V3PackagesPostRequestData `json:"data,omitempty"`
	Metadata *V3PackagesPostRequestMetadata `json:"metadata,omitempty"`
	Relationships *V3PackagesPostRequestRelationships `json:"relationships,omitempty"`
	// Type of the package; valid values are bits, docker
	Type *string `json:"type,omitempty"`
}

// NewV3PackagesPostRequest instantiates a new V3PackagesPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3PackagesPostRequest() *V3PackagesPostRequest {
	this := V3PackagesPostRequest{}
	return &this
}

// NewV3PackagesPostRequestWithDefaults instantiates a new V3PackagesPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3PackagesPostRequestWithDefaults() *V3PackagesPostRequest {
	this := V3PackagesPostRequest{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *V3PackagesPostRequest) GetData() V3PackagesPostRequestData {
	if o == nil || IsNil(o.Data) {
		var ret V3PackagesPostRequestData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3PackagesPostRequest) GetDataOk() (*V3PackagesPostRequestData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *V3PackagesPostRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given V3PackagesPostRequestData and assigns it to the Data field.
func (o *V3PackagesPostRequest) SetData(v V3PackagesPostRequestData) {
	o.Data = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V3PackagesPostRequest) GetMetadata() V3PackagesPostRequestMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret V3PackagesPostRequestMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3PackagesPostRequest) GetMetadataOk() (*V3PackagesPostRequestMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V3PackagesPostRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V3PackagesPostRequestMetadata and assigns it to the Metadata field.
func (o *V3PackagesPostRequest) SetMetadata(v V3PackagesPostRequestMetadata) {
	o.Metadata = &v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *V3PackagesPostRequest) GetRelationships() V3PackagesPostRequestRelationships {
	if o == nil || IsNil(o.Relationships) {
		var ret V3PackagesPostRequestRelationships
		return ret
	}
	return *o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3PackagesPostRequest) GetRelationshipsOk() (*V3PackagesPostRequestRelationships, bool) {
	if o == nil || IsNil(o.Relationships) {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *V3PackagesPostRequest) HasRelationships() bool {
	if o != nil && !IsNil(o.Relationships) {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given V3PackagesPostRequestRelationships and assigns it to the Relationships field.
func (o *V3PackagesPostRequest) SetRelationships(v V3PackagesPostRequestRelationships) {
	o.Relationships = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V3PackagesPostRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3PackagesPostRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V3PackagesPostRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *V3PackagesPostRequest) SetType(v string) {
	o.Type = &v
}

func (o V3PackagesPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V3PackagesPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Relationships) {
		toSerialize["relationships"] = o.Relationships
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableV3PackagesPostRequest struct {
	value *V3PackagesPostRequest
	isSet bool
}

func (v NullableV3PackagesPostRequest) Get() *V3PackagesPostRequest {
	return v.value
}

func (v *NullableV3PackagesPostRequest) Set(val *V3PackagesPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV3PackagesPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV3PackagesPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3PackagesPostRequest(val *V3PackagesPostRequest) *NullableV3PackagesPostRequest {
	return &NullableV3PackagesPostRequest{value: val, isSet: true}
}

func (v NullableV3PackagesPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3PackagesPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


