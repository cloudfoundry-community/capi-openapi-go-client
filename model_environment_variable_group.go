/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EnvironmentVariableGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentVariableGroup{}

// EnvironmentVariableGroup struct for EnvironmentVariableGroup
type EnvironmentVariableGroup struct {
	Links EnvironmentVariableGroupLinks `json:"links"`
	Metadata *EnvironmentVariableGroupMetadata `json:"metadata,omitempty"`
	// Name of the environment variable group
	Name string `json:"name"`
	// Timestamp when the environment variable group was last updated
	UpdatedAt time.Time `json:"updated_at"`
	// Environment variables as key-value pairs
	Var map[string]string `json:"var"`
}

type _EnvironmentVariableGroup EnvironmentVariableGroup

// NewEnvironmentVariableGroup instantiates a new EnvironmentVariableGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentVariableGroup(links EnvironmentVariableGroupLinks, name string, updatedAt time.Time, var_ map[string]string) *EnvironmentVariableGroup {
	this := EnvironmentVariableGroup{}
	this.Links = links
	this.Name = name
	this.UpdatedAt = updatedAt
	this.Var = var_
	return &this
}

// NewEnvironmentVariableGroupWithDefaults instantiates a new EnvironmentVariableGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentVariableGroupWithDefaults() *EnvironmentVariableGroup {
	this := EnvironmentVariableGroup{}
	return &this
}

// GetLinks returns the Links field value
func (o *EnvironmentVariableGroup) GetLinks() EnvironmentVariableGroupLinks {
	if o == nil {
		var ret EnvironmentVariableGroupLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *EnvironmentVariableGroup) GetLinksOk() (*EnvironmentVariableGroupLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *EnvironmentVariableGroup) SetLinks(v EnvironmentVariableGroupLinks) {
	o.Links = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *EnvironmentVariableGroup) GetMetadata() EnvironmentVariableGroupMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret EnvironmentVariableGroupMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentVariableGroup) GetMetadataOk() (*EnvironmentVariableGroupMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *EnvironmentVariableGroup) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given EnvironmentVariableGroupMetadata and assigns it to the Metadata field.
func (o *EnvironmentVariableGroup) SetMetadata(v EnvironmentVariableGroupMetadata) {
	o.Metadata = &v
}

// GetName returns the Name field value
func (o *EnvironmentVariableGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnvironmentVariableGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnvironmentVariableGroup) SetName(v string) {
	o.Name = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *EnvironmentVariableGroup) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *EnvironmentVariableGroup) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *EnvironmentVariableGroup) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetVar returns the Var field value
func (o *EnvironmentVariableGroup) GetVar() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Var
}

// GetVarOk returns a tuple with the Var field value
// and a boolean to check if the value has been set.
func (o *EnvironmentVariableGroup) GetVarOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Var, true
}

// SetVar sets field value
func (o *EnvironmentVariableGroup) SetVar(v map[string]string) {
	o.Var = v
}

func (o EnvironmentVariableGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentVariableGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["links"] = o.Links
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["name"] = o.Name
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["var"] = o.Var
	return toSerialize, nil
}

func (o *EnvironmentVariableGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"links",
		"name",
		"updated_at",
		"var",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentVariableGroup := _EnvironmentVariableGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnvironmentVariableGroup)

	if err != nil {
		return err
	}

	*o = EnvironmentVariableGroup(varEnvironmentVariableGroup)

	return err
}

type NullableEnvironmentVariableGroup struct {
	value *EnvironmentVariableGroup
	isSet bool
}

func (v NullableEnvironmentVariableGroup) Get() *EnvironmentVariableGroup {
	return v.value
}

func (v *NullableEnvironmentVariableGroup) Set(val *EnvironmentVariableGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentVariableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentVariableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentVariableGroup(val *EnvironmentVariableGroup) *NullableEnvironmentVariableGroup {
	return &NullableEnvironmentVariableGroup{value: val, isSet: true}
}

func (v NullableEnvironmentVariableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentVariableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


