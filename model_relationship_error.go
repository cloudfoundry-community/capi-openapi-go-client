/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RelationshipError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipError{}

// RelationshipError struct for RelationshipError
type RelationshipError struct {
	// Stack trace (only in development environments)
	Backtrace []string `json:"backtrace,omitempty"`
	Code float32 `json:"code"`
	// Description of the error
	Description *string `json:"description,omitempty"`
	Detail interface{} `json:"detail"`
	// Name of the error
	Error *string `json:"error,omitempty"`
	TestModeInfo *ErrorTestModeInfo `json:"test_mode_info,omitempty"`
	Title string `json:"title"`
}

type _RelationshipError RelationshipError

// NewRelationshipError instantiates a new RelationshipError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipError(code float32, detail interface{}, title string) *RelationshipError {
	this := RelationshipError{}
	this.Code = code
	this.Detail = detail
	this.Title = title
	return &this
}

// NewRelationshipErrorWithDefaults instantiates a new RelationshipError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipErrorWithDefaults() *RelationshipError {
	this := RelationshipError{}
	return &this
}

// GetBacktrace returns the Backtrace field value if set, zero value otherwise.
func (o *RelationshipError) GetBacktrace() []string {
	if o == nil || IsNil(o.Backtrace) {
		var ret []string
		return ret
	}
	return o.Backtrace
}

// GetBacktraceOk returns a tuple with the Backtrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipError) GetBacktraceOk() ([]string, bool) {
	if o == nil || IsNil(o.Backtrace) {
		return nil, false
	}
	return o.Backtrace, true
}

// HasBacktrace returns a boolean if a field has been set.
func (o *RelationshipError) HasBacktrace() bool {
	if o != nil && !IsNil(o.Backtrace) {
		return true
	}

	return false
}

// SetBacktrace gets a reference to the given []string and assigns it to the Backtrace field.
func (o *RelationshipError) SetBacktrace(v []string) {
	o.Backtrace = v
}

// GetCode returns the Code field value
func (o *RelationshipError) GetCode() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *RelationshipError) GetCodeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *RelationshipError) SetCode(v float32) {
	o.Code = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RelationshipError) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipError) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RelationshipError) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RelationshipError) SetDescription(v string) {
	o.Description = &v
}

// GetDetail returns the Detail field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *RelationshipError) GetDetail() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RelationshipError) GetDetailOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *RelationshipError) SetDetail(v interface{}) {
	o.Detail = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *RelationshipError) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipError) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *RelationshipError) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *RelationshipError) SetError(v string) {
	o.Error = &v
}

// GetTestModeInfo returns the TestModeInfo field value if set, zero value otherwise.
func (o *RelationshipError) GetTestModeInfo() ErrorTestModeInfo {
	if o == nil || IsNil(o.TestModeInfo) {
		var ret ErrorTestModeInfo
		return ret
	}
	return *o.TestModeInfo
}

// GetTestModeInfoOk returns a tuple with the TestModeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipError) GetTestModeInfoOk() (*ErrorTestModeInfo, bool) {
	if o == nil || IsNil(o.TestModeInfo) {
		return nil, false
	}
	return o.TestModeInfo, true
}

// HasTestModeInfo returns a boolean if a field has been set.
func (o *RelationshipError) HasTestModeInfo() bool {
	if o != nil && !IsNil(o.TestModeInfo) {
		return true
	}

	return false
}

// SetTestModeInfo gets a reference to the given ErrorTestModeInfo and assigns it to the TestModeInfo field.
func (o *RelationshipError) SetTestModeInfo(v ErrorTestModeInfo) {
	o.TestModeInfo = &v
}

// GetTitle returns the Title field value
func (o *RelationshipError) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *RelationshipError) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *RelationshipError) SetTitle(v string) {
	o.Title = v
}

func (o RelationshipError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Backtrace) {
		toSerialize["backtrace"] = o.Backtrace
	}
	toSerialize["code"] = o.Code
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.Detail != nil {
		toSerialize["detail"] = o.Detail
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.TestModeInfo) {
		toSerialize["test_mode_info"] = o.TestModeInfo
	}
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

func (o *RelationshipError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"detail",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRelationshipError := _RelationshipError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRelationshipError)

	if err != nil {
		return err
	}

	*o = RelationshipError(varRelationshipError)

	return err
}

type NullableRelationshipError struct {
	value *RelationshipError
	isSet bool
}

func (v NullableRelationshipError) Get() *RelationshipError {
	return v.value
}

func (v *NullableRelationshipError) Set(val *RelationshipError) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipError) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipError(val *RelationshipError) *NullableRelationshipError {
	return &NullableRelationshipError{value: val, isSet: true}
}

func (v NullableRelationshipError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


