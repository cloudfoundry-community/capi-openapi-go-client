/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type RoutesAPI interface {

	/*
	V3RoutesGet List routes

	Retrieve a paginated list of routes the user has access to

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3RoutesGetRequest
	*/
	V3RoutesGet(ctx context.Context) ApiV3RoutesGetRequest

	// V3RoutesGetExecute executes the request
	//  @return V3RoutesGet200Response
	V3RoutesGetExecute(r ApiV3RoutesGetRequest) (*V3RoutesGet200Response, *http.Response, error)

	/*
	V3RoutesGuidDelete Delete a route

	Delete a route. This will unmap all apps associated with the route.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidDeleteRequest
	*/
	V3RoutesGuidDelete(ctx context.Context, guid string) ApiV3RoutesGuidDeleteRequest

	// V3RoutesGuidDeleteExecute executes the request
	V3RoutesGuidDeleteExecute(r ApiV3RoutesGuidDeleteRequest) (*http.Response, error)

	/*
	V3RoutesGuidDestinationsDestinationGuidDelete Remove destination from a route

	Remove a specific destination from a route

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@param destinationGuid The destination GUID
	@return ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest
	*/
	V3RoutesGuidDestinationsDestinationGuidDelete(ctx context.Context, guid string, destinationGuid string) ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest

	// V3RoutesGuidDestinationsDestinationGuidDeleteExecute executes the request
	V3RoutesGuidDestinationsDestinationGuidDeleteExecute(r ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest) (*http.Response, error)

	/*
	V3RoutesGuidDestinationsGet List destinations for a route

	List all destinations (app/port combinations) mapped to a route

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidDestinationsGetRequest
	*/
	V3RoutesGuidDestinationsGet(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsGetRequest

	// V3RoutesGuidDestinationsGetExecute executes the request
	//  @return V3RoutesGuidDestinationsGet200Response
	V3RoutesGuidDestinationsGetExecute(r ApiV3RoutesGuidDestinationsGetRequest) (*V3RoutesGuidDestinationsGet200Response, *http.Response, error)

	/*
	V3RoutesGuidDestinationsPatch Update destinations for a route

	Update or replace destinations for a route

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidDestinationsPatchRequest
	*/
	V3RoutesGuidDestinationsPatch(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsPatchRequest

	// V3RoutesGuidDestinationsPatchExecute executes the request
	//  @return V3RoutesGuidDestinationsPost200Response
	V3RoutesGuidDestinationsPatchExecute(r ApiV3RoutesGuidDestinationsPatchRequest) (*V3RoutesGuidDestinationsPost200Response, *http.Response, error)

	/*
	V3RoutesGuidDestinationsPost Add destinations to a route

	Add one or more destinations (app/port combinations) to a route

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidDestinationsPostRequest
	*/
	V3RoutesGuidDestinationsPost(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsPostRequest

	// V3RoutesGuidDestinationsPostExecute executes the request
	//  @return V3RoutesGuidDestinationsPost200Response
	V3RoutesGuidDestinationsPostExecute(r ApiV3RoutesGuidDestinationsPostRequest) (*V3RoutesGuidDestinationsPost200Response, *http.Response, error)

	/*
	V3RoutesGuidGet Get a route

	Retrieve details of a specific route

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidGetRequest
	*/
	V3RoutesGuidGet(ctx context.Context, guid string) ApiV3RoutesGuidGetRequest

	// V3RoutesGuidGetExecute executes the request
	//  @return Route
	V3RoutesGuidGetExecute(r ApiV3RoutesGuidGetRequest) (*Route, *http.Response, error)

	/*
	V3RoutesGuidPatch Update a route

	Update a route's metadata

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidPatchRequest
	*/
	V3RoutesGuidPatch(ctx context.Context, guid string) ApiV3RoutesGuidPatchRequest

	// V3RoutesGuidPatchExecute executes the request
	//  @return Route
	V3RoutesGuidPatchExecute(r ApiV3RoutesGuidPatchRequest) (*Route, *http.Response, error)

	/*
	V3RoutesGuidRelationshipsSharedSpacesGet List shared spaces for a route (experimental)

	List all spaces that a route is shared with. This is an experimental feature.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest
	*/
	V3RoutesGuidRelationshipsSharedSpacesGet(ctx context.Context, guid string) ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest

	// V3RoutesGuidRelationshipsSharedSpacesGetExecute executes the request
	//  @return V3RoutesGuidRelationshipsSharedSpacesGet200Response
	V3RoutesGuidRelationshipsSharedSpacesGetExecute(r ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest) (*V3RoutesGuidRelationshipsSharedSpacesGet200Response, *http.Response, error)

	/*
	V3RoutesGuidRelationshipsSpacePatch Share a route to another space (experimental)

	Share a route with another space, allowing apps in that space to be mapped to the route. This is an experimental feature.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidRelationshipsSpacePatchRequest
	*/
	V3RoutesGuidRelationshipsSpacePatch(ctx context.Context, guid string) ApiV3RoutesGuidRelationshipsSpacePatchRequest

	// V3RoutesGuidRelationshipsSpacePatchExecute executes the request
	//  @return V3RoutesGuidRelationshipsSpacePatch200Response
	V3RoutesGuidRelationshipsSpacePatchExecute(r ApiV3RoutesGuidRelationshipsSpacePatchRequest) (*V3RoutesGuidRelationshipsSpacePatch200Response, *http.Response, error)

	/*
	V3RoutesGuidTransferOwnerPost Transfer route ownership

	Transfer ownership of a route to another space

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The route GUID
	@return ApiV3RoutesGuidTransferOwnerPostRequest
	*/
	V3RoutesGuidTransferOwnerPost(ctx context.Context, guid string) ApiV3RoutesGuidTransferOwnerPostRequest

	// V3RoutesGuidTransferOwnerPostExecute executes the request
	//  @return Route
	V3RoutesGuidTransferOwnerPostExecute(r ApiV3RoutesGuidTransferOwnerPostRequest) (*Route, *http.Response, error)

	/*
	V3RoutesPost Create a route

	Create a new route in a space

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3RoutesPostRequest
	*/
	V3RoutesPost(ctx context.Context) ApiV3RoutesPostRequest

	// V3RoutesPostExecute executes the request
	//  @return Route
	V3RoutesPostExecute(r ApiV3RoutesPostRequest) (*Route, *http.Response, error)
}

// RoutesAPIService RoutesAPI service
type RoutesAPIService service

type ApiV3RoutesGetRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	page *int32
	perPage *int32
	orderBy *string
	appGuids *string
	domainGuids *string
	spaceGuids *string
	organizationGuids *string
	hosts *string
	paths *string
	ports *string
	serviceInstanceGuids *string
	labelSelector *string
	include *string
	createdAts *string
	updatedAts *string
	fields *string
}

// Page number for pagination
func (r ApiV3RoutesGetRequest) Page(page int32) ApiV3RoutesGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3RoutesGetRequest) PerPage(perPage int32) ApiV3RoutesGetRequest {
	r.perPage = &perPage
	return r
}

// Field to sort results by
func (r ApiV3RoutesGetRequest) OrderBy(orderBy string) ApiV3RoutesGetRequest {
	r.orderBy = &orderBy
	return r
}

// Filter by app GUIDs (comma-separated)
func (r ApiV3RoutesGetRequest) AppGuids(appGuids string) ApiV3RoutesGetRequest {
	r.appGuids = &appGuids
	return r
}

// Filter by domain GUIDs (comma-separated)
func (r ApiV3RoutesGetRequest) DomainGuids(domainGuids string) ApiV3RoutesGetRequest {
	r.domainGuids = &domainGuids
	return r
}

// Filter by space GUIDs (comma-separated)
func (r ApiV3RoutesGetRequest) SpaceGuids(spaceGuids string) ApiV3RoutesGetRequest {
	r.spaceGuids = &spaceGuids
	return r
}

// Filter by organization GUIDs (comma-separated)
func (r ApiV3RoutesGetRequest) OrganizationGuids(organizationGuids string) ApiV3RoutesGetRequest {
	r.organizationGuids = &organizationGuids
	return r
}

// Filter by hostnames (comma-separated)
func (r ApiV3RoutesGetRequest) Hosts(hosts string) ApiV3RoutesGetRequest {
	r.hosts = &hosts
	return r
}

// Filter by paths (comma-separated)
func (r ApiV3RoutesGetRequest) Paths(paths string) ApiV3RoutesGetRequest {
	r.paths = &paths
	return r
}

// Filter by ports (comma-separated)
func (r ApiV3RoutesGetRequest) Ports(ports string) ApiV3RoutesGetRequest {
	r.ports = &ports
	return r
}

// Filter by service instance GUIDs (comma-separated)
func (r ApiV3RoutesGetRequest) ServiceInstanceGuids(serviceInstanceGuids string) ApiV3RoutesGetRequest {
	r.serviceInstanceGuids = &serviceInstanceGuids
	return r
}

// Filter by labels using label selector syntax
func (r ApiV3RoutesGetRequest) LabelSelector(labelSelector string) ApiV3RoutesGetRequest {
	r.labelSelector = &labelSelector
	return r
}

// Include related resources
func (r ApiV3RoutesGetRequest) Include(include string) ApiV3RoutesGetRequest {
	r.include = &include
	return r
}

// Filter by creation timestamp. Supports multiple formats: - Range: created_ats&#x3D;2020-01-01T00:00:00Z,2020-12-31T23:59:59Z - Greater than: created_ats[gt]&#x3D;2020-01-01T00:00:00Z - Greater than or equal: created_ats[gte]&#x3D;2020-01-01T00:00:00Z - Less than: created_ats[lt]&#x3D;2020-12-31T23:59:59Z - Less than or equal: created_ats[lte]&#x3D;2020-12-31T23:59:59Z 
func (r ApiV3RoutesGetRequest) CreatedAts(createdAts string) ApiV3RoutesGetRequest {
	r.createdAts = &createdAts
	return r
}

// Filter by update timestamp. Supports multiple formats: - Range: updated_ats&#x3D;2020-01-01T00:00:00Z,2020-12-31T23:59:59Z - Greater than: updated_ats[gt]&#x3D;2020-01-01T00:00:00Z - Greater than or equal: updated_ats[gte]&#x3D;2020-01-01T00:00:00Z - Less than: updated_ats[lt]&#x3D;2020-12-31T23:59:59Z - Less than or equal: updated_ats[lte]&#x3D;2020-12-31T23:59:59Z 
func (r ApiV3RoutesGetRequest) UpdatedAts(updatedAts string) ApiV3RoutesGetRequest {
	r.updatedAts = &updatedAts
	return r
}

// Fields to include in the response. Use dot notation for nested fields. Example: fields[routes]&#x3D;guid,host,path or fields[domain]&#x3D;name,guid 
func (r ApiV3RoutesGetRequest) Fields(fields string) ApiV3RoutesGetRequest {
	r.fields = &fields
	return r
}

func (r ApiV3RoutesGetRequest) Execute() (*V3RoutesGet200Response, *http.Response, error) {
	return r.ApiService.V3RoutesGetExecute(r)
}

/*
V3RoutesGet List routes

Retrieve a paginated list of routes the user has access to

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3RoutesGetRequest
*/
func (a *RoutesAPIService) V3RoutesGet(ctx context.Context) ApiV3RoutesGetRequest {
	return ApiV3RoutesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V3RoutesGet200Response
func (a *RoutesAPIService) V3RoutesGetExecute(r ApiV3RoutesGetRequest) (*V3RoutesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3RoutesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	}
	if r.appGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_guids", r.appGuids, "form", "")
	}
	if r.domainGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domain_guids", r.domainGuids, "form", "")
	}
	if r.spaceGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "space_guids", r.spaceGuids, "form", "")
	}
	if r.organizationGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organization_guids", r.organizationGuids, "form", "")
	}
	if r.hosts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hosts", r.hosts, "form", "")
	}
	if r.paths != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paths", r.paths, "form", "")
	}
	if r.ports != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ports", r.ports, "form", "")
	}
	if r.serviceInstanceGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "service_instance_guids", r.serviceInstanceGuids, "form", "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label_selector", r.labelSelector, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "")
	}
	if r.createdAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_ats", r.createdAts, "form", "")
	}
	if r.updatedAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_ats", r.updatedAts, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesGuidDeleteRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	guid string
}

func (r ApiV3RoutesGuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3RoutesGuidDeleteExecute(r)
}

/*
V3RoutesGuidDelete Delete a route

Delete a route. This will unmap all apps associated with the route.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidDeleteRequest
*/
func (a *RoutesAPIService) V3RoutesGuidDelete(ctx context.Context, guid string) ApiV3RoutesGuidDeleteRequest {
	return ApiV3RoutesGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
func (a *RoutesAPIService) V3RoutesGuidDeleteExecute(r ApiV3RoutesGuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesGuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	guid string
	destinationGuid string
}

func (r ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3RoutesGuidDestinationsDestinationGuidDeleteExecute(r)
}

/*
V3RoutesGuidDestinationsDestinationGuidDelete Remove destination from a route

Remove a specific destination from a route

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @param destinationGuid The destination GUID
 @return ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest
*/
func (a *RoutesAPIService) V3RoutesGuidDestinationsDestinationGuidDelete(ctx context.Context, guid string, destinationGuid string) ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest {
	return ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
		destinationGuid: destinationGuid,
	}
}

// Execute executes the request
func (a *RoutesAPIService) V3RoutesGuidDestinationsDestinationGuidDeleteExecute(r ApiV3RoutesGuidDestinationsDestinationGuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesGuidDestinationsDestinationGuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/destinations/{destination_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"destination_guid"+"}", url.PathEscape(parameterValueToString(r.destinationGuid, "destinationGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV3RoutesGuidDestinationsGetRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	guid string
	page *int32
	perPage *int32
	appGuids *string
}

// Page number for pagination
func (r ApiV3RoutesGuidDestinationsGetRequest) Page(page int32) ApiV3RoutesGuidDestinationsGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3RoutesGuidDestinationsGetRequest) PerPage(perPage int32) ApiV3RoutesGuidDestinationsGetRequest {
	r.perPage = &perPage
	return r
}

// Filter by app GUIDs (comma-separated)
func (r ApiV3RoutesGuidDestinationsGetRequest) AppGuids(appGuids string) ApiV3RoutesGuidDestinationsGetRequest {
	r.appGuids = &appGuids
	return r
}

func (r ApiV3RoutesGuidDestinationsGetRequest) Execute() (*V3RoutesGuidDestinationsGet200Response, *http.Response, error) {
	return r.ApiService.V3RoutesGuidDestinationsGetExecute(r)
}

/*
V3RoutesGuidDestinationsGet List destinations for a route

List all destinations (app/port combinations) mapped to a route

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidDestinationsGetRequest
*/
func (a *RoutesAPIService) V3RoutesGuidDestinationsGet(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsGetRequest {
	return ApiV3RoutesGuidDestinationsGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3RoutesGuidDestinationsGet200Response
func (a *RoutesAPIService) V3RoutesGuidDestinationsGetExecute(r ApiV3RoutesGuidDestinationsGetRequest) (*V3RoutesGuidDestinationsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3RoutesGuidDestinationsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesGuidDestinationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/destinations"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	}
	if r.appGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_guids", r.appGuids, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesGuidDestinationsPatchRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	guid string
	v3RoutesGuidDestinationsPatchRequest *V3RoutesGuidDestinationsPatchRequest
}

func (r ApiV3RoutesGuidDestinationsPatchRequest) V3RoutesGuidDestinationsPatchRequest(v3RoutesGuidDestinationsPatchRequest V3RoutesGuidDestinationsPatchRequest) ApiV3RoutesGuidDestinationsPatchRequest {
	r.v3RoutesGuidDestinationsPatchRequest = &v3RoutesGuidDestinationsPatchRequest
	return r
}

func (r ApiV3RoutesGuidDestinationsPatchRequest) Execute() (*V3RoutesGuidDestinationsPost200Response, *http.Response, error) {
	return r.ApiService.V3RoutesGuidDestinationsPatchExecute(r)
}

/*
V3RoutesGuidDestinationsPatch Update destinations for a route

Update or replace destinations for a route

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidDestinationsPatchRequest
*/
func (a *RoutesAPIService) V3RoutesGuidDestinationsPatch(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsPatchRequest {
	return ApiV3RoutesGuidDestinationsPatchRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3RoutesGuidDestinationsPost200Response
func (a *RoutesAPIService) V3RoutesGuidDestinationsPatchExecute(r ApiV3RoutesGuidDestinationsPatchRequest) (*V3RoutesGuidDestinationsPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3RoutesGuidDestinationsPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesGuidDestinationsPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/destinations"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3RoutesGuidDestinationsPatchRequest == nil {
		return localVarReturnValue, nil, reportError("v3RoutesGuidDestinationsPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3RoutesGuidDestinationsPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesGuidDestinationsPostRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	guid string
	v3RoutesGuidDestinationsPostRequest *V3RoutesGuidDestinationsPostRequest
}

func (r ApiV3RoutesGuidDestinationsPostRequest) V3RoutesGuidDestinationsPostRequest(v3RoutesGuidDestinationsPostRequest V3RoutesGuidDestinationsPostRequest) ApiV3RoutesGuidDestinationsPostRequest {
	r.v3RoutesGuidDestinationsPostRequest = &v3RoutesGuidDestinationsPostRequest
	return r
}

func (r ApiV3RoutesGuidDestinationsPostRequest) Execute() (*V3RoutesGuidDestinationsPost200Response, *http.Response, error) {
	return r.ApiService.V3RoutesGuidDestinationsPostExecute(r)
}

/*
V3RoutesGuidDestinationsPost Add destinations to a route

Add one or more destinations (app/port combinations) to a route

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidDestinationsPostRequest
*/
func (a *RoutesAPIService) V3RoutesGuidDestinationsPost(ctx context.Context, guid string) ApiV3RoutesGuidDestinationsPostRequest {
	return ApiV3RoutesGuidDestinationsPostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3RoutesGuidDestinationsPost200Response
func (a *RoutesAPIService) V3RoutesGuidDestinationsPostExecute(r ApiV3RoutesGuidDestinationsPostRequest) (*V3RoutesGuidDestinationsPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3RoutesGuidDestinationsPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesGuidDestinationsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/destinations"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3RoutesGuidDestinationsPostRequest == nil {
		return localVarReturnValue, nil, reportError("v3RoutesGuidDestinationsPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3RoutesGuidDestinationsPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesGuidGetRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	guid string
	include *string
}

// Include related resources
func (r ApiV3RoutesGuidGetRequest) Include(include string) ApiV3RoutesGuidGetRequest {
	r.include = &include
	return r
}

func (r ApiV3RoutesGuidGetRequest) Execute() (*Route, *http.Response, error) {
	return r.ApiService.V3RoutesGuidGetExecute(r)
}

/*
V3RoutesGuidGet Get a route

Retrieve details of a specific route

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidGetRequest
*/
func (a *RoutesAPIService) V3RoutesGuidGet(ctx context.Context, guid string) ApiV3RoutesGuidGetRequest {
	return ApiV3RoutesGuidGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return Route
func (a *RoutesAPIService) V3RoutesGuidGetExecute(r ApiV3RoutesGuidGetRequest) (*Route, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Route
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesGuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesGuidPatchRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	guid string
	v3PackagesGuidPatchRequest *V3PackagesGuidPatchRequest
}

func (r ApiV3RoutesGuidPatchRequest) V3PackagesGuidPatchRequest(v3PackagesGuidPatchRequest V3PackagesGuidPatchRequest) ApiV3RoutesGuidPatchRequest {
	r.v3PackagesGuidPatchRequest = &v3PackagesGuidPatchRequest
	return r
}

func (r ApiV3RoutesGuidPatchRequest) Execute() (*Route, *http.Response, error) {
	return r.ApiService.V3RoutesGuidPatchExecute(r)
}

/*
V3RoutesGuidPatch Update a route

Update a route's metadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidPatchRequest
*/
func (a *RoutesAPIService) V3RoutesGuidPatch(ctx context.Context, guid string) ApiV3RoutesGuidPatchRequest {
	return ApiV3RoutesGuidPatchRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return Route
func (a *RoutesAPIService) V3RoutesGuidPatchExecute(r ApiV3RoutesGuidPatchRequest) (*Route, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Route
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesGuidPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3PackagesGuidPatchRequest == nil {
		return localVarReturnValue, nil, reportError("v3PackagesGuidPatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3PackagesGuidPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	guid string
}

func (r ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest) Execute() (*V3RoutesGuidRelationshipsSharedSpacesGet200Response, *http.Response, error) {
	return r.ApiService.V3RoutesGuidRelationshipsSharedSpacesGetExecute(r)
}

/*
V3RoutesGuidRelationshipsSharedSpacesGet List shared spaces for a route (experimental)

List all spaces that a route is shared with. This is an experimental feature.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest
*/
func (a *RoutesAPIService) V3RoutesGuidRelationshipsSharedSpacesGet(ctx context.Context, guid string) ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest {
	return ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3RoutesGuidRelationshipsSharedSpacesGet200Response
func (a *RoutesAPIService) V3RoutesGuidRelationshipsSharedSpacesGetExecute(r ApiV3RoutesGuidRelationshipsSharedSpacesGetRequest) (*V3RoutesGuidRelationshipsSharedSpacesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3RoutesGuidRelationshipsSharedSpacesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesGuidRelationshipsSharedSpacesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/relationships/shared_spaces"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesGuidRelationshipsSpacePatchRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	guid string
	v3RoutesGuidRelationshipsSpacePatchRequest *V3RoutesGuidRelationshipsSpacePatchRequest
}

func (r ApiV3RoutesGuidRelationshipsSpacePatchRequest) V3RoutesGuidRelationshipsSpacePatchRequest(v3RoutesGuidRelationshipsSpacePatchRequest V3RoutesGuidRelationshipsSpacePatchRequest) ApiV3RoutesGuidRelationshipsSpacePatchRequest {
	r.v3RoutesGuidRelationshipsSpacePatchRequest = &v3RoutesGuidRelationshipsSpacePatchRequest
	return r
}

func (r ApiV3RoutesGuidRelationshipsSpacePatchRequest) Execute() (*V3RoutesGuidRelationshipsSpacePatch200Response, *http.Response, error) {
	return r.ApiService.V3RoutesGuidRelationshipsSpacePatchExecute(r)
}

/*
V3RoutesGuidRelationshipsSpacePatch Share a route to another space (experimental)

Share a route with another space, allowing apps in that space to be mapped to the route. This is an experimental feature.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidRelationshipsSpacePatchRequest
*/
func (a *RoutesAPIService) V3RoutesGuidRelationshipsSpacePatch(ctx context.Context, guid string) ApiV3RoutesGuidRelationshipsSpacePatchRequest {
	return ApiV3RoutesGuidRelationshipsSpacePatchRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3RoutesGuidRelationshipsSpacePatch200Response
func (a *RoutesAPIService) V3RoutesGuidRelationshipsSpacePatchExecute(r ApiV3RoutesGuidRelationshipsSpacePatchRequest) (*V3RoutesGuidRelationshipsSpacePatch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3RoutesGuidRelationshipsSpacePatch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesGuidRelationshipsSpacePatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/relationships/space"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3RoutesGuidRelationshipsSpacePatchRequest == nil {
		return localVarReturnValue, nil, reportError("v3RoutesGuidRelationshipsSpacePatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3RoutesGuidRelationshipsSpacePatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesGuidTransferOwnerPostRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	guid string
	v3RoutesGuidTransferOwnerPostRequest *V3RoutesGuidTransferOwnerPostRequest
}

func (r ApiV3RoutesGuidTransferOwnerPostRequest) V3RoutesGuidTransferOwnerPostRequest(v3RoutesGuidTransferOwnerPostRequest V3RoutesGuidTransferOwnerPostRequest) ApiV3RoutesGuidTransferOwnerPostRequest {
	r.v3RoutesGuidTransferOwnerPostRequest = &v3RoutesGuidTransferOwnerPostRequest
	return r
}

func (r ApiV3RoutesGuidTransferOwnerPostRequest) Execute() (*Route, *http.Response, error) {
	return r.ApiService.V3RoutesGuidTransferOwnerPostExecute(r)
}

/*
V3RoutesGuidTransferOwnerPost Transfer route ownership

Transfer ownership of a route to another space

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The route GUID
 @return ApiV3RoutesGuidTransferOwnerPostRequest
*/
func (a *RoutesAPIService) V3RoutesGuidTransferOwnerPost(ctx context.Context, guid string) ApiV3RoutesGuidTransferOwnerPostRequest {
	return ApiV3RoutesGuidTransferOwnerPostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return Route
func (a *RoutesAPIService) V3RoutesGuidTransferOwnerPostExecute(r ApiV3RoutesGuidTransferOwnerPostRequest) (*Route, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Route
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesGuidTransferOwnerPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes/{guid}/transfer_owner"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3RoutesGuidTransferOwnerPostRequest == nil {
		return localVarReturnValue, nil, reportError("v3RoutesGuidTransferOwnerPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3RoutesGuidTransferOwnerPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3RoutesPostRequest struct {
	ctx context.Context
	ApiService RoutesAPI
	v3RoutesPostRequest *V3RoutesPostRequest
}

func (r ApiV3RoutesPostRequest) V3RoutesPostRequest(v3RoutesPostRequest V3RoutesPostRequest) ApiV3RoutesPostRequest {
	r.v3RoutesPostRequest = &v3RoutesPostRequest
	return r
}

func (r ApiV3RoutesPostRequest) Execute() (*Route, *http.Response, error) {
	return r.ApiService.V3RoutesPostExecute(r)
}

/*
V3RoutesPost Create a route

Create a new route in a space

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3RoutesPostRequest
*/
func (a *RoutesAPIService) V3RoutesPost(ctx context.Context) ApiV3RoutesPostRequest {
	return ApiV3RoutesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Route
func (a *RoutesAPIService) V3RoutesPostExecute(r ApiV3RoutesPostRequest) (*Route, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Route
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutesAPIService.V3RoutesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/routes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3RoutesPostRequest == nil {
		return localVarReturnValue, nil, reportError("v3RoutesPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3RoutesPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
