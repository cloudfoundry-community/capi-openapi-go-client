/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ServicePlanVisibilityAPI interface {

	/*
	V3ServicePlansGuidVisibilityGet Get a service plan visibility

	Retrieves the service plan visibility for a given plan.

Service plan visibility controls which organizations and spaces can access
a particular service plan. Plans can be public, admin-only, organization-restricted,
or space-restricted.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The service plan GUID
	@return ApiV3ServicePlansGuidVisibilityGetRequest
	*/
	V3ServicePlansGuidVisibilityGet(ctx context.Context, guid string) ApiV3ServicePlansGuidVisibilityGetRequest

	// V3ServicePlansGuidVisibilityGetExecute executes the request
	//  @return ServicePlanVisibility
	V3ServicePlansGuidVisibilityGetExecute(r ApiV3ServicePlansGuidVisibilityGetRequest) (*ServicePlanVisibility, *http.Response, error)

	/*
	V3ServicePlansGuidVisibilityOrganizationGuidDelete Remove organization from a service plan visibility

	Removes an organization from a service plan visibility list of organizations.

This endpoint is only available for service plans that are organization-restricted.
Only administrators can modify service plan visibility.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The service plan GUID
	@param organizationGuid The organization GUID to remove
	@return ApiV3ServicePlansGuidVisibilityOrganizationGuidDeleteRequest
	*/
	V3ServicePlansGuidVisibilityOrganizationGuidDelete(ctx context.Context, guid string, organizationGuid string) ApiV3ServicePlansGuidVisibilityOrganizationGuidDeleteRequest

	// V3ServicePlansGuidVisibilityOrganizationGuidDeleteExecute executes the request
	V3ServicePlansGuidVisibilityOrganizationGuidDeleteExecute(r ApiV3ServicePlansGuidVisibilityOrganizationGuidDeleteRequest) (*http.Response, error)

	/*
	V3ServicePlansGuidVisibilityPatch Update a service plan visibility

	Updates a service plan visibility.

This replaces the existing list of organizations when the service plan
is organization-visible. Only administrators can modify service plan visibility.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The service plan GUID
	@return ApiV3ServicePlansGuidVisibilityPatchRequest
	*/
	V3ServicePlansGuidVisibilityPatch(ctx context.Context, guid string) ApiV3ServicePlansGuidVisibilityPatchRequest

	// V3ServicePlansGuidVisibilityPatchExecute executes the request
	//  @return ServicePlanVisibility
	V3ServicePlansGuidVisibilityPatchExecute(r ApiV3ServicePlansGuidVisibilityPatchRequest) (*ServicePlanVisibility, *http.Response, error)

	/*
	V3ServicePlansGuidVisibilityPost Apply a service plan visibility

	Applies a service plan visibility.

This appends to the existing list of organizations when the service plan
is organization-visible. Only administrators can modify service plan visibility.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The service plan GUID
	@return ApiV3ServicePlansGuidVisibilityPostRequest
	*/
	V3ServicePlansGuidVisibilityPost(ctx context.Context, guid string) ApiV3ServicePlansGuidVisibilityPostRequest

	// V3ServicePlansGuidVisibilityPostExecute executes the request
	//  @return ServicePlanVisibility
	V3ServicePlansGuidVisibilityPostExecute(r ApiV3ServicePlansGuidVisibilityPostRequest) (*ServicePlanVisibility, *http.Response, error)
}

// ServicePlanVisibilityAPIService ServicePlanVisibilityAPI service
type ServicePlanVisibilityAPIService service

type ApiV3ServicePlansGuidVisibilityGetRequest struct {
	ctx context.Context
	ApiService ServicePlanVisibilityAPI
	guid string
}

func (r ApiV3ServicePlansGuidVisibilityGetRequest) Execute() (*ServicePlanVisibility, *http.Response, error) {
	return r.ApiService.V3ServicePlansGuidVisibilityGetExecute(r)
}

/*
V3ServicePlansGuidVisibilityGet Get a service plan visibility

Retrieves the service plan visibility for a given plan.

Service plan visibility controls which organizations and spaces can access
a particular service plan. Plans can be public, admin-only, organization-restricted,
or space-restricted.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The service plan GUID
 @return ApiV3ServicePlansGuidVisibilityGetRequest
*/
func (a *ServicePlanVisibilityAPIService) V3ServicePlansGuidVisibilityGet(ctx context.Context, guid string) ApiV3ServicePlansGuidVisibilityGetRequest {
	return ApiV3ServicePlansGuidVisibilityGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return ServicePlanVisibility
func (a *ServicePlanVisibilityAPIService) V3ServicePlansGuidVisibilityGetExecute(r ApiV3ServicePlansGuidVisibilityGetRequest) (*ServicePlanVisibility, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServicePlanVisibility
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePlanVisibilityAPIService.V3ServicePlansGuidVisibilityGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/service_plans/{guid}/visibility"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3ServicePlansGuidVisibilityOrganizationGuidDeleteRequest struct {
	ctx context.Context
	ApiService ServicePlanVisibilityAPI
	guid string
	organizationGuid string
}

func (r ApiV3ServicePlansGuidVisibilityOrganizationGuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3ServicePlansGuidVisibilityOrganizationGuidDeleteExecute(r)
}

/*
V3ServicePlansGuidVisibilityOrganizationGuidDelete Remove organization from a service plan visibility

Removes an organization from a service plan visibility list of organizations.

This endpoint is only available for service plans that are organization-restricted.
Only administrators can modify service plan visibility.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The service plan GUID
 @param organizationGuid The organization GUID to remove
 @return ApiV3ServicePlansGuidVisibilityOrganizationGuidDeleteRequest
*/
func (a *ServicePlanVisibilityAPIService) V3ServicePlansGuidVisibilityOrganizationGuidDelete(ctx context.Context, guid string, organizationGuid string) ApiV3ServicePlansGuidVisibilityOrganizationGuidDeleteRequest {
	return ApiV3ServicePlansGuidVisibilityOrganizationGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
		organizationGuid: organizationGuid,
	}
}

// Execute executes the request
func (a *ServicePlanVisibilityAPIService) V3ServicePlansGuidVisibilityOrganizationGuidDeleteExecute(r ApiV3ServicePlansGuidVisibilityOrganizationGuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePlanVisibilityAPIService.V3ServicePlansGuidVisibilityOrganizationGuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/service_plans/{guid}/visibility/{organization_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"organization_guid"+"}", url.PathEscape(parameterValueToString(r.organizationGuid, "organizationGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV3ServicePlansGuidVisibilityPatchRequest struct {
	ctx context.Context
	ApiService ServicePlanVisibilityAPI
	guid string
	servicePlanVisibilityUpdate *ServicePlanVisibilityUpdate
}

func (r ApiV3ServicePlansGuidVisibilityPatchRequest) ServicePlanVisibilityUpdate(servicePlanVisibilityUpdate ServicePlanVisibilityUpdate) ApiV3ServicePlansGuidVisibilityPatchRequest {
	r.servicePlanVisibilityUpdate = &servicePlanVisibilityUpdate
	return r
}

func (r ApiV3ServicePlansGuidVisibilityPatchRequest) Execute() (*ServicePlanVisibility, *http.Response, error) {
	return r.ApiService.V3ServicePlansGuidVisibilityPatchExecute(r)
}

/*
V3ServicePlansGuidVisibilityPatch Update a service plan visibility

Updates a service plan visibility.

This replaces the existing list of organizations when the service plan
is organization-visible. Only administrators can modify service plan visibility.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The service plan GUID
 @return ApiV3ServicePlansGuidVisibilityPatchRequest
*/
func (a *ServicePlanVisibilityAPIService) V3ServicePlansGuidVisibilityPatch(ctx context.Context, guid string) ApiV3ServicePlansGuidVisibilityPatchRequest {
	return ApiV3ServicePlansGuidVisibilityPatchRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return ServicePlanVisibility
func (a *ServicePlanVisibilityAPIService) V3ServicePlansGuidVisibilityPatchExecute(r ApiV3ServicePlansGuidVisibilityPatchRequest) (*ServicePlanVisibility, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServicePlanVisibility
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePlanVisibilityAPIService.V3ServicePlansGuidVisibilityPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/service_plans/{guid}/visibility"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.servicePlanVisibilityUpdate == nil {
		return localVarReturnValue, nil, reportError("servicePlanVisibilityUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.servicePlanVisibilityUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3ServicePlansGuidVisibilityPostRequest struct {
	ctx context.Context
	ApiService ServicePlanVisibilityAPI
	guid string
	servicePlanVisibilityApply *ServicePlanVisibilityApply
}

func (r ApiV3ServicePlansGuidVisibilityPostRequest) ServicePlanVisibilityApply(servicePlanVisibilityApply ServicePlanVisibilityApply) ApiV3ServicePlansGuidVisibilityPostRequest {
	r.servicePlanVisibilityApply = &servicePlanVisibilityApply
	return r
}

func (r ApiV3ServicePlansGuidVisibilityPostRequest) Execute() (*ServicePlanVisibility, *http.Response, error) {
	return r.ApiService.V3ServicePlansGuidVisibilityPostExecute(r)
}

/*
V3ServicePlansGuidVisibilityPost Apply a service plan visibility

Applies a service plan visibility.

This appends to the existing list of organizations when the service plan
is organization-visible. Only administrators can modify service plan visibility.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The service plan GUID
 @return ApiV3ServicePlansGuidVisibilityPostRequest
*/
func (a *ServicePlanVisibilityAPIService) V3ServicePlansGuidVisibilityPost(ctx context.Context, guid string) ApiV3ServicePlansGuidVisibilityPostRequest {
	return ApiV3ServicePlansGuidVisibilityPostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return ServicePlanVisibility
func (a *ServicePlanVisibilityAPIService) V3ServicePlansGuidVisibilityPostExecute(r ApiV3ServicePlansGuidVisibilityPostRequest) (*ServicePlanVisibility, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServicePlanVisibility
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePlanVisibilityAPIService.V3ServicePlansGuidVisibilityPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/service_plans/{guid}/visibility"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.servicePlanVisibilityApply == nil {
		return localVarReturnValue, nil, reportError("servicePlanVisibilityApply is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.servicePlanVisibilityApply
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
