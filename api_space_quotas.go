/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SpaceQuotasAPI interface {

	/*
	V3SpaceQuotasGet List space quotas

	List all space quota resources that the user has permission to view.

Space quotas define resource limits for spaces within an organization.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3SpaceQuotasGetRequest
	*/
	V3SpaceQuotasGet(ctx context.Context) ApiV3SpaceQuotasGetRequest

	// V3SpaceQuotasGetExecute executes the request
	//  @return V3SpaceQuotasGet200Response
	V3SpaceQuotasGetExecute(r ApiV3SpaceQuotasGetRequest) (*V3SpaceQuotasGet200Response, *http.Response, error)

	/*
	V3SpaceQuotasGuidDelete Delete a space quota

	Delete a space quota.

The space quota cannot be deleted if it is currently applied to any spaces.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space quota GUID
	@return ApiV3SpaceQuotasGuidDeleteRequest
	*/
	V3SpaceQuotasGuidDelete(ctx context.Context, guid string) ApiV3SpaceQuotasGuidDeleteRequest

	// V3SpaceQuotasGuidDeleteExecute executes the request
	//  @return DeleteOrganizationQuota202Response
	V3SpaceQuotasGuidDeleteExecute(r ApiV3SpaceQuotasGuidDeleteRequest) (*DeleteOrganizationQuota202Response, *http.Response, error)

	/*
	V3SpaceQuotasGuidGet Get a space quota

	Retrieve detailed information about a specific space quota.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space quota GUID
	@return ApiV3SpaceQuotasGuidGetRequest
	*/
	V3SpaceQuotasGuidGet(ctx context.Context, guid string) ApiV3SpaceQuotasGuidGetRequest

	// V3SpaceQuotasGuidGetExecute executes the request
	//  @return SpaceQuota
	V3SpaceQuotasGuidGetExecute(r ApiV3SpaceQuotasGuidGetRequest) (*SpaceQuota, *http.Response, error)

	/*
	V3SpaceQuotasGuidPatch Update a space quota

	Update the specified attributes of a space quota.

Only the fields provided in the request body will be updated.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space quota GUID
	@return ApiV3SpaceQuotasGuidPatchRequest
	*/
	V3SpaceQuotasGuidPatch(ctx context.Context, guid string) ApiV3SpaceQuotasGuidPatchRequest

	// V3SpaceQuotasGuidPatchExecute executes the request
	//  @return SpaceQuota
	V3SpaceQuotasGuidPatchExecute(r ApiV3SpaceQuotasGuidPatchRequest) (*SpaceQuota, *http.Response, error)

	/*
	V3SpaceQuotasGuidRelationshipsSpacesPost Apply a space quota to spaces

	Apply a space quota to one or more spaces.

All spaces must be within the same organization as the space quota.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space quota GUID
	@return ApiV3SpaceQuotasGuidRelationshipsSpacesPostRequest
	*/
	V3SpaceQuotasGuidRelationshipsSpacesPost(ctx context.Context, guid string) ApiV3SpaceQuotasGuidRelationshipsSpacesPostRequest

	// V3SpaceQuotasGuidRelationshipsSpacesPostExecute executes the request
	//  @return ApplyOrganizationQuotaToOrganizations201Response
	V3SpaceQuotasGuidRelationshipsSpacesPostExecute(r ApiV3SpaceQuotasGuidRelationshipsSpacesPostRequest) (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error)

	/*
	V3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDelete Remove a space quota from a space

	Remove a space quota from a specific space, reverting it to the organization's default limits.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid The space quota GUID
	@param spaceGuid The space GUID to remove the quota from
	@return ApiV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteRequest
	*/
	V3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDelete(ctx context.Context, guid string, spaceGuid string) ApiV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteRequest

	// V3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteExecute executes the request
	V3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteExecute(r ApiV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteRequest) (*http.Response, error)

	/*
	V3SpaceQuotasPost Create a space quota

	Create a new space quota scoped to a specific organization.

Space quotas are used to limit the resources that can be consumed by spaces
within an organization. They provide fine-grained control over memory, services,
routes, and other resources at the space level.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiV3SpaceQuotasPostRequest
	*/
	V3SpaceQuotasPost(ctx context.Context) ApiV3SpaceQuotasPostRequest

	// V3SpaceQuotasPostExecute executes the request
	//  @return SpaceQuota
	V3SpaceQuotasPostExecute(r ApiV3SpaceQuotasPostRequest) (*SpaceQuota, *http.Response, error)
}

// SpaceQuotasAPIService SpaceQuotasAPI service
type SpaceQuotasAPIService service

type ApiV3SpaceQuotasGetRequest struct {
	ctx context.Context
	ApiService SpaceQuotasAPI
	guids *string
	names *string
	organizationGuids *string
	spaceGuids *string
	labelSelector *string
	page *int32
	perPage *int32
	orderBy *string
	createdAts *string
	updatedAts *string
	include *string
}

// Comma-delimited list of space quota guids to filter by
func (r ApiV3SpaceQuotasGetRequest) Guids(guids string) ApiV3SpaceQuotasGetRequest {
	r.guids = &guids
	return r
}

// Comma-delimited list of space quota names to filter by
func (r ApiV3SpaceQuotasGetRequest) Names(names string) ApiV3SpaceQuotasGetRequest {
	r.names = &names
	return r
}

// Comma-delimited list of organization guids to filter by
func (r ApiV3SpaceQuotasGetRequest) OrganizationGuids(organizationGuids string) ApiV3SpaceQuotasGetRequest {
	r.organizationGuids = &organizationGuids
	return r
}

// Comma-delimited list of space guids to filter by
func (r ApiV3SpaceQuotasGetRequest) SpaceGuids(spaceGuids string) ApiV3SpaceQuotasGetRequest {
	r.spaceGuids = &spaceGuids
	return r
}

// Filter by label selector
func (r ApiV3SpaceQuotasGetRequest) LabelSelector(labelSelector string) ApiV3SpaceQuotasGetRequest {
	r.labelSelector = &labelSelector
	return r
}

// Page to display
func (r ApiV3SpaceQuotasGetRequest) Page(page int32) ApiV3SpaceQuotasGetRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r ApiV3SpaceQuotasGetRequest) PerPage(perPage int32) ApiV3SpaceQuotasGetRequest {
	r.perPage = &perPage
	return r
}

// Value to sort by
func (r ApiV3SpaceQuotasGetRequest) OrderBy(orderBy string) ApiV3SpaceQuotasGetRequest {
	r.orderBy = &orderBy
	return r
}

// Filter by creation time
func (r ApiV3SpaceQuotasGetRequest) CreatedAts(createdAts string) ApiV3SpaceQuotasGetRequest {
	r.createdAts = &createdAts
	return r
}

// Filter by update time
func (r ApiV3SpaceQuotasGetRequest) UpdatedAts(updatedAts string) ApiV3SpaceQuotasGetRequest {
	r.updatedAts = &updatedAts
	return r
}

// Optionally include related resources in the response
func (r ApiV3SpaceQuotasGetRequest) Include(include string) ApiV3SpaceQuotasGetRequest {
	r.include = &include
	return r
}

func (r ApiV3SpaceQuotasGetRequest) Execute() (*V3SpaceQuotasGet200Response, *http.Response, error) {
	return r.ApiService.V3SpaceQuotasGetExecute(r)
}

/*
V3SpaceQuotasGet List space quotas

List all space quota resources that the user has permission to view.

Space quotas define resource limits for spaces within an organization.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3SpaceQuotasGetRequest
*/
func (a *SpaceQuotasAPIService) V3SpaceQuotasGet(ctx context.Context) ApiV3SpaceQuotasGetRequest {
	return ApiV3SpaceQuotasGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V3SpaceQuotasGet200Response
func (a *SpaceQuotasAPIService) V3SpaceQuotasGetExecute(r ApiV3SpaceQuotasGetRequest) (*V3SpaceQuotasGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3SpaceQuotasGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceQuotasAPIService.V3SpaceQuotasGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/space_quotas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.guids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guids", r.guids, "form", "")
	}
	if r.names != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "names", r.names, "form", "")
	}
	if r.organizationGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organization_guids", r.organizationGuids, "form", "")
	}
	if r.spaceGuids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "space_guids", r.spaceGuids, "form", "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label_selector", r.labelSelector, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	} else {
		var defaultValue int32 = 50
		r.perPage = &defaultValue
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "form", "")
	} else {
		var defaultValue string = "created_at"
		r.orderBy = &defaultValue
	}
	if r.createdAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_ats", r.createdAts, "form", "")
	}
	if r.updatedAts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_ats", r.updatedAts, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpaceQuotasGuidDeleteRequest struct {
	ctx context.Context
	ApiService SpaceQuotasAPI
	guid string
}

func (r ApiV3SpaceQuotasGuidDeleteRequest) Execute() (*DeleteOrganizationQuota202Response, *http.Response, error) {
	return r.ApiService.V3SpaceQuotasGuidDeleteExecute(r)
}

/*
V3SpaceQuotasGuidDelete Delete a space quota

Delete a space quota.

The space quota cannot be deleted if it is currently applied to any spaces.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space quota GUID
 @return ApiV3SpaceQuotasGuidDeleteRequest
*/
func (a *SpaceQuotasAPIService) V3SpaceQuotasGuidDelete(ctx context.Context, guid string) ApiV3SpaceQuotasGuidDeleteRequest {
	return ApiV3SpaceQuotasGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return DeleteOrganizationQuota202Response
func (a *SpaceQuotasAPIService) V3SpaceQuotasGuidDeleteExecute(r ApiV3SpaceQuotasGuidDeleteRequest) (*DeleteOrganizationQuota202Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteOrganizationQuota202Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceQuotasAPIService.V3SpaceQuotasGuidDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/space_quotas/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpaceQuotasGuidGetRequest struct {
	ctx context.Context
	ApiService SpaceQuotasAPI
	guid string
	include *string
}

// Optionally include related resources in the response
func (r ApiV3SpaceQuotasGuidGetRequest) Include(include string) ApiV3SpaceQuotasGuidGetRequest {
	r.include = &include
	return r
}

func (r ApiV3SpaceQuotasGuidGetRequest) Execute() (*SpaceQuota, *http.Response, error) {
	return r.ApiService.V3SpaceQuotasGuidGetExecute(r)
}

/*
V3SpaceQuotasGuidGet Get a space quota

Retrieve detailed information about a specific space quota.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space quota GUID
 @return ApiV3SpaceQuotasGuidGetRequest
*/
func (a *SpaceQuotasAPIService) V3SpaceQuotasGuidGet(ctx context.Context, guid string) ApiV3SpaceQuotasGuidGetRequest {
	return ApiV3SpaceQuotasGuidGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return SpaceQuota
func (a *SpaceQuotasAPIService) V3SpaceQuotasGuidGetExecute(r ApiV3SpaceQuotasGuidGetRequest) (*SpaceQuota, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpaceQuota
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceQuotasAPIService.V3SpaceQuotasGuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/space_quotas/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpaceQuotasGuidPatchRequest struct {
	ctx context.Context
	ApiService SpaceQuotasAPI
	guid string
	spaceQuotaUpdate *SpaceQuotaUpdate
}

func (r ApiV3SpaceQuotasGuidPatchRequest) SpaceQuotaUpdate(spaceQuotaUpdate SpaceQuotaUpdate) ApiV3SpaceQuotasGuidPatchRequest {
	r.spaceQuotaUpdate = &spaceQuotaUpdate
	return r
}

func (r ApiV3SpaceQuotasGuidPatchRequest) Execute() (*SpaceQuota, *http.Response, error) {
	return r.ApiService.V3SpaceQuotasGuidPatchExecute(r)
}

/*
V3SpaceQuotasGuidPatch Update a space quota

Update the specified attributes of a space quota.

Only the fields provided in the request body will be updated.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space quota GUID
 @return ApiV3SpaceQuotasGuidPatchRequest
*/
func (a *SpaceQuotasAPIService) V3SpaceQuotasGuidPatch(ctx context.Context, guid string) ApiV3SpaceQuotasGuidPatchRequest {
	return ApiV3SpaceQuotasGuidPatchRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return SpaceQuota
func (a *SpaceQuotasAPIService) V3SpaceQuotasGuidPatchExecute(r ApiV3SpaceQuotasGuidPatchRequest) (*SpaceQuota, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpaceQuota
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceQuotasAPIService.V3SpaceQuotasGuidPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/space_quotas/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.spaceQuotaUpdate == nil {
		return localVarReturnValue, nil, reportError("spaceQuotaUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.spaceQuotaUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpaceQuotasGuidRelationshipsSpacesPostRequest struct {
	ctx context.Context
	ApiService SpaceQuotasAPI
	guid string
	v3SpaceQuotasGuidRelationshipsSpacesPostRequest *V3SpaceQuotasGuidRelationshipsSpacesPostRequest
}

func (r ApiV3SpaceQuotasGuidRelationshipsSpacesPostRequest) V3SpaceQuotasGuidRelationshipsSpacesPostRequest(v3SpaceQuotasGuidRelationshipsSpacesPostRequest V3SpaceQuotasGuidRelationshipsSpacesPostRequest) ApiV3SpaceQuotasGuidRelationshipsSpacesPostRequest {
	r.v3SpaceQuotasGuidRelationshipsSpacesPostRequest = &v3SpaceQuotasGuidRelationshipsSpacesPostRequest
	return r
}

func (r ApiV3SpaceQuotasGuidRelationshipsSpacesPostRequest) Execute() (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error) {
	return r.ApiService.V3SpaceQuotasGuidRelationshipsSpacesPostExecute(r)
}

/*
V3SpaceQuotasGuidRelationshipsSpacesPost Apply a space quota to spaces

Apply a space quota to one or more spaces.

All spaces must be within the same organization as the space quota.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space quota GUID
 @return ApiV3SpaceQuotasGuidRelationshipsSpacesPostRequest
*/
func (a *SpaceQuotasAPIService) V3SpaceQuotasGuidRelationshipsSpacesPost(ctx context.Context, guid string) ApiV3SpaceQuotasGuidRelationshipsSpacesPostRequest {
	return ApiV3SpaceQuotasGuidRelationshipsSpacesPostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return ApplyOrganizationQuotaToOrganizations201Response
func (a *SpaceQuotasAPIService) V3SpaceQuotasGuidRelationshipsSpacesPostExecute(r ApiV3SpaceQuotasGuidRelationshipsSpacesPostRequest) (*ApplyOrganizationQuotaToOrganizations201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplyOrganizationQuotaToOrganizations201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceQuotasAPIService.V3SpaceQuotasGuidRelationshipsSpacesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/space_quotas/{guid}/relationships/spaces"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v3SpaceQuotasGuidRelationshipsSpacesPostRequest == nil {
		return localVarReturnValue, nil, reportError("v3SpaceQuotasGuidRelationshipsSpacesPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v3SpaceQuotasGuidRelationshipsSpacesPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteRequest struct {
	ctx context.Context
	ApiService SpaceQuotasAPI
	guid string
	spaceGuid string
}

func (r ApiV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteExecute(r)
}

/*
V3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDelete Remove a space quota from a space

Remove a space quota from a specific space, reverting it to the organization's default limits.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid The space quota GUID
 @param spaceGuid The space GUID to remove the quota from
 @return ApiV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteRequest
*/
func (a *SpaceQuotasAPIService) V3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDelete(ctx context.Context, guid string, spaceGuid string) ApiV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteRequest {
	return ApiV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
		spaceGuid: spaceGuid,
	}
}

// Execute executes the request
func (a *SpaceQuotasAPIService) V3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteExecute(r ApiV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceQuotasAPIService.V3SpaceQuotasGuidRelationshipsSpacesSpaceGuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/space_quotas/{guid}/relationships/spaces/{space_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"space_guid"+"}", url.PathEscape(parameterValueToString(r.spaceGuid, "spaceGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV3SpaceQuotasPostRequest struct {
	ctx context.Context
	ApiService SpaceQuotasAPI
	spaceQuotaCreate *SpaceQuotaCreate
}

func (r ApiV3SpaceQuotasPostRequest) SpaceQuotaCreate(spaceQuotaCreate SpaceQuotaCreate) ApiV3SpaceQuotasPostRequest {
	r.spaceQuotaCreate = &spaceQuotaCreate
	return r
}

func (r ApiV3SpaceQuotasPostRequest) Execute() (*SpaceQuota, *http.Response, error) {
	return r.ApiService.V3SpaceQuotasPostExecute(r)
}

/*
V3SpaceQuotasPost Create a space quota

Create a new space quota scoped to a specific organization.

Space quotas are used to limit the resources that can be consumed by spaces
within an organization. They provide fine-grained control over memory, services,
routes, and other resources at the space level.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV3SpaceQuotasPostRequest
*/
func (a *SpaceQuotasAPIService) V3SpaceQuotasPost(ctx context.Context) ApiV3SpaceQuotasPostRequest {
	return ApiV3SpaceQuotasPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SpaceQuota
func (a *SpaceQuotasAPIService) V3SpaceQuotasPostExecute(r ApiV3SpaceQuotasPostRequest) (*SpaceQuota, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SpaceQuota
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpaceQuotasAPIService.V3SpaceQuotasPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/space_quotas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.spaceQuotaCreate == nil {
		return localVarReturnValue, nil, reportError("spaceQuotaCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.spaceQuotaCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
