/*
Cloud Controller API

API specification for managing environment variable groups in Cloud Controller.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"time"
)

// checks if the ServiceUsageEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceUsageEvent{}

// ServiceUsageEvent struct for ServiceUsageEvent
type ServiceUsageEvent struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Guid *string `json:"guid,omitempty"`
	Links *ServiceUsageEventLinks `json:"links,omitempty"`
	Organization NullableRoleRelationshipsSpaceData `json:"organization,omitempty"`
	ServiceBroker NullableServiceUsageEventServiceBroker `json:"service_broker,omitempty"`
	ServiceInstance NullableServiceUsageEventServiceInstance `json:"service_instance,omitempty"`
	ServiceOffering NullableServiceUsageEventServiceBroker `json:"service_offering,omitempty"`
	ServicePlan NullableServiceUsageEventServiceBroker `json:"service_plan,omitempty"`
	Space NullableServiceUsageEventServiceBroker `json:"space,omitempty"`
	State NullableString `json:"state,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewServiceUsageEvent instantiates a new ServiceUsageEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceUsageEvent() *ServiceUsageEvent {
	this := ServiceUsageEvent{}
	return &this
}

// NewServiceUsageEventWithDefaults instantiates a new ServiceUsageEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceUsageEventWithDefaults() *ServiceUsageEvent {
	this := ServiceUsageEvent{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ServiceUsageEvent) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUsageEvent) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ServiceUsageEvent) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ServiceUsageEvent) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *ServiceUsageEvent) GetGuid() string {
	if o == nil || IsNil(o.Guid) {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUsageEvent) GetGuidOk() (*string, bool) {
	if o == nil || IsNil(o.Guid) {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *ServiceUsageEvent) HasGuid() bool {
	if o != nil && !IsNil(o.Guid) {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *ServiceUsageEvent) SetGuid(v string) {
	o.Guid = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ServiceUsageEvent) GetLinks() ServiceUsageEventLinks {
	if o == nil || IsNil(o.Links) {
		var ret ServiceUsageEventLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUsageEvent) GetLinksOk() (*ServiceUsageEventLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ServiceUsageEvent) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given ServiceUsageEventLinks and assigns it to the Links field.
func (o *ServiceUsageEvent) SetLinks(v ServiceUsageEventLinks) {
	o.Links = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceUsageEvent) GetOrganization() RoleRelationshipsSpaceData {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret RoleRelationshipsSpaceData
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceUsageEvent) GetOrganizationOk() (*RoleRelationshipsSpaceData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *ServiceUsageEvent) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableRoleRelationshipsSpaceData and assigns it to the Organization field.
func (o *ServiceUsageEvent) SetOrganization(v RoleRelationshipsSpaceData) {
	o.Organization.Set(&v)
}
// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *ServiceUsageEvent) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *ServiceUsageEvent) UnsetOrganization() {
	o.Organization.Unset()
}

// GetServiceBroker returns the ServiceBroker field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceUsageEvent) GetServiceBroker() ServiceUsageEventServiceBroker {
	if o == nil || IsNil(o.ServiceBroker.Get()) {
		var ret ServiceUsageEventServiceBroker
		return ret
	}
	return *o.ServiceBroker.Get()
}

// GetServiceBrokerOk returns a tuple with the ServiceBroker field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceUsageEvent) GetServiceBrokerOk() (*ServiceUsageEventServiceBroker, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceBroker.Get(), o.ServiceBroker.IsSet()
}

// HasServiceBroker returns a boolean if a field has been set.
func (o *ServiceUsageEvent) HasServiceBroker() bool {
	if o != nil && o.ServiceBroker.IsSet() {
		return true
	}

	return false
}

// SetServiceBroker gets a reference to the given NullableServiceUsageEventServiceBroker and assigns it to the ServiceBroker field.
func (o *ServiceUsageEvent) SetServiceBroker(v ServiceUsageEventServiceBroker) {
	o.ServiceBroker.Set(&v)
}
// SetServiceBrokerNil sets the value for ServiceBroker to be an explicit nil
func (o *ServiceUsageEvent) SetServiceBrokerNil() {
	o.ServiceBroker.Set(nil)
}

// UnsetServiceBroker ensures that no value is present for ServiceBroker, not even an explicit nil
func (o *ServiceUsageEvent) UnsetServiceBroker() {
	o.ServiceBroker.Unset()
}

// GetServiceInstance returns the ServiceInstance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceUsageEvent) GetServiceInstance() ServiceUsageEventServiceInstance {
	if o == nil || IsNil(o.ServiceInstance.Get()) {
		var ret ServiceUsageEventServiceInstance
		return ret
	}
	return *o.ServiceInstance.Get()
}

// GetServiceInstanceOk returns a tuple with the ServiceInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceUsageEvent) GetServiceInstanceOk() (*ServiceUsageEventServiceInstance, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceInstance.Get(), o.ServiceInstance.IsSet()
}

// HasServiceInstance returns a boolean if a field has been set.
func (o *ServiceUsageEvent) HasServiceInstance() bool {
	if o != nil && o.ServiceInstance.IsSet() {
		return true
	}

	return false
}

// SetServiceInstance gets a reference to the given NullableServiceUsageEventServiceInstance and assigns it to the ServiceInstance field.
func (o *ServiceUsageEvent) SetServiceInstance(v ServiceUsageEventServiceInstance) {
	o.ServiceInstance.Set(&v)
}
// SetServiceInstanceNil sets the value for ServiceInstance to be an explicit nil
func (o *ServiceUsageEvent) SetServiceInstanceNil() {
	o.ServiceInstance.Set(nil)
}

// UnsetServiceInstance ensures that no value is present for ServiceInstance, not even an explicit nil
func (o *ServiceUsageEvent) UnsetServiceInstance() {
	o.ServiceInstance.Unset()
}

// GetServiceOffering returns the ServiceOffering field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceUsageEvent) GetServiceOffering() ServiceUsageEventServiceBroker {
	if o == nil || IsNil(o.ServiceOffering.Get()) {
		var ret ServiceUsageEventServiceBroker
		return ret
	}
	return *o.ServiceOffering.Get()
}

// GetServiceOfferingOk returns a tuple with the ServiceOffering field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceUsageEvent) GetServiceOfferingOk() (*ServiceUsageEventServiceBroker, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceOffering.Get(), o.ServiceOffering.IsSet()
}

// HasServiceOffering returns a boolean if a field has been set.
func (o *ServiceUsageEvent) HasServiceOffering() bool {
	if o != nil && o.ServiceOffering.IsSet() {
		return true
	}

	return false
}

// SetServiceOffering gets a reference to the given NullableServiceUsageEventServiceBroker and assigns it to the ServiceOffering field.
func (o *ServiceUsageEvent) SetServiceOffering(v ServiceUsageEventServiceBroker) {
	o.ServiceOffering.Set(&v)
}
// SetServiceOfferingNil sets the value for ServiceOffering to be an explicit nil
func (o *ServiceUsageEvent) SetServiceOfferingNil() {
	o.ServiceOffering.Set(nil)
}

// UnsetServiceOffering ensures that no value is present for ServiceOffering, not even an explicit nil
func (o *ServiceUsageEvent) UnsetServiceOffering() {
	o.ServiceOffering.Unset()
}

// GetServicePlan returns the ServicePlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceUsageEvent) GetServicePlan() ServiceUsageEventServiceBroker {
	if o == nil || IsNil(o.ServicePlan.Get()) {
		var ret ServiceUsageEventServiceBroker
		return ret
	}
	return *o.ServicePlan.Get()
}

// GetServicePlanOk returns a tuple with the ServicePlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceUsageEvent) GetServicePlanOk() (*ServiceUsageEventServiceBroker, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServicePlan.Get(), o.ServicePlan.IsSet()
}

// HasServicePlan returns a boolean if a field has been set.
func (o *ServiceUsageEvent) HasServicePlan() bool {
	if o != nil && o.ServicePlan.IsSet() {
		return true
	}

	return false
}

// SetServicePlan gets a reference to the given NullableServiceUsageEventServiceBroker and assigns it to the ServicePlan field.
func (o *ServiceUsageEvent) SetServicePlan(v ServiceUsageEventServiceBroker) {
	o.ServicePlan.Set(&v)
}
// SetServicePlanNil sets the value for ServicePlan to be an explicit nil
func (o *ServiceUsageEvent) SetServicePlanNil() {
	o.ServicePlan.Set(nil)
}

// UnsetServicePlan ensures that no value is present for ServicePlan, not even an explicit nil
func (o *ServiceUsageEvent) UnsetServicePlan() {
	o.ServicePlan.Unset()
}

// GetSpace returns the Space field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceUsageEvent) GetSpace() ServiceUsageEventServiceBroker {
	if o == nil || IsNil(o.Space.Get()) {
		var ret ServiceUsageEventServiceBroker
		return ret
	}
	return *o.Space.Get()
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceUsageEvent) GetSpaceOk() (*ServiceUsageEventServiceBroker, bool) {
	if o == nil {
		return nil, false
	}
	return o.Space.Get(), o.Space.IsSet()
}

// HasSpace returns a boolean if a field has been set.
func (o *ServiceUsageEvent) HasSpace() bool {
	if o != nil && o.Space.IsSet() {
		return true
	}

	return false
}

// SetSpace gets a reference to the given NullableServiceUsageEventServiceBroker and assigns it to the Space field.
func (o *ServiceUsageEvent) SetSpace(v ServiceUsageEventServiceBroker) {
	o.Space.Set(&v)
}
// SetSpaceNil sets the value for Space to be an explicit nil
func (o *ServiceUsageEvent) SetSpaceNil() {
	o.Space.Set(nil)
}

// UnsetSpace ensures that no value is present for Space, not even an explicit nil
func (o *ServiceUsageEvent) UnsetSpace() {
	o.Space.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceUsageEvent) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceUsageEvent) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *ServiceUsageEvent) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *ServiceUsageEvent) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *ServiceUsageEvent) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *ServiceUsageEvent) UnsetState() {
	o.State.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ServiceUsageEvent) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUsageEvent) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ServiceUsageEvent) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ServiceUsageEvent) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ServiceUsageEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceUsageEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Guid) {
		toSerialize["guid"] = o.Guid
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if o.Organization.IsSet() {
		toSerialize["organization"] = o.Organization.Get()
	}
	if o.ServiceBroker.IsSet() {
		toSerialize["service_broker"] = o.ServiceBroker.Get()
	}
	if o.ServiceInstance.IsSet() {
		toSerialize["service_instance"] = o.ServiceInstance.Get()
	}
	if o.ServiceOffering.IsSet() {
		toSerialize["service_offering"] = o.ServiceOffering.Get()
	}
	if o.ServicePlan.IsSet() {
		toSerialize["service_plan"] = o.ServicePlan.Get()
	}
	if o.Space.IsSet() {
		toSerialize["space"] = o.Space.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableServiceUsageEvent struct {
	value *ServiceUsageEvent
	isSet bool
}

func (v NullableServiceUsageEvent) Get() *ServiceUsageEvent {
	return v.value
}

func (v *NullableServiceUsageEvent) Set(val *ServiceUsageEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceUsageEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceUsageEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceUsageEvent(val *ServiceUsageEvent) *NullableServiceUsageEvent {
	return &NullableServiceUsageEvent{value: val, isSet: true}
}

func (v NullableServiceUsageEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceUsageEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


