/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
)

// checks if the FeatureFlagUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureFlagUpdate{}

// FeatureFlagUpdate struct for FeatureFlagUpdate
type FeatureFlagUpdate struct {
	// Custom error message shown when the feature is disabled
	CustomErrorMessage NullableString `json:"custom_error_message,omitempty"`
	// Whether to enable or disable the feature
	Enabled *bool `json:"enabled,omitempty"`
	Metadata *FeatureFlagUpdateMetadata `json:"metadata,omitempty"`
}

// NewFeatureFlagUpdate instantiates a new FeatureFlagUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureFlagUpdate() *FeatureFlagUpdate {
	this := FeatureFlagUpdate{}
	return &this
}

// NewFeatureFlagUpdateWithDefaults instantiates a new FeatureFlagUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureFlagUpdateWithDefaults() *FeatureFlagUpdate {
	this := FeatureFlagUpdate{}
	return &this
}

// GetCustomErrorMessage returns the CustomErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureFlagUpdate) GetCustomErrorMessage() string {
	if o == nil || IsNil(o.CustomErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.CustomErrorMessage.Get()
}

// GetCustomErrorMessageOk returns a tuple with the CustomErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureFlagUpdate) GetCustomErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomErrorMessage.Get(), o.CustomErrorMessage.IsSet()
}

// HasCustomErrorMessage returns a boolean if a field has been set.
func (o *FeatureFlagUpdate) HasCustomErrorMessage() bool {
	if o != nil && o.CustomErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetCustomErrorMessage gets a reference to the given NullableString and assigns it to the CustomErrorMessage field.
func (o *FeatureFlagUpdate) SetCustomErrorMessage(v string) {
	o.CustomErrorMessage.Set(&v)
}
// SetCustomErrorMessageNil sets the value for CustomErrorMessage to be an explicit nil
func (o *FeatureFlagUpdate) SetCustomErrorMessageNil() {
	o.CustomErrorMessage.Set(nil)
}

// UnsetCustomErrorMessage ensures that no value is present for CustomErrorMessage, not even an explicit nil
func (o *FeatureFlagUpdate) UnsetCustomErrorMessage() {
	o.CustomErrorMessage.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FeatureFlagUpdate) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureFlagUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FeatureFlagUpdate) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FeatureFlagUpdate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *FeatureFlagUpdate) GetMetadata() FeatureFlagUpdateMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret FeatureFlagUpdateMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureFlagUpdate) GetMetadataOk() (*FeatureFlagUpdateMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *FeatureFlagUpdate) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given FeatureFlagUpdateMetadata and assigns it to the Metadata field.
func (o *FeatureFlagUpdate) SetMetadata(v FeatureFlagUpdateMetadata) {
	o.Metadata = &v
}

func (o FeatureFlagUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureFlagUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomErrorMessage.IsSet() {
		toSerialize["custom_error_message"] = o.CustomErrorMessage.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableFeatureFlagUpdate struct {
	value *FeatureFlagUpdate
	isSet bool
}

func (v NullableFeatureFlagUpdate) Get() *FeatureFlagUpdate {
	return v.value
}

func (v *NullableFeatureFlagUpdate) Set(val *FeatureFlagUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureFlagUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureFlagUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureFlagUpdate(val *FeatureFlagUpdate) *NullableFeatureFlagUpdate {
	return &NullableFeatureFlagUpdate{value: val, isSet: true}
}

func (v NullableFeatureFlagUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureFlagUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


