// Package capiclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package capiclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	AdminScopes          = "Admin.Scopes"
	AdminReadOnlyScopes  = "AdminReadOnly.Scopes"
	GlobalAuditorScopes  = "GlobalAuditor.Scopes"
	OAuth2Scopes         = "OAuth2.Scopes"
	OrgManagerScopes     = "OrgManager.Scopes"
	SpaceAuditorScopes   = "SpaceAuditor.Scopes"
	SpaceDeveloperScopes = "SpaceDeveloper.Scopes"
	SpaceManagerScopes   = "SpaceManager.Scopes"
	SpaceSupporterScopes = "SpaceSupporter.Scopes"
	BearerAuthScopes     = "bearerAuth.Scopes"
)

// Defines values for AppLifecycleType.
const (
	AppLifecycleTypeBuildpack AppLifecycleType = "buildpack"
	AppLifecycleTypeCnb       AppLifecycleType = "cnb"
	AppLifecycleTypeDocker    AppLifecycleType = "docker"
)

// Defines values for AppState.
const (
	AppStateSTARTED AppState = "STARTED"
	AppStateSTOPPED AppState = "STOPPED"
)

// Defines values for AppFeatureName.
const (
	AppFeatureNameRevisions AppFeatureName = "revisions"
	AppFeatureNameSsh       AppFeatureName = "ssh"
)

// Defines values for AuthenticationType.
const (
	Basic AuthenticationType = "basic"
)

// Defines values for BuildLifecycleType.
const (
	BuildLifecycleTypeBuildpack BuildLifecycleType = "buildpack"
	BuildLifecycleTypeCnb       BuildLifecycleType = "cnb"
	BuildLifecycleTypeDocker    BuildLifecycleType = "docker"
)

// Defines values for BuildState.
const (
	BuildStateFAILED  BuildState = "FAILED"
	BuildStateSTAGED  BuildState = "STAGED"
	BuildStateSTAGING BuildState = "STAGING"
)

// Defines values for BuildpackLifecycleType.
const (
	BuildpackLifecycleTypeBuildpack BuildpackLifecycleType = "buildpack"
	BuildpackLifecycleTypeCnb       BuildpackLifecycleType = "cnb"
)

// Defines values for BuildpackLinksUploadMethod.
const (
	BuildpackLinksUploadMethodPOST BuildpackLinksUploadMethod = "POST"
)

// Defines values for BuildpackState.
const (
	BuildpackStateAWAITINGUPLOAD   BuildpackState = "AWAITING_UPLOAD"
	BuildpackStateFAILED           BuildpackState = "FAILED"
	BuildpackStatePROCESSINGUPLOAD BuildpackState = "PROCESSING_UPLOAD"
	BuildpackStateREADY            BuildpackState = "READY"
)

// Defines values for DeploymentLinksCancelMethod.
const (
	DeploymentLinksCancelMethodPOST DeploymentLinksCancelMethod = "POST"
)

// Defines values for DeploymentState.
const (
	DeploymentStateCANCELED  DeploymentState = "CANCELED"
	DeploymentStateCANCELING DeploymentState = "CANCELING"
	DeploymentStateDEPLOYED  DeploymentState = "DEPLOYED"
	DeploymentStateDEPLOYING DeploymentState = "DEPLOYING"
)

// Defines values for DeploymentStatusReason.
const (
	DeploymentStatusReasonCANCELED   DeploymentStatusReason = "CANCELED"
	DeploymentStatusReasonDEGENERATE DeploymentStatusReason = "DEGENERATE"
	DeploymentStatusReasonDEPLOYED   DeploymentStatusReason = "DEPLOYED"
	DeploymentStatusReasonDEPLOYING  DeploymentStatusReason = "DEPLOYING"
	DeploymentStatusReasonSUPERSEDED DeploymentStatusReason = "SUPERSEDED"
)

// Defines values for DeploymentStatusValue.
const (
	DeploymentStatusValueACTIVE    DeploymentStatusValue = "ACTIVE"
	DeploymentStatusValueCANCELING DeploymentStatusValue = "CANCELING"
	DeploymentStatusValueFINALIZED DeploymentStatusValue = "FINALIZED"
)

// Defines values for DeploymentStrategy.
const (
	DeploymentStrategyCanary   DeploymentStrategy = "canary"
	DeploymentStrategyRecreate DeploymentStrategy = "recreate"
	DeploymentStrategyRolling  DeploymentStrategy = "rolling"
)

// Defines values for DestinationProtocol.
const (
	DestinationProtocolHttp1 DestinationProtocol = "http1"
	DestinationProtocolHttp2 DestinationProtocol = "http2"
)

// Defines values for DropletChecksumType.
const (
	DropletChecksumTypeSha1   DropletChecksumType = "sha1"
	DropletChecksumTypeSha256 DropletChecksumType = "sha256"
)

// Defines values for DropletLifecycleType.
const (
	DropletLifecycleTypeBuildpack DropletLifecycleType = "buildpack"
	DropletLifecycleTypeDocker    DropletLifecycleType = "docker"
)

// Defines values for DropletState.
const (
	DropletStateAWAITINGUPLOAD   DropletState = "AWAITING_UPLOAD"
	DropletStateCOPYING          DropletState = "COPYING"
	DropletStateEXPIRED          DropletState = "EXPIRED"
	DropletStateFAILED           DropletState = "FAILED"
	DropletStatePROCESSINGUPLOAD DropletState = "PROCESSING_UPLOAD"
	DropletStateSTAGED           DropletState = "STAGED"
)

// Defines values for EnvironmentVariableGroupName.
const (
	EnvironmentVariableGroupNameRunning EnvironmentVariableGroupName = "running"
	EnvironmentVariableGroupNameStaging EnvironmentVariableGroupName = "staging"
)

// Defines values for JobState.
const (
	JobStateCOMPLETE   JobState = "COMPLETE"
	JobStateFAILED     JobState = "FAILED"
	JobStatePOLLING    JobState = "POLLING"
	JobStatePROCESSING JobState = "PROCESSING"
)

// Defines values for LinkWithMethodMethod.
const (
	DELETE LinkWithMethodMethod = "DELETE"
	GET    LinkWithMethodMethod = "GET"
	PATCH  LinkWithMethodMethod = "PATCH"
	POST   LinkWithMethodMethod = "POST"
	PUT    LinkWithMethodMethod = "PUT"
)

// Defines values for ManifestDiffDiffChangesType.
const (
	ManifestDiffDiffChangesTypeCreate ManifestDiffDiffChangesType = "create"
	ManifestDiffDiffChangesTypeDelete ManifestDiffDiffChangesType = "delete"
	ManifestDiffDiffChangesTypeUpdate ManifestDiffDiffChangesType = "update"
)

// Defines values for PackageDataChecksumType.
const (
	PackageDataChecksumTypeSha1   PackageDataChecksumType = "sha1"
	PackageDataChecksumTypeSha256 PackageDataChecksumType = "sha256"
)

// Defines values for PackageState.
const (
	PackageStateAWAITINGUPLOAD   PackageState = "AWAITING_UPLOAD"
	PackageStateCOPYING          PackageState = "COPYING"
	PackageStateEXPIRED          PackageState = "EXPIRED"
	PackageStateFAILED           PackageState = "FAILED"
	PackageStatePROCESSINGUPLOAD PackageState = "PROCESSING_UPLOAD"
	PackageStateREADY            PackageState = "READY"
)

// Defines values for PackageType.
const (
	PackageTypeBits   PackageType = "bits"
	PackageTypeCnb    PackageType = "cnb"
	PackageTypeDocker PackageType = "docker"
)

// Defines values for ProcessHealthCheckType.
const (
	ProcessHealthCheckTypeHttp    ProcessHealthCheckType = "http"
	ProcessHealthCheckTypePort    ProcessHealthCheckType = "port"
	ProcessHealthCheckTypeProcess ProcessHealthCheckType = "process"
)

// Defines values for ProcessReadinessHealthCheckType.
const (
	ProcessReadinessHealthCheckTypeHttp    ProcessReadinessHealthCheckType = "http"
	ProcessReadinessHealthCheckTypePort    ProcessReadinessHealthCheckType = "port"
	ProcessReadinessHealthCheckTypeProcess ProcessReadinessHealthCheckType = "process"
)

// Defines values for ProcessStatsState.
const (
	CRASHED  ProcessStatsState = "CRASHED"
	DOWN     ProcessStatsState = "DOWN"
	RUNNING  ProcessStatsState = "RUNNING"
	STARTING ProcessStatsState = "STARTING"
)

// Defines values for RoleType.
const (
	RoleTypeOrganizationAuditor        RoleType = "organization_auditor"
	RoleTypeOrganizationBillingManager RoleType = "organization_billing_manager"
	RoleTypeOrganizationManager        RoleType = "organization_manager"
	RoleTypeOrganizationUser           RoleType = "organization_user"
	RoleTypeSpaceAuditor               RoleType = "space_auditor"
	RoleTypeSpaceDeveloper             RoleType = "space_developer"
	RoleTypeSpaceManager               RoleType = "space_manager"
	RoleTypeSpaceSupporter             RoleType = "space_supporter"
)

// Defines values for RoleCreateType.
const (
	RoleCreateTypeOrganizationAuditor        RoleCreateType = "organization_auditor"
	RoleCreateTypeOrganizationBillingManager RoleCreateType = "organization_billing_manager"
	RoleCreateTypeOrganizationManager        RoleCreateType = "organization_manager"
	RoleCreateTypeOrganizationUser           RoleCreateType = "organization_user"
	RoleCreateTypeSpaceAuditor               RoleCreateType = "space_auditor"
	RoleCreateTypeSpaceDeveloper             RoleCreateType = "space_developer"
	RoleCreateTypeSpaceManager               RoleCreateType = "space_manager"
	RoleCreateTypeSpaceSupporter             RoleCreateType = "space_supporter"
)

// Defines values for RouteProtocol.
const (
	RouteProtocolHttp RouteProtocol = "http"
	RouteProtocolTcp  RouteProtocol = "tcp"
)

// Defines values for RuleProtocol.
const (
	RuleProtocolAll  RuleProtocol = "all"
	RuleProtocolIcmp RuleProtocol = "icmp"
	RuleProtocolTcp  RuleProtocol = "tcp"
	RuleProtocolUdp  RuleProtocol = "udp"
)

// Defines values for ServiceCredentialBindingLastOperationState.
const (
	ServiceCredentialBindingLastOperationStateFailed     ServiceCredentialBindingLastOperationState = "failed"
	ServiceCredentialBindingLastOperationStateInProgress ServiceCredentialBindingLastOperationState = "in progress"
	ServiceCredentialBindingLastOperationStateInitial    ServiceCredentialBindingLastOperationState = "initial"
	ServiceCredentialBindingLastOperationStateSucceeded  ServiceCredentialBindingLastOperationState = "succeeded"
)

// Defines values for ServiceCredentialBindingLastOperationType.
const (
	ServiceCredentialBindingLastOperationTypeCreate ServiceCredentialBindingLastOperationType = "create"
	ServiceCredentialBindingLastOperationTypeDelete ServiceCredentialBindingLastOperationType = "delete"
)

// Defines values for ServiceCredentialBindingType.
const (
	ServiceCredentialBindingTypeApp ServiceCredentialBindingType = "app"
	ServiceCredentialBindingTypeKey ServiceCredentialBindingType = "key"
)

// Defines values for ServiceInstanceType.
const (
	ServiceInstanceTypeManaged      ServiceInstanceType = "managed"
	ServiceInstanceTypeUserProvided ServiceInstanceType = "user-provided"
)

// Defines values for ServicePlanVisibilityType.
const (
	ServicePlanVisibilityTypeAdmin        ServicePlanVisibilityType = "admin"
	ServicePlanVisibilityTypeOrganization ServicePlanVisibilityType = "organization"
	ServicePlanVisibilityTypePublic       ServicePlanVisibilityType = "public"
	ServicePlanVisibilityTypeSpace        ServicePlanVisibilityType = "space"
)

// Defines values for ServicePlanVisibilityApplyType.
const (
	ServicePlanVisibilityApplyTypeOrganization ServicePlanVisibilityApplyType = "organization"
)

// Defines values for ServicePlanVisibilityUpdateType.
const (
	ServicePlanVisibilityUpdateTypeAdmin        ServicePlanVisibilityUpdateType = "admin"
	ServicePlanVisibilityUpdateTypeOrganization ServicePlanVisibilityUpdateType = "organization"
	ServicePlanVisibilityUpdateTypePublic       ServicePlanVisibilityUpdateType = "public"
)

// Defines values for ServiceRouteBindingLastOperationState.
const (
	ServiceRouteBindingLastOperationStateFailed     ServiceRouteBindingLastOperationState = "failed"
	ServiceRouteBindingLastOperationStateInProgress ServiceRouteBindingLastOperationState = "in progress"
	ServiceRouteBindingLastOperationStateInitial    ServiceRouteBindingLastOperationState = "initial"
	ServiceRouteBindingLastOperationStateSucceeded  ServiceRouteBindingLastOperationState = "succeeded"
)

// Defines values for ServiceRouteBindingLastOperationType.
const (
	Create ServiceRouteBindingLastOperationType = "create"
	Delete ServiceRouteBindingLastOperationType = "delete"
)

// Defines values for SidecarOrigin.
const (
	SidecarOriginBuildpack SidecarOrigin = "buildpack"
	SidecarOriginUser      SidecarOrigin = "user"
)

// Defines values for SpaceFeatureName.
const (
	SpaceFeatureNameSsh SpaceFeatureName = "ssh"
)

// Defines values for TaskState.
const (
	TaskStateCANCELING TaskState = "CANCELING"
	TaskStateFAILED    TaskState = "FAILED"
	TaskStatePENDING   TaskState = "PENDING"
	TaskStateRUNNING   TaskState = "RUNNING"
	TaskStateSUCCEEDED TaskState = "SUCCEEDED"
)

// Defines values for GetV3AppUsageEventsParamsOrderBy.
const (
	GetV3AppUsageEventsParamsOrderByCreatedAt      GetV3AppUsageEventsParamsOrderBy = "created_at"
	GetV3AppUsageEventsParamsOrderByMinusCreatedAt GetV3AppUsageEventsParamsOrderBy = "-created_at"
)

// Defines values for ListAppsParamsOrderBy.
const (
	ListAppsParamsOrderByCreatedAt      ListAppsParamsOrderBy = "created_at"
	ListAppsParamsOrderByMinusCreatedAt ListAppsParamsOrderBy = "-created_at"
	ListAppsParamsOrderByMinusName      ListAppsParamsOrderBy = "-name"
	ListAppsParamsOrderByMinusState     ListAppsParamsOrderBy = "-state"
	ListAppsParamsOrderByMinusUpdatedAt ListAppsParamsOrderBy = "-updated_at"
	ListAppsParamsOrderByName           ListAppsParamsOrderBy = "name"
	ListAppsParamsOrderByState          ListAppsParamsOrderBy = "state"
	ListAppsParamsOrderByUpdatedAt      ListAppsParamsOrderBy = "updated_at"
)

// Defines values for ListAppsParamsInclude.
const (
	ListAppsParamsIncludeSpace             ListAppsParamsInclude = "space"
	ListAppsParamsIncludeSpaceOrganization ListAppsParamsInclude = "space.organization"
)

// Defines values for ListAppsParamsLifecycleType.
const (
	ListAppsParamsLifecycleTypeBuildpack ListAppsParamsLifecycleType = "buildpack"
	ListAppsParamsLifecycleTypeCnb       ListAppsParamsLifecycleType = "cnb"
	ListAppsParamsLifecycleTypeDocker    ListAppsParamsLifecycleType = "docker"
)

// Defines values for CreateAppJSONBodyLifecycleType.
const (
	CreateAppJSONBodyLifecycleTypeBuildpack CreateAppJSONBodyLifecycleType = "buildpack"
	CreateAppJSONBodyLifecycleTypeCnb       CreateAppJSONBodyLifecycleType = "cnb"
	CreateAppJSONBodyLifecycleTypeDocker    CreateAppJSONBodyLifecycleType = "docker"
)

// Defines values for CreateAppJSONBodyState.
const (
	CreateAppJSONBodyStateSTARTED CreateAppJSONBodyState = "STARTED"
	CreateAppJSONBodyStateSTOPPED CreateAppJSONBodyState = "STOPPED"
)

// Defines values for GetAppParamsInclude.
const (
	GetAppParamsIncludeSpace             GetAppParamsInclude = "space"
	GetAppParamsIncludeSpaceOrganization GetAppParamsInclude = "space.organization"
)

// Defines values for UpdateAppJSONBodyLifecycleType.
const (
	UpdateAppJSONBodyLifecycleTypeBuildpack UpdateAppJSONBodyLifecycleType = "buildpack"
	UpdateAppJSONBodyLifecycleTypeCnb       UpdateAppJSONBodyLifecycleType = "cnb"
	UpdateAppJSONBodyLifecycleTypeDocker    UpdateAppJSONBodyLifecycleType = "docker"
)

// Defines values for UpdateAppJSONBodyState.
const (
	STARTED UpdateAppJSONBodyState = "STARTED"
	STOPPED UpdateAppJSONBodyState = "STOPPED"
)

// Defines values for GetV3AppsGuidBuildsParamsOrderBy.
const (
	GetV3AppsGuidBuildsParamsOrderByCreatedAt      GetV3AppsGuidBuildsParamsOrderBy = "created_at"
	GetV3AppsGuidBuildsParamsOrderByMinusCreatedAt GetV3AppsGuidBuildsParamsOrderBy = "-created_at"
	GetV3AppsGuidBuildsParamsOrderByMinusUpdatedAt GetV3AppsGuidBuildsParamsOrderBy = "-updated_at"
	GetV3AppsGuidBuildsParamsOrderByUpdatedAt      GetV3AppsGuidBuildsParamsOrderBy = "updated_at"
)

// Defines values for GetV3AppsGuidFeaturesNameParamsName.
const (
	GetV3AppsGuidFeaturesNameParamsNameRevisions GetV3AppsGuidFeaturesNameParamsName = "revisions"
	GetV3AppsGuidFeaturesNameParamsNameSsh       GetV3AppsGuidFeaturesNameParamsName = "ssh"
)

// Defines values for PatchV3AppsGuidFeaturesNameParamsName.
const (
	PatchV3AppsGuidFeaturesNameParamsNameRevisions PatchV3AppsGuidFeaturesNameParamsName = "revisions"
	PatchV3AppsGuidFeaturesNameParamsNameSsh       PatchV3AppsGuidFeaturesNameParamsName = "ssh"
)

// Defines values for GetV3AppsGuidPackagesParamsOrderBy.
const (
	GetV3AppsGuidPackagesParamsOrderByCreatedAt      GetV3AppsGuidPackagesParamsOrderBy = "created_at"
	GetV3AppsGuidPackagesParamsOrderByMinusCreatedAt GetV3AppsGuidPackagesParamsOrderBy = "-created_at"
	GetV3AppsGuidPackagesParamsOrderByMinusUpdatedAt GetV3AppsGuidPackagesParamsOrderBy = "-updated_at"
	GetV3AppsGuidPackagesParamsOrderByUpdatedAt      GetV3AppsGuidPackagesParamsOrderBy = "updated_at"
)

// Defines values for GetV3AppsGuidSidecarsParamsOrderBy.
const (
	GetV3AppsGuidSidecarsParamsOrderByCreatedAt      GetV3AppsGuidSidecarsParamsOrderBy = "created_at"
	GetV3AppsGuidSidecarsParamsOrderByMinusCreatedAt GetV3AppsGuidSidecarsParamsOrderBy = "-created_at"
	GetV3AppsGuidSidecarsParamsOrderByMinusName      GetV3AppsGuidSidecarsParamsOrderBy = "-name"
	GetV3AppsGuidSidecarsParamsOrderByMinusUpdatedAt GetV3AppsGuidSidecarsParamsOrderBy = "-updated_at"
	GetV3AppsGuidSidecarsParamsOrderByName           GetV3AppsGuidSidecarsParamsOrderBy = "name"
	GetV3AppsGuidSidecarsParamsOrderByUpdatedAt      GetV3AppsGuidSidecarsParamsOrderBy = "updated_at"
)

// Defines values for GetV3AuditEventsParamsOrderBy.
const (
	GetV3AuditEventsParamsOrderByCreatedAt      GetV3AuditEventsParamsOrderBy = "created_at"
	GetV3AuditEventsParamsOrderByMinusCreatedAt GetV3AuditEventsParamsOrderBy = "-created_at"
	GetV3AuditEventsParamsOrderByMinusUpdatedAt GetV3AuditEventsParamsOrderBy = "-updated_at"
	GetV3AuditEventsParamsOrderByUpdatedAt      GetV3AuditEventsParamsOrderBy = "updated_at"
)

// Defines values for GetV3BuildpacksParamsOrderBy.
const (
	GetV3BuildpacksParamsOrderByCreatedAt      GetV3BuildpacksParamsOrderBy = "created_at"
	GetV3BuildpacksParamsOrderByMinusCreatedAt GetV3BuildpacksParamsOrderBy = "-created_at"
	GetV3BuildpacksParamsOrderByMinusPosition  GetV3BuildpacksParamsOrderBy = "-position"
	GetV3BuildpacksParamsOrderByMinusUpdatedAt GetV3BuildpacksParamsOrderBy = "-updated_at"
	GetV3BuildpacksParamsOrderByPosition       GetV3BuildpacksParamsOrderBy = "position"
	GetV3BuildpacksParamsOrderByUpdatedAt      GetV3BuildpacksParamsOrderBy = "updated_at"
)

// Defines values for GetV3BuildsParamsOrderBy.
const (
	GetV3BuildsParamsOrderByCreatedAt      GetV3BuildsParamsOrderBy = "created_at"
	GetV3BuildsParamsOrderByMinusCreatedAt GetV3BuildsParamsOrderBy = "-created_at"
	GetV3BuildsParamsOrderByMinusUpdatedAt GetV3BuildsParamsOrderBy = "-updated_at"
	GetV3BuildsParamsOrderByUpdatedAt      GetV3BuildsParamsOrderBy = "updated_at"
)

// Defines values for PostV3BuildsJSONBodyLifecycleType.
const (
	PostV3BuildsJSONBodyLifecycleTypeBuildpack PostV3BuildsJSONBodyLifecycleType = "buildpack"
	PostV3BuildsJSONBodyLifecycleTypeCnb       PostV3BuildsJSONBodyLifecycleType = "cnb"
	PostV3BuildsJSONBodyLifecycleTypeDocker    PostV3BuildsJSONBodyLifecycleType = "docker"
)

// Defines values for PatchV3BuildsGuidJSONBodyLifecycleType.
const (
	PatchV3BuildsGuidJSONBodyLifecycleTypeBuildpack PatchV3BuildsGuidJSONBodyLifecycleType = "buildpack"
	PatchV3BuildsGuidJSONBodyLifecycleTypeCnb       PatchV3BuildsGuidJSONBodyLifecycleType = "cnb"
	PatchV3BuildsGuidJSONBodyLifecycleTypeDocker    PatchV3BuildsGuidJSONBodyLifecycleType = "docker"
)

// Defines values for PatchV3BuildsGuidJSONBodyState.
const (
	PatchV3BuildsGuidJSONBodyStateFAILED  PatchV3BuildsGuidJSONBodyState = "FAILED"
	PatchV3BuildsGuidJSONBodyStateSTAGED  PatchV3BuildsGuidJSONBodyState = "STAGED"
	PatchV3BuildsGuidJSONBodyStateSTAGING PatchV3BuildsGuidJSONBodyState = "STAGING"
)

// Defines values for GetV3DeploymentsParamsOrderBy.
const (
	GetV3DeploymentsParamsOrderByCreatedAt      GetV3DeploymentsParamsOrderBy = "created_at"
	GetV3DeploymentsParamsOrderByMinusCreatedAt GetV3DeploymentsParamsOrderBy = "-created_at"
	GetV3DeploymentsParamsOrderByMinusUpdatedAt GetV3DeploymentsParamsOrderBy = "-updated_at"
	GetV3DeploymentsParamsOrderByUpdatedAt      GetV3DeploymentsParamsOrderBy = "updated_at"
)

// Defines values for PostV3DeploymentsJSONBodyStrategy.
const (
	PostV3DeploymentsJSONBodyStrategyCanary   PostV3DeploymentsJSONBodyStrategy = "canary"
	PostV3DeploymentsJSONBodyStrategyRecreate PostV3DeploymentsJSONBodyStrategy = "recreate"
	PostV3DeploymentsJSONBodyStrategyRolling  PostV3DeploymentsJSONBodyStrategy = "rolling"
)

// Defines values for GetV3EnvironmentVariableGroupsNameParamsName.
const (
	GetV3EnvironmentVariableGroupsNameParamsNameRunning GetV3EnvironmentVariableGroupsNameParamsName = "running"
	GetV3EnvironmentVariableGroupsNameParamsNameStaging GetV3EnvironmentVariableGroupsNameParamsName = "staging"
)

// Defines values for PatchV3EnvironmentVariableGroupsNameParamsName.
const (
	Running PatchV3EnvironmentVariableGroupsNameParamsName = "running"
	Staging PatchV3EnvironmentVariableGroupsNameParamsName = "staging"
)

// Defines values for GetV3FeatureFlagsParamsOrderBy.
const (
	GetV3FeatureFlagsParamsOrderByMinusName      GetV3FeatureFlagsParamsOrderBy = "-name"
	GetV3FeatureFlagsParamsOrderByMinusUpdatedAt GetV3FeatureFlagsParamsOrderBy = "-updated_at"
	GetV3FeatureFlagsParamsOrderByName           GetV3FeatureFlagsParamsOrderBy = "name"
	GetV3FeatureFlagsParamsOrderByUpdatedAt      GetV3FeatureFlagsParamsOrderBy = "updated_at"
)

// Defines values for GetV3IsolationSegmentsParamsOrderBy.
const (
	GetV3IsolationSegmentsParamsOrderByCreatedAt      GetV3IsolationSegmentsParamsOrderBy = "created_at"
	GetV3IsolationSegmentsParamsOrderByMinusCreatedAt GetV3IsolationSegmentsParamsOrderBy = "-created_at"
	GetV3IsolationSegmentsParamsOrderByMinusName      GetV3IsolationSegmentsParamsOrderBy = "-name"
	GetV3IsolationSegmentsParamsOrderByMinusUpdatedAt GetV3IsolationSegmentsParamsOrderBy = "-updated_at"
	GetV3IsolationSegmentsParamsOrderByName           GetV3IsolationSegmentsParamsOrderBy = "name"
	GetV3IsolationSegmentsParamsOrderByUpdatedAt      GetV3IsolationSegmentsParamsOrderBy = "updated_at"
)

// Defines values for GetV3JobsParamsOrderBy.
const (
	GetV3JobsParamsOrderByCreatedAt      GetV3JobsParamsOrderBy = "created_at"
	GetV3JobsParamsOrderByMinusCreatedAt GetV3JobsParamsOrderBy = "-created_at"
	GetV3JobsParamsOrderByMinusUpdatedAt GetV3JobsParamsOrderBy = "-updated_at"
	GetV3JobsParamsOrderByUpdatedAt      GetV3JobsParamsOrderBy = "updated_at"
)

// Defines values for ListOrganizationQuotasParamsOrderBy.
const (
	ListOrganizationQuotasParamsOrderByCreatedAt      ListOrganizationQuotasParamsOrderBy = "created_at"
	ListOrganizationQuotasParamsOrderByMinusCreatedAt ListOrganizationQuotasParamsOrderBy = "-created_at"
	ListOrganizationQuotasParamsOrderByMinusName      ListOrganizationQuotasParamsOrderBy = "-name"
	ListOrganizationQuotasParamsOrderByMinusUpdatedAt ListOrganizationQuotasParamsOrderBy = "-updated_at"
	ListOrganizationQuotasParamsOrderByName           ListOrganizationQuotasParamsOrderBy = "name"
	ListOrganizationQuotasParamsOrderByUpdatedAt      ListOrganizationQuotasParamsOrderBy = "updated_at"
)

// Defines values for ListOrganizationQuotasParamsInclude.
const (
	ListOrganizationQuotasParamsIncludeOrganizations ListOrganizationQuotasParamsInclude = "organizations"
)

// Defines values for GetOrganizationQuotaParamsInclude.
const (
	GetOrganizationQuotaParamsIncludeOrganizations GetOrganizationQuotaParamsInclude = "organizations"
)

// Defines values for GetV3PackagesParamsOrderBy.
const (
	GetV3PackagesParamsOrderByCreatedAt      GetV3PackagesParamsOrderBy = "created_at"
	GetV3PackagesParamsOrderByMinusCreatedAt GetV3PackagesParamsOrderBy = "-created_at"
	GetV3PackagesParamsOrderByMinusUpdatedAt GetV3PackagesParamsOrderBy = "-updated_at"
	GetV3PackagesParamsOrderByUpdatedAt      GetV3PackagesParamsOrderBy = "updated_at"
)

// Defines values for PostV3PackagesJSONBodyType.
const (
	PostV3PackagesJSONBodyTypeBits   PostV3PackagesJSONBodyType = "bits"
	PostV3PackagesJSONBodyTypeCnb    PostV3PackagesJSONBodyType = "cnb"
	PostV3PackagesJSONBodyTypeDocker PostV3PackagesJSONBodyType = "docker"
)

// Defines values for GetV3ProcessesParamsOrderBy.
const (
	GetV3ProcessesParamsOrderByCreatedAt      GetV3ProcessesParamsOrderBy = "created_at"
	GetV3ProcessesParamsOrderByMinusCreatedAt GetV3ProcessesParamsOrderBy = "-created_at"
	GetV3ProcessesParamsOrderByMinusType      GetV3ProcessesParamsOrderBy = "-type"
	GetV3ProcessesParamsOrderByMinusUpdatedAt GetV3ProcessesParamsOrderBy = "-updated_at"
	GetV3ProcessesParamsOrderByType           GetV3ProcessesParamsOrderBy = "type"
	GetV3ProcessesParamsOrderByUpdatedAt      GetV3ProcessesParamsOrderBy = "updated_at"
)

// Defines values for PatchV3ProcessesGuidJSONBodyHealthCheckType.
const (
	PatchV3ProcessesGuidJSONBodyHealthCheckTypeHttp    PatchV3ProcessesGuidJSONBodyHealthCheckType = "http"
	PatchV3ProcessesGuidJSONBodyHealthCheckTypePort    PatchV3ProcessesGuidJSONBodyHealthCheckType = "port"
	PatchV3ProcessesGuidJSONBodyHealthCheckTypeProcess PatchV3ProcessesGuidJSONBodyHealthCheckType = "process"
)

// Defines values for PatchV3ProcessesGuidJSONBodyReadinessHealthCheckType.
const (
	PatchV3ProcessesGuidJSONBodyReadinessHealthCheckTypeHttp    PatchV3ProcessesGuidJSONBodyReadinessHealthCheckType = "http"
	PatchV3ProcessesGuidJSONBodyReadinessHealthCheckTypePort    PatchV3ProcessesGuidJSONBodyReadinessHealthCheckType = "port"
	PatchV3ProcessesGuidJSONBodyReadinessHealthCheckTypeProcess PatchV3ProcessesGuidJSONBodyReadinessHealthCheckType = "process"
)

// Defines values for GetV3ProcessesGuidSidecarsParamsOrderBy.
const (
	GetV3ProcessesGuidSidecarsParamsOrderByCreatedAt      GetV3ProcessesGuidSidecarsParamsOrderBy = "created_at"
	GetV3ProcessesGuidSidecarsParamsOrderByMinusCreatedAt GetV3ProcessesGuidSidecarsParamsOrderBy = "-created_at"
	GetV3ProcessesGuidSidecarsParamsOrderByMinusName      GetV3ProcessesGuidSidecarsParamsOrderBy = "-name"
	GetV3ProcessesGuidSidecarsParamsOrderByMinusUpdatedAt GetV3ProcessesGuidSidecarsParamsOrderBy = "-updated_at"
	GetV3ProcessesGuidSidecarsParamsOrderByName           GetV3ProcessesGuidSidecarsParamsOrderBy = "name"
	GetV3ProcessesGuidSidecarsParamsOrderByUpdatedAt      GetV3ProcessesGuidSidecarsParamsOrderBy = "updated_at"
)

// Defines values for GetV3RolesParamsOrderBy.
const (
	GetV3RolesParamsOrderByCreatedAt      GetV3RolesParamsOrderBy = "created_at"
	GetV3RolesParamsOrderByMinusCreatedAt GetV3RolesParamsOrderBy = "-created_at"
	GetV3RolesParamsOrderByMinusUpdatedAt GetV3RolesParamsOrderBy = "-updated_at"
	GetV3RolesParamsOrderByUpdatedAt      GetV3RolesParamsOrderBy = "updated_at"
)

// Defines values for GetV3RolesParamsInclude.
const (
	GetV3RolesParamsIncludeOrganization GetV3RolesParamsInclude = "organization"
	GetV3RolesParamsIncludeSpace        GetV3RolesParamsInclude = "space"
	GetV3RolesParamsIncludeUser         GetV3RolesParamsInclude = "user"
)

// Defines values for GetV3RolesGuidParamsInclude.
const (
	GetV3RolesGuidParamsIncludeOrganization GetV3RolesGuidParamsInclude = "organization"
	GetV3RolesGuidParamsIncludeSpace        GetV3RolesGuidParamsInclude = "space"
	GetV3RolesGuidParamsIncludeUser         GetV3RolesGuidParamsInclude = "user"
)

// Defines values for GetV3RoutesParamsOrderBy.
const (
	GetV3RoutesParamsOrderByCreatedAt      GetV3RoutesParamsOrderBy = "created_at"
	GetV3RoutesParamsOrderByHost           GetV3RoutesParamsOrderBy = "host"
	GetV3RoutesParamsOrderByMinusCreatedAt GetV3RoutesParamsOrderBy = "-created_at"
	GetV3RoutesParamsOrderByMinusHost      GetV3RoutesParamsOrderBy = "-host"
	GetV3RoutesParamsOrderByMinusPath      GetV3RoutesParamsOrderBy = "-path"
	GetV3RoutesParamsOrderByMinusUpdatedAt GetV3RoutesParamsOrderBy = "-updated_at"
	GetV3RoutesParamsOrderByPath           GetV3RoutesParamsOrderBy = "path"
	GetV3RoutesParamsOrderByUpdatedAt      GetV3RoutesParamsOrderBy = "updated_at"
)

// Defines values for GetV3RoutesParamsInclude.
const (
	GetV3RoutesParamsIncludeDomain            GetV3RoutesParamsInclude = "domain"
	GetV3RoutesParamsIncludeSpace             GetV3RoutesParamsInclude = "space"
	GetV3RoutesParamsIncludeSpaceOrganization GetV3RoutesParamsInclude = "space.organization"
)

// Defines values for GetV3RoutesGuidParamsInclude.
const (
	GetV3RoutesGuidParamsIncludeDomain            GetV3RoutesGuidParamsInclude = "domain"
	GetV3RoutesGuidParamsIncludeSpace             GetV3RoutesGuidParamsInclude = "space"
	GetV3RoutesGuidParamsIncludeSpaceOrganization GetV3RoutesGuidParamsInclude = "space.organization"
)

// Defines values for PatchV3RoutesGuidDestinationsJSONBodyDestinationsProtocol.
const (
	PatchV3RoutesGuidDestinationsJSONBodyDestinationsProtocolHttp1 PatchV3RoutesGuidDestinationsJSONBodyDestinationsProtocol = "http1"
	PatchV3RoutesGuidDestinationsJSONBodyDestinationsProtocolHttp2 PatchV3RoutesGuidDestinationsJSONBodyDestinationsProtocol = "http2"
)

// Defines values for PostV3RoutesGuidDestinationsJSONBodyDestinationsProtocol.
const (
	Http1 PostV3RoutesGuidDestinationsJSONBodyDestinationsProtocol = "http1"
	Http2 PostV3RoutesGuidDestinationsJSONBodyDestinationsProtocol = "http2"
)

// Defines values for GetV3SecurityGroupsParamsOrderBy.
const (
	GetV3SecurityGroupsParamsOrderByCreatedAt      GetV3SecurityGroupsParamsOrderBy = "created_at"
	GetV3SecurityGroupsParamsOrderByMinusCreatedAt GetV3SecurityGroupsParamsOrderBy = "-created_at"
	GetV3SecurityGroupsParamsOrderByMinusName      GetV3SecurityGroupsParamsOrderBy = "-name"
	GetV3SecurityGroupsParamsOrderByMinusUpdatedAt GetV3SecurityGroupsParamsOrderBy = "-updated_at"
	GetV3SecurityGroupsParamsOrderByName           GetV3SecurityGroupsParamsOrderBy = "name"
	GetV3SecurityGroupsParamsOrderByUpdatedAt      GetV3SecurityGroupsParamsOrderBy = "updated_at"
)

// Defines values for GetV3ServiceBrokersParamsOrderBy.
const (
	GetV3ServiceBrokersParamsOrderByCreatedAt      GetV3ServiceBrokersParamsOrderBy = "created_at"
	GetV3ServiceBrokersParamsOrderByMinusCreatedAt GetV3ServiceBrokersParamsOrderBy = "-created_at"
	GetV3ServiceBrokersParamsOrderByMinusName      GetV3ServiceBrokersParamsOrderBy = "-name"
	GetV3ServiceBrokersParamsOrderByMinusUpdatedAt GetV3ServiceBrokersParamsOrderBy = "-updated_at"
	GetV3ServiceBrokersParamsOrderByName           GetV3ServiceBrokersParamsOrderBy = "name"
	GetV3ServiceBrokersParamsOrderByUpdatedAt      GetV3ServiceBrokersParamsOrderBy = "updated_at"
)

// Defines values for PostV3ServiceCredentialBindingsJSONBodyType.
const (
	PostV3ServiceCredentialBindingsJSONBodyTypeApp PostV3ServiceCredentialBindingsJSONBodyType = "app"
	PostV3ServiceCredentialBindingsJSONBodyTypeKey PostV3ServiceCredentialBindingsJSONBodyType = "key"
)

// Defines values for GetV3ServiceCredentialBindingsGuidParamsInclude.
const (
	GetV3ServiceCredentialBindingsGuidParamsIncludeApp             GetV3ServiceCredentialBindingsGuidParamsInclude = "app"
	GetV3ServiceCredentialBindingsGuidParamsIncludeServiceInstance GetV3ServiceCredentialBindingsGuidParamsInclude = "service_instance"
)

// Defines values for GetV3ServiceInstancesParamsType.
const (
	GetV3ServiceInstancesParamsTypeManaged      GetV3ServiceInstancesParamsType = "managed"
	GetV3ServiceInstancesParamsTypeUserProvided GetV3ServiceInstancesParamsType = "user-provided"
)

// Defines values for GetV3ServiceInstancesParamsOrderBy.
const (
	GetV3ServiceInstancesParamsOrderByCreatedAt      GetV3ServiceInstancesParamsOrderBy = "created_at"
	GetV3ServiceInstancesParamsOrderByMinusCreatedAt GetV3ServiceInstancesParamsOrderBy = "-created_at"
	GetV3ServiceInstancesParamsOrderByMinusName      GetV3ServiceInstancesParamsOrderBy = "-name"
	GetV3ServiceInstancesParamsOrderByMinusUpdatedAt GetV3ServiceInstancesParamsOrderBy = "-updated_at"
	GetV3ServiceInstancesParamsOrderByName           GetV3ServiceInstancesParamsOrderBy = "name"
	GetV3ServiceInstancesParamsOrderByUpdatedAt      GetV3ServiceInstancesParamsOrderBy = "updated_at"
)

// Defines values for GetV3ServiceRouteBindingsParamsOrderBy.
const (
	GetV3ServiceRouteBindingsParamsOrderByCreatedAt      GetV3ServiceRouteBindingsParamsOrderBy = "created_at"
	GetV3ServiceRouteBindingsParamsOrderByMinusCreatedAt GetV3ServiceRouteBindingsParamsOrderBy = "-created_at"
	GetV3ServiceRouteBindingsParamsOrderByMinusUpdatedAt GetV3ServiceRouteBindingsParamsOrderBy = "-updated_at"
	GetV3ServiceRouteBindingsParamsOrderByUpdatedAt      GetV3ServiceRouteBindingsParamsOrderBy = "updated_at"
)

// Defines values for GetV3ServiceRouteBindingsGuidParamsInclude.
const (
	GetV3ServiceRouteBindingsGuidParamsIncludeRoute           GetV3ServiceRouteBindingsGuidParamsInclude = "route"
	GetV3ServiceRouteBindingsGuidParamsIncludeServiceInstance GetV3ServiceRouteBindingsGuidParamsInclude = "service_instance"
)

// Defines values for GetV3ServiceUsageEventsParamsOrderBy.
const (
	GetV3ServiceUsageEventsParamsOrderByCreatedAt      GetV3ServiceUsageEventsParamsOrderBy = "created_at"
	GetV3ServiceUsageEventsParamsOrderByMinusCreatedAt GetV3ServiceUsageEventsParamsOrderBy = "-created_at"
)

// Defines values for GetV3ServiceUsageEventsParamsServiceInstanceTypes.
const (
	ManagedServiceInstance      GetV3ServiceUsageEventsParamsServiceInstanceTypes = "managed_service_instance"
	UserProvidedServiceInstance GetV3ServiceUsageEventsParamsServiceInstanceTypes = "user_provided_service_instance"
)

// Defines values for GetV3SpaceQuotasParamsOrderBy.
const (
	GetV3SpaceQuotasParamsOrderByCreatedAt      GetV3SpaceQuotasParamsOrderBy = "created_at"
	GetV3SpaceQuotasParamsOrderByMinusCreatedAt GetV3SpaceQuotasParamsOrderBy = "-created_at"
	GetV3SpaceQuotasParamsOrderByMinusName      GetV3SpaceQuotasParamsOrderBy = "-name"
	GetV3SpaceQuotasParamsOrderByMinusUpdatedAt GetV3SpaceQuotasParamsOrderBy = "-updated_at"
	GetV3SpaceQuotasParamsOrderByName           GetV3SpaceQuotasParamsOrderBy = "name"
	GetV3SpaceQuotasParamsOrderByUpdatedAt      GetV3SpaceQuotasParamsOrderBy = "updated_at"
)

// Defines values for GetV3SpaceQuotasParamsInclude.
const (
	GetV3SpaceQuotasParamsIncludeOrganization GetV3SpaceQuotasParamsInclude = "organization"
	GetV3SpaceQuotasParamsIncludeSpaces       GetV3SpaceQuotasParamsInclude = "spaces"
)

// Defines values for GetV3SpaceQuotasGuidParamsInclude.
const (
	GetV3SpaceQuotasGuidParamsIncludeOrganization GetV3SpaceQuotasGuidParamsInclude = "organization"
	GetV3SpaceQuotasGuidParamsIncludeSpaces       GetV3SpaceQuotasGuidParamsInclude = "spaces"
)

// Defines values for GetV3SpacesParamsOrderBy.
const (
	GetV3SpacesParamsOrderByCreatedAt      GetV3SpacesParamsOrderBy = "created_at"
	GetV3SpacesParamsOrderByMinusCreatedAt GetV3SpacesParamsOrderBy = "-created_at"
	GetV3SpacesParamsOrderByMinusName      GetV3SpacesParamsOrderBy = "-name"
	GetV3SpacesParamsOrderByMinusUpdatedAt GetV3SpacesParamsOrderBy = "-updated_at"
	GetV3SpacesParamsOrderByName           GetV3SpacesParamsOrderBy = "name"
	GetV3SpacesParamsOrderByUpdatedAt      GetV3SpacesParamsOrderBy = "updated_at"
)

// Defines values for GetV3SpacesParamsInclude.
const (
	GetV3SpacesParamsIncludeOrganization GetV3SpacesParamsInclude = "organization"
)

// Defines values for GetV3SpacesGuidFeaturesNameParamsName.
const (
	GetV3SpacesGuidFeaturesNameParamsNameSsh GetV3SpacesGuidFeaturesNameParamsName = "ssh"
)

// Defines values for PatchV3SpacesGuidFeaturesNameParamsName.
const (
	PatchV3SpacesGuidFeaturesNameParamsNameSsh PatchV3SpacesGuidFeaturesNameParamsName = "ssh"
)

// Defines values for GetV3SpacesGuidRunningSecurityGroupsParamsOrderBy.
const (
	GetV3SpacesGuidRunningSecurityGroupsParamsOrderByCreatedAt      GetV3SpacesGuidRunningSecurityGroupsParamsOrderBy = "created_at"
	GetV3SpacesGuidRunningSecurityGroupsParamsOrderByMinusCreatedAt GetV3SpacesGuidRunningSecurityGroupsParamsOrderBy = "-created_at"
	GetV3SpacesGuidRunningSecurityGroupsParamsOrderByMinusName      GetV3SpacesGuidRunningSecurityGroupsParamsOrderBy = "-name"
	GetV3SpacesGuidRunningSecurityGroupsParamsOrderByMinusUpdatedAt GetV3SpacesGuidRunningSecurityGroupsParamsOrderBy = "-updated_at"
	GetV3SpacesGuidRunningSecurityGroupsParamsOrderByName           GetV3SpacesGuidRunningSecurityGroupsParamsOrderBy = "name"
	GetV3SpacesGuidRunningSecurityGroupsParamsOrderByUpdatedAt      GetV3SpacesGuidRunningSecurityGroupsParamsOrderBy = "updated_at"
)

// Defines values for GetV3SpacesGuidStagingSecurityGroupsParamsOrderBy.
const (
	GetV3SpacesGuidStagingSecurityGroupsParamsOrderByCreatedAt      GetV3SpacesGuidStagingSecurityGroupsParamsOrderBy = "created_at"
	GetV3SpacesGuidStagingSecurityGroupsParamsOrderByMinusCreatedAt GetV3SpacesGuidStagingSecurityGroupsParamsOrderBy = "-created_at"
	GetV3SpacesGuidStagingSecurityGroupsParamsOrderByMinusName      GetV3SpacesGuidStagingSecurityGroupsParamsOrderBy = "-name"
	GetV3SpacesGuidStagingSecurityGroupsParamsOrderByMinusUpdatedAt GetV3SpacesGuidStagingSecurityGroupsParamsOrderBy = "-updated_at"
	GetV3SpacesGuidStagingSecurityGroupsParamsOrderByName           GetV3SpacesGuidStagingSecurityGroupsParamsOrderBy = "name"
	GetV3SpacesGuidStagingSecurityGroupsParamsOrderByUpdatedAt      GetV3SpacesGuidStagingSecurityGroupsParamsOrderBy = "updated_at"
)

// Defines values for GetV3SpacesGuidUsersParamsOrderBy.
const (
	GetV3SpacesGuidUsersParamsOrderByCreatedAt      GetV3SpacesGuidUsersParamsOrderBy = "created_at"
	GetV3SpacesGuidUsersParamsOrderByMinusCreatedAt GetV3SpacesGuidUsersParamsOrderBy = "-created_at"
	GetV3SpacesGuidUsersParamsOrderByMinusUpdatedAt GetV3SpacesGuidUsersParamsOrderBy = "-updated_at"
	GetV3SpacesGuidUsersParamsOrderByUpdatedAt      GetV3SpacesGuidUsersParamsOrderBy = "updated_at"
)

// Defines values for GetV3StacksParamsOrderBy.
const (
	GetV3StacksParamsOrderByCreatedAt GetV3StacksParamsOrderBy = "created_at"
	GetV3StacksParamsOrderByName      GetV3StacksParamsOrderBy = "name"
	GetV3StacksParamsOrderByUpdatedAt GetV3StacksParamsOrderBy = "updated_at"
)

// Defines values for GetV3StacksGuidAppsParamsOrderBy.
const (
	GetV3StacksGuidAppsParamsOrderByCreatedAt GetV3StacksGuidAppsParamsOrderBy = "created_at"
	GetV3StacksGuidAppsParamsOrderByName      GetV3StacksGuidAppsParamsOrderBy = "name"
	GetV3StacksGuidAppsParamsOrderByUpdatedAt GetV3StacksGuidAppsParamsOrderBy = "updated_at"
)

// Defines values for GetV3TasksParamsOrderBy.
const (
	GetV3TasksParamsOrderByCreatedAt GetV3TasksParamsOrderBy = "created_at"
	GetV3TasksParamsOrderByUpdatedAt GetV3TasksParamsOrderBy = "updated_at"
)

// Defines values for GetV3UsersParamsOrderBy.
const (
	GetV3UsersParamsOrderByCreatedAt GetV3UsersParamsOrderBy = "created_at"
	GetV3UsersParamsOrderByUpdatedAt GetV3UsersParamsOrderBy = "updated_at"
)

// App defines model for App.
type App struct {
	// CreatedAt When the app was created
	CreatedAt time.Time `json:"created_at"`

	// Guid Unique identifier for the app
	Guid      openapi_types.UUID `json:"guid"`
	Lifecycle struct {
		Data struct {
			// Buildpacks Buildpacks for buildpack/cnb lifecycle
			Buildpacks *[]string `json:"buildpacks,omitempty"`

			// Image Docker image reference
			Image *string `json:"image,omitempty"`

			// Stack Stack for buildpack lifecycle
			Stack *string `json:"stack,omitempty"`
		} `json:"data"`

		// Type Lifecycle type
		Type AppLifecycleType `json:"type"`
	} `json:"lifecycle"`
	Links struct {
		CurrentDroplet       *Link           `json:"current_droplet,omitempty"`
		DeployedRevisions    *Link           `json:"deployed_revisions,omitempty"`
		Droplets             *Link           `json:"droplets,omitempty"`
		EnvironmentVariables *Link           `json:"environment_variables,omitempty"`
		Features             *Link           `json:"features,omitempty"`
		Packages             *Link           `json:"packages,omitempty"`
		Processes            *Link           `json:"processes,omitempty"`
		Revisions            *Link           `json:"revisions,omitempty"`
		Self                 *Link           `json:"self,omitempty"`
		Space                *Link           `json:"space,omitempty"`
		Start                *LinkWithMethod `json:"start,omitempty"`
		Stop                 *LinkWithMethod `json:"stop,omitempty"`
		Tasks                *Link           `json:"tasks,omitempty"`
	} `json:"links"`
	Metadata struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata"`

	// Name Name of the app
	Name          string `json:"name"`
	Relationships struct {
		CurrentDroplet *struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data"`
		} `json:"current_droplet"`
		Space struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"space"`
	} `json:"relationships"`

	// State Current desired state of the app
	State AppState `json:"state"`

	// UpdatedAt When the app was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// AppLifecycleType Lifecycle type
type AppLifecycleType string

// AppState Current desired state of the app
type AppState string

// AppFeature defines model for AppFeature.
type AppFeature struct {
	// Description Human-readable description of the feature
	Description string `json:"description"`

	// Enabled Whether the feature is enabled for this app
	Enabled bool `json:"enabled"`

	// Metadata Additional metadata for the app feature
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name The feature identifier
	Name AppFeatureName `json:"name"`
}

// AppFeatureName The feature identifier
type AppFeatureName string

// AppFeatureUpdate defines model for AppFeatureUpdate.
type AppFeatureUpdate struct {
	// Enabled Whether to enable or disable the feature
	Enabled bool `json:"enabled"`

	// Metadata Additional metadata for the app feature
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// AppUsageEvent defines model for AppUsageEvent.
type AppUsageEvent struct {
	App *struct {
		// Guid Unique identifier of the app that this event pertains to, if applicable
		Guid *string `json:"guid"`

		// Name Name of the app that this event pertains to, if applicable
		Name *string `json:"name"`
	} `json:"app,omitempty"`
	Buildpack *struct {
		// Guid Unique identifier of the buildpack that this event pertains to, if applicable
		Guid *string `json:"guid"`

		// Name Name of the buildpack that this event pertains to, if applicable
		Name *string `json:"name"`
	} `json:"buildpack,omitempty"`

	// CreatedAt The time with zone when the event occurred
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Guid Unique identifier for the event
	Guid          *openapi_types.UUID `json:"guid,omitempty"`
	InstanceCount *struct {
		// Current Current instance count of the app that this event pertains to, if applicable
		Current *int `json:"current"`

		// Previous Previous instance count of the app that this event pertains to, if applicable
		Previous *int `json:"previous"`
	} `json:"instance_count,omitempty"`
	Links *struct {
		Self *struct {
			// Href Link to the app usage event resource
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	MemoryInMbPerInstance *struct {
		// Current Current memory in MB of the app that this event pertains to, if applicable
		Current *int `json:"current"`

		// Previous Previous memory in MB of the app that this event pertains to, if applicable
		Previous *int `json:"previous"`
	} `json:"memory_in_mb_per_instance,omitempty"`
	Organization *struct {
		// Guid Unique identifier of the org that this event pertains to, if applicable
		Guid *string `json:"guid"`
	} `json:"organization,omitempty"`
	Process *struct {
		// Guid Unique identifier of the process that this event pertains to, if applicable
		Guid *string `json:"guid"`

		// Type Type of the process that this event pertains to, if applicable
		Type *string `json:"type"`
	} `json:"process,omitempty"`
	Space *struct {
		// Guid Unique identifier of the space that this event pertains to, if applicable
		Guid *string `json:"guid"`

		// Name Name of the space that this event pertains to, if applicable
		Name *string `json:"name"`
	} `json:"space,omitempty"`
	State *struct {
		// Current Current state of the app that this event pertains to, if applicable
		Current *string `json:"current"`

		// Previous Previous state of the app that this event pertains to, if applicable
		Previous *string `json:"previous"`
	} `json:"state,omitempty"`
	Task *struct {
		// Guid Unique identifier of the task that this event pertains to, if applicable
		Guid *string `json:"guid"`

		// Name Name of the task that this event pertains to, if applicable
		Name *string `json:"name"`
	} `json:"task,omitempty"`

	// UpdatedAt Identical to created_at (events are created, never updated)
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// AppUsageEventList defines model for AppUsageEventList.
type AppUsageEventList struct {
	Pagination *struct {
		First *struct {
			// Href Link to the first page
			Href *string `json:"href,omitempty"`
		} `json:"first,omitempty"`
		Last *struct {
			// Href Link to the last page
			Href *string `json:"href,omitempty"`
		} `json:"last,omitempty"`
		Next *struct {
			// Href Link to the next page
			Href *string `json:"href,omitempty"`
		} `json:"next,omitempty"`

		// Previous Link to the previous page, if applicable
		Previous *map[string]interface{} `json:"previous"`

		// TotalPages Total number of pages
		TotalPages *int `json:"total_pages,omitempty"`

		// TotalResults Total number of results
		TotalResults *int `json:"total_results,omitempty"`
	} `json:"pagination,omitempty"`
	Resources *[]AppUsageEvent `json:"resources,omitempty"`
}

// AuditEvent defines model for AuditEvent.
type AuditEvent struct {
	Actor *struct {
		// Guid Unique identifier for the actor
		Guid *string `json:"guid,omitempty"`

		// Name The name of the actor
		Name *string `json:"name,omitempty"`

		// Type The actor type
		Type *string `json:"type,omitempty"`
	} `json:"actor,omitempty"`

	// CreatedAt The time with zone when the object was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Data Additional information about event
	Data *map[string]interface{} `json:"data,omitempty"`

	// Guid Unique identifier for the event
	Guid  *openapi_types.UUID `json:"guid,omitempty"`
	Links *struct {
		Self *struct {
			// Href Link to the audit event resource
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Organization *struct {
		// Guid Unique identifier for the organization where the event occurred
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"organization,omitempty"`
	Space *struct {
		// Guid Unique identifier for the space where the event occurred
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"space,omitempty"`
	Target *struct {
		// Guid Unique identifier for the target
		Guid *openapi_types.UUID `json:"guid,omitempty"`

		// Name The name of the target
		Name *string `json:"name,omitempty"`

		// Type The target type
		Type *string `json:"type,omitempty"`
	} `json:"target,omitempty"`

	// Type The type of the event
	Type *string `json:"type,omitempty"`

	// UpdatedAt The time with zone when the object was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// AuditEventList defines model for AuditEventList.
type AuditEventList struct {
	Pagination *struct {
		First *struct {
			// Href Link to the first page
			Href *string `json:"href,omitempty"`
		} `json:"first,omitempty"`
		Last *struct {
			// Href Link to the last page
			Href *string `json:"href,omitempty"`
		} `json:"last,omitempty"`

		// Next Link to the next page, if applicable
		Next *map[string]interface{} `json:"next"`

		// Previous Link to the previous page, if applicable
		Previous *map[string]interface{} `json:"previous"`

		// TotalPages Total number of pages
		TotalPages *int `json:"total_pages,omitempty"`

		// TotalResults Total number of results
		TotalResults *int `json:"total_results,omitempty"`
	} `json:"pagination,omitempty"`
	Resources *[]AuditEvent `json:"resources,omitempty"`
}

// Authentication defines model for Authentication.
type Authentication struct {
	Credentials struct {
		Password string `json:"password"`
		Username string `json:"username"`
	} `json:"credentials"`
	Type AuthenticationType `json:"type"`
}

// AuthenticationType defines model for Authentication.Type.
type AuthenticationType string

// BrokerCatalog defines model for BrokerCatalog.
type BrokerCatalog struct {
	Features *struct {
		AllowContextUpdates  *bool `json:"allow_context_updates,omitempty"`
		Bindable             *bool `json:"bindable,omitempty"`
		BindingsRetrievable  *bool `json:"bindings_retrievable,omitempty"`
		InstancesRetrievable *bool `json:"instances_retrievable,omitempty"`
		PlanUpdateable       *bool `json:"plan_updateable,omitempty"`
	} `json:"features,omitempty"`
	Id                     *string `json:"id,omitempty"`
	MaximumPollingDuration *int    `json:"maximum_polling_duration"`
	Metadata               *struct {
		Shareable *bool `json:"shareable,omitempty"`
	} `json:"metadata,omitempty"`
}

// Build defines model for Build.
type Build struct {
	// CreatedAt The time the build was created
	CreatedAt time.Time `json:"created_at"`
	CreatedBy struct {
		// Email Email of the user
		Email *string `json:"email,omitempty"`

		// Guid GUID of the user who created the build
		Guid *openapi_types.UUID `json:"guid,omitempty"`

		// Name Name of the user
		Name *string `json:"name,omitempty"`
	} `json:"created_by"`
	Droplet *struct {
		// Guid GUID of the resulting droplet (if successful)
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"droplet"`

	// Error Error message if build failed
	Error *string `json:"error"`

	// Guid Unique identifier for the build
	Guid      openapi_types.UUID `json:"guid"`
	Lifecycle struct {
		Data *struct {
			// BuildpackLifecycleBuildpacks Detected buildpacks with versions
			BuildpackLifecycleBuildpacks *[]struct {
				DetectOutput *string `json:"detect_output,omitempty"`
				Name         *string `json:"name,omitempty"`
				Version      *string `json:"version,omitempty"`
			} `json:"buildpack_lifecycle_buildpacks,omitempty"`

			// Buildpacks Buildpacks used (buildpack lifecycle)
			Buildpacks *[]string `json:"buildpacks,omitempty"`

			// Image Docker image (docker lifecycle) or resulting image (cnb)
			Image *string `json:"image,omitempty"`

			// Stack Stack used for staging
			Stack *string `json:"stack,omitempty"`
		} `json:"data,omitempty"`

		// Type Type of lifecycle used
		Type *BuildLifecycleType `json:"type,omitempty"`
	} `json:"lifecycle"`
	Links struct {
		App *struct {
			// Href URL to the app
			Href *string `json:"href,omitempty"`
		} `json:"app,omitempty"`
		Droplet *struct {
			// Href URL to the resulting droplet
			Href *string `json:"href,omitempty"`
		} `json:"droplet"`
		Package *struct {
			// Href URL to the package
			Href *string `json:"href,omitempty"`
		} `json:"package,omitempty"`
		Self *struct {
			// Href URL to this build
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links"`
	Metadata struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata"`
	Package struct {
		// Guid GUID of the package being staged
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"package"`

	// StagingDiskInMb Disk space allocated for staging
	StagingDiskInMb int `json:"staging_disk_in_mb"`

	// StagingLogRateLimitBytesPerSecond Log rate limit during staging (-1 for unlimited)
	StagingLogRateLimitBytesPerSecond int `json:"staging_log_rate_limit_bytes_per_second"`

	// StagingMemoryInMb Memory allocated for staging
	StagingMemoryInMb int `json:"staging_memory_in_mb"`

	// State Current state of the build
	State BuildState `json:"state"`

	// UpdatedAt The time the build was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// BuildLifecycleType Type of lifecycle used
type BuildLifecycleType string

// BuildState Current state of the build
type BuildState string

// Buildpack defines model for Buildpack.
type Buildpack struct {
	BuildpackName *string `json:"buildpack_name,omitempty"`

	// CreatedAt The time the buildpack was created
	CreatedAt    time.Time `json:"created_at"`
	DetectOutput *string   `json:"detect_output,omitempty"`

	// Enabled Whether buildpack is available for use
	Enabled bool `json:"enabled"`

	// Filename Filename of uploaded buildpack
	Filename *string `json:"filename"`

	// Guid Unique identifier for the buildpack
	Guid openapi_types.UUID `json:"guid"`

	// Lifecycle Lifecycle information (for Cloud Native Buildpacks)
	Lifecycle *struct {
		Data *struct {
			// Image Image reference for Cloud Native Buildpack
			Image *string `json:"image,omitempty"`

			// Version Version of the buildpack
			Version *string `json:"version,omitempty"`
		} `json:"data,omitempty"`

		// Type Type of buildpack lifecycle
		Type *BuildpackLifecycleType `json:"type,omitempty"`
	} `json:"lifecycle,omitempty"`
	Links struct {
		Self *struct {
			// Href URL to this buildpack
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
		Upload *struct {
			// Href URL to upload buildpack bits
			Href   *string                     `json:"href,omitempty"`
			Method *BuildpackLinksUploadMethod `json:"method,omitempty"`
		} `json:"upload,omitempty"`
	} `json:"links"`

	// Locked Whether buildpack updates are prevented
	Locked   bool `json:"locked"`
	Metadata struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata"`

	// Name Name of the buildpack
	Name string `json:"name"`

	// Position Priority position for automatic detection
	Position int `json:"position"`

	// Stack Stack the buildpack runs on
	Stack *string `json:"stack"`

	// State Current state of the buildpack
	State BuildpackState `json:"state"`

	// UpdatedAt The time the buildpack was last updated
	UpdatedAt time.Time `json:"updated_at"`
	Version   *string   `json:"version,omitempty"`
}

// BuildpackLifecycleType Type of buildpack lifecycle
type BuildpackLifecycleType string

// BuildpackLinksUploadMethod defines model for Buildpack.Links.Upload.Method.
type BuildpackLinksUploadMethod string

// BuildpackState Current state of the buildpack
type BuildpackState string

// Cost defines model for Cost.
type Cost struct {
	Amount   *float32 `json:"amount,omitempty"`
	Currency *string  `json:"currency,omitempty"`
	Unit     *string  `json:"unit,omitempty"`
}

// Deployment defines model for Deployment.
type Deployment struct {
	// CreatedAt The time the deployment was created
	CreatedAt time.Time `json:"created_at"`
	Droplet   struct {
		// Guid GUID of the droplet being deployed
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"droplet"`

	// Guid Unique identifier for the deployment
	Guid  openapi_types.UUID `json:"guid"`
	Links struct {
		App *struct {
			// Href URL to the app
			Href *string `json:"href,omitempty"`
		} `json:"app,omitempty"`
		Cancel *struct {
			// Href URL to cancel the deployment
			Href   *string                      `json:"href,omitempty"`
			Method *DeploymentLinksCancelMethod `json:"method,omitempty"`
		} `json:"cancel,omitempty"`
		Self *struct {
			// Href URL to this deployment
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links"`
	Metadata struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata"`

	// NewProcesses List of new processes created by this deployment
	NewProcesses []struct {
		Guid *openapi_types.UUID `json:"guid,omitempty"`
		Type *string             `json:"type,omitempty"`
	} `json:"new_processes"`
	Options *struct {
		// MaxInFlight Maximum number of instances to update simultaneously
		MaxInFlight *int `json:"max_in_flight,omitempty"`
	} `json:"options,omitempty"`
	PreviousDroplet *struct {
		// Guid GUID of the previous droplet
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"previous_droplet"`
	Relationships struct {
		App *struct {
			Data *struct {
				// Guid GUID of the app being deployed
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"app,omitempty"`
	} `json:"relationships"`
	Revision *struct {
		// Guid GUID of the revision being deployed
		Guid *openapi_types.UUID `json:"guid,omitempty"`

		// Version Version number of the revision
		Version *int `json:"version,omitempty"`
	} `json:"revision"`

	// State Current state of the deployment
	State  DeploymentState `json:"state"`
	Status struct {
		// Details Additional status details
		Details *map[string]interface{} `json:"details"`

		// Reason Reason for the current status
		Reason *DeploymentStatusReason `json:"reason"`

		// Value Status value
		Value *DeploymentStatusValue `json:"value,omitempty"`
	} `json:"status"`

	// Strategy Deployment strategy being used
	Strategy DeploymentStrategy `json:"strategy"`

	// UpdatedAt The time the deployment was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// DeploymentLinksCancelMethod defines model for Deployment.Links.Cancel.Method.
type DeploymentLinksCancelMethod string

// DeploymentState Current state of the deployment
type DeploymentState string

// DeploymentStatusReason Reason for the current status
type DeploymentStatusReason string

// DeploymentStatusValue Status value
type DeploymentStatusValue string

// DeploymentStrategy Deployment strategy being used
type DeploymentStrategy string

// Destination defines model for Destination.
type Destination struct {
	App struct {
		Guid    *openapi_types.UUID `json:"guid,omitempty"`
		Process *struct {
			// Type Process type
			Type *string `json:"type,omitempty"`
		} `json:"process,omitempty"`
	} `json:"app"`

	// Guid Unique identifier for the destination
	Guid openapi_types.UUID `json:"guid"`

	// Port Port on the app process
	Port *int `json:"port"`

	// Protocol Protocol for the destination
	Protocol *DestinationProtocol `json:"protocol"`

	// Weight Percentage of traffic for weighted routing
	Weight *int `json:"weight"`
}

// DestinationProtocol Protocol for the destination
type DestinationProtocol string

// Domain defines model for Domain.
type Domain struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Guid      *openapi_types.UUID `json:"guid,omitempty"`
	Internal  *bool               `json:"internal,omitempty"`
	Links     *struct {
		Organization *struct {
			Href *string `json:"href,omitempty"`
		} `json:"organization,omitempty"`
		RouteReservations *struct {
			Href *string `json:"href,omitempty"`
		} `json:"route_reservations,omitempty"`
		Self *struct {
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
		SharedOrganizations *struct {
			Href *string `json:"href,omitempty"`
		} `json:"shared_organizations,omitempty"`
	} `json:"links,omitempty"`
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          *string `json:"name,omitempty"`
	Relationships *struct {
		Organization *struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"organization,omitempty"`
		SharedOrganizations *struct {
			Data *[]struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"shared_organizations,omitempty"`
	} `json:"relationships,omitempty"`
	RouterGroup *struct {
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"router_group,omitempty"`
	SupportedProtocols *[]string  `json:"supported_protocols,omitempty"`
	UpdatedAt          *time.Time `json:"updated_at,omitempty"`
}

// Droplet defines model for Droplet.
type Droplet struct {
	Buildpacks *[]Buildpack `json:"buildpacks,omitempty"`
	Checksum   *struct {
		Type  *DropletChecksumType `json:"type,omitempty"`
		Value *string              `json:"value,omitempty"`
	} `json:"checksum,omitempty"`
	CreatedAt         *time.Time          `json:"created_at,omitempty"`
	Error             *string             `json:"error,omitempty"`
	ExecutionMetadata *string             `json:"execution_metadata,omitempty"`
	Guid              *openapi_types.UUID `json:"guid,omitempty"`
	Image             *string             `json:"image,omitempty"`
	Lifecycle         *struct {
		Data *map[string]interface{} `json:"data,omitempty"`
		Type *DropletLifecycleType   `json:"type,omitempty"`
	} `json:"lifecycle,omitempty"`
	Links *struct {
		App *struct {
			Href *string `json:"href,omitempty"`
		} `json:"app,omitempty"`
		AssignCurrentDroplet *struct {
			Href   *string `json:"href,omitempty"`
			Method *string `json:"method,omitempty"`
		} `json:"assign_current_droplet,omitempty"`
		Download *struct {
			Href *string `json:"href,omitempty"`
		} `json:"download,omitempty"`
		Package *struct {
			Href *string `json:"href,omitempty"`
		} `json:"package,omitempty"`
		Self *struct {
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	ProcessTypes  *map[string]string `json:"process_types,omitempty"`
	Relationships *struct {
		App *struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"app,omitempty"`
	} `json:"relationships,omitempty"`
	Stack     *string       `json:"stack,omitempty"`
	State     *DropletState `json:"state,omitempty"`
	UpdatedAt *time.Time    `json:"updated_at,omitempty"`
}

// DropletChecksumType defines model for Droplet.Checksum.Type.
type DropletChecksumType string

// DropletLifecycleType defines model for Droplet.Lifecycle.Type.
type DropletLifecycleType string

// DropletState defines model for Droplet.State.
type DropletState string

// EnvironmentVariableGroup defines model for EnvironmentVariableGroup.
type EnvironmentVariableGroup struct {
	Links struct {
		Self struct {
			Href string `json:"href"`
		} `json:"self"`
	} `json:"links"`

	// Metadata Additional metadata for the environment variable group
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Name of the environment variable group
	Name EnvironmentVariableGroupName `json:"name"`

	// UpdatedAt Timestamp when the environment variable group was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Var Environment variables as key-value pairs
	Var map[string]string `json:"var"`
}

// EnvironmentVariableGroupName Name of the environment variable group
type EnvironmentVariableGroupName string

// EnvironmentVariableGroupUpdate defines model for EnvironmentVariableGroupUpdate.
type EnvironmentVariableGroupUpdate struct {
	// Metadata Additional metadata for the environment variable group
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Var Environment variables to update as key-value pairs.
	// Set a value to null to remove the variable.
	Var *map[string]*string `json:"var,omitempty"`
}

// EnvironmentVariables defines model for EnvironmentVariables.
type EnvironmentVariables struct {
	Links *struct {
		App *struct {
			Href *string `json:"href,omitempty"`
		} `json:"app,omitempty"`
		Revision *struct {
			Href *string `json:"href,omitempty"`
		} `json:"revision,omitempty"`
		Self *struct {
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Var *map[string]string `json:"var,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Backtrace Stack trace (only in development environments)
	Backtrace *[]string `json:"backtrace,omitempty"`

	// Code A numeric code for this error
	Code int `json:"code"`

	// Description Description of the error
	Description *string `json:"description,omitempty"`

	// Detail Detailed description of the error
	Detail string `json:"detail"`

	// Error Name of the error
	Error *string `json:"error,omitempty"`

	// TestModeInfo Additional information when in test mode
	TestModeInfo *struct {
		// Backtrace Stack trace of the error
		Backtrace *[]string `json:"backtrace,omitempty"`
		Source    *struct {
			// Parameter Query parameter that caused the error
			Parameter *string `json:"parameter,omitempty"`

			// Pointer JSON pointer to the source of the error
			Pointer *string `json:"pointer,omitempty"`
		} `json:"source,omitempty"`
	} `json:"test_mode_info,omitempty"`

	// Title Name of the error
	Title string `json:"title"`
}

// Errors defines model for Errors.
type Errors struct {
	// Errors List of error objects
	Errors []Error `json:"errors"`
}

// FeatureFlag defines model for FeatureFlag.
type FeatureFlag struct {
	// CustomErrorMessage Custom error message shown when the feature is disabled
	CustomErrorMessage *string `json:"custom_error_message"`

	// Enabled Whether the feature is enabled
	Enabled bool `json:"enabled"`
	Links   struct {
		Self struct {
			Href string `json:"href"`
		} `json:"self"`
	} `json:"links"`

	// Metadata Additional metadata for the feature flag
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Unique name of the feature flag
	Name string `json:"name"`

	// UpdatedAt Timestamp when the feature flag was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// FeatureFlagUpdate defines model for FeatureFlagUpdate.
type FeatureFlagUpdate struct {
	// CustomErrorMessage Custom error message shown when the feature is disabled
	CustomErrorMessage *string `json:"custom_error_message"`

	// Enabled Whether to enable or disable the feature
	Enabled *bool `json:"enabled,omitempty"`

	// Metadata Additional metadata for the feature flag
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// IsolationSegment defines model for IsolationSegment.
type IsolationSegment struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Guid      *string    `json:"guid,omitempty"`
	Links     *struct {
		Organizations *struct {
			Href *string `json:"href,omitempty"`
		} `json:"organizations,omitempty"`
		Self *struct {
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Job defines model for Job.
type Job struct {
	// CreatedAt Timestamp when the job was created
	CreatedAt time.Time `json:"created_at"`

	// Errors Errors that occurred during job processing
	Errors *[]Error `json:"errors,omitempty"`

	// Guid Unique identifier for the job
	Guid  openapi_types.UUID `json:"guid"`
	Links struct {
		// Resource Link to the resource being operated on
		Resource *struct {
			Href *string `json:"href,omitempty"`
		} `json:"resource,omitempty"`
		Self struct {
			// Href URL to this job resource
			Href string `json:"href"`
		} `json:"self"`
	} `json:"links"`

	// Metadata Additional metadata for the job
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Operation Description of the operation being performed
	Operation string `json:"operation"`

	// Resource The resource being operated on
	Resource *struct {
		// Guid GUID of the resource
		Guid *openapi_types.UUID `json:"guid,omitempty"`

		// Name Name of the resource
		Name *string `json:"name,omitempty"`

		// Type Type of the resource
		Type *string `json:"type,omitempty"`
	} `json:"resource,omitempty"`

	// State Current state of the job
	State JobState `json:"state"`

	// UpdatedAt Timestamp when the job was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Warnings Warnings that occurred during job processing
	Warnings *[]Warning `json:"warnings,omitempty"`
}

// JobState Current state of the job
type JobState string

// LastOperation defines model for LastOperation.
type LastOperation struct {
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	State       *string    `json:"state,omitempty"`
	Type        *string    `json:"type,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// Link defines model for Link.
type Link struct {
	Href string `json:"href"`
}

// LinkWithMethod defines model for LinkWithMethod.
type LinkWithMethod struct {
	Href   string               `json:"href"`
	Method LinkWithMethodMethod `json:"method"`
}

// LinkWithMethodMethod defines model for LinkWithMethod.Method.
type LinkWithMethodMethod string

// Links defines model for Links.
type Links struct {
	Parameters                *Link `json:"parameters,omitempty"`
	Self                      *Link `json:"self,omitempty"`
	ServiceCredentialBindings *Link `json:"service_credential_bindings,omitempty"`
	ServicePlan               *Link `json:"service_plan,omitempty"`
	ServiceRouteBindings      *Link `json:"service_route_bindings,omitempty"`
	SharedSpaces              *Link `json:"shared_spaces,omitempty"`
	Space                     *Link `json:"space,omitempty"`
}

// MaintenanceInfo defines model for MaintenanceInfo.
type MaintenanceInfo struct {
	Description *string `json:"description,omitempty"`
	Version     *string `json:"version,omitempty"`
}

// ManagedServiceInstanceUpdate defines model for ManagedServiceInstanceUpdate.
type ManagedServiceInstanceUpdate struct {
	MaintenanceInfo *struct {
		Version *string `json:"version,omitempty"`
	} `json:"maintenance_info,omitempty"`
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Parameters    *map[string]interface{} `json:"parameters,omitempty"`
	Relationships *struct {
		ServicePlan *ToOneRelationship `json:"service_plan,omitempty"`
	} `json:"relationships,omitempty"`
	Tags *[]string `json:"tags,omitempty"`
}

// ManifestDiff defines model for ManifestDiff.
type ManifestDiff struct {
	// Diff List of differences between manifest and current state
	Diff []struct {
		// AppName Name of the application
		AppName string `json:"app_name"`

		// Changes List of changes for this application
		Changes []struct {
			// CurrentValue Current value of the property
			CurrentValue *interface{} `json:"current_value,omitempty"`

			// NewValue New value from the manifest
			NewValue *interface{} `json:"new_value,omitempty"`

			// Property Property being changed
			Property string `json:"property"`

			// Type Type of change
			Type ManifestDiffDiffChangesType `json:"type"`
		} `json:"changes"`
	} `json:"diff"`
}

// ManifestDiffDiffChangesType Type of change
type ManifestDiffDiffChangesType string

// Metadata defines model for Metadata.
type Metadata struct {
	Annotations *map[string]interface{} `json:"annotations,omitempty"`
	Labels      *map[string]interface{} `json:"labels,omitempty"`
}

// Organization Organization resource when included
type Organization struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Guid      *openapi_types.UUID `json:"guid,omitempty"`
	Links     *struct {
		DefaultDomain *string `json:"default_domain,omitempty"`
		Domains       *string `json:"domains,omitempty"`
		Quota         *string `json:"quota,omitempty"`
		Self          *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          *string `json:"name,omitempty"`
	Relationships *struct {
		Quota *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"quota,omitempty"`
	} `json:"relationships,omitempty"`
	Suspended *bool      `json:"suspended,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// OrganizationQuota defines model for OrganizationQuota.
type OrganizationQuota struct {
	// Apps Application resource limits
	Apps struct {
		// LogRateLimitInBytesPerSecond Log rate limit per second (null = unlimited)
		LogRateLimitInBytesPerSecond *int `json:"log_rate_limit_in_bytes_per_second"`

		// PerAppTasks Maximum tasks per app (null = unlimited)
		PerAppTasks *int `json:"per_app_tasks"`

		// PerProcessMemoryInMb Memory limit per app process (null = unlimited)
		PerProcessMemoryInMb *int `json:"per_process_memory_in_mb"`

		// TotalInstances Total app instances allowed (null = unlimited)
		TotalInstances *int `json:"total_instances"`

		// TotalMemoryInMb Total memory limit for all apps (null = unlimited)
		TotalMemoryInMb *int `json:"total_memory_in_mb"`
	} `json:"apps"`

	// CreatedAt Timestamp when the organization quota was created
	CreatedAt time.Time `json:"created_at"`

	// Domains Domain resource limits
	Domains struct {
		// TotalDomains Total private domains allowed (null = unlimited)
		TotalDomains *int `json:"total_domains"`
	} `json:"domains"`

	// Guid Unique identifier for the organization quota
	Guid  openapi_types.UUID `json:"guid"`
	Links struct {
		Self struct {
			Href string `json:"href"`
		} `json:"self"`
	} `json:"links"`

	// Metadata Additional metadata for the organization quota
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the organization quota
	Name          string `json:"name"`
	Relationships struct {
		Organizations struct {
			// Data Organizations this quota is applied to
			Data []struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"organizations"`
	} `json:"relationships"`

	// Routes Route resource limits
	Routes struct {
		// TotalReservedPorts Total reserved ports allowed (null = unlimited)
		TotalReservedPorts *int `json:"total_reserved_ports"`

		// TotalRoutes Total routes allowed (null = unlimited)
		TotalRoutes *int `json:"total_routes"`
	} `json:"routes"`

	// Services Service resource limits
	Services struct {
		// PaidServicesAllowed Whether paid services are allowed
		PaidServicesAllowed bool `json:"paid_services_allowed"`

		// TotalServiceInstances Total service instances allowed (null = unlimited)
		TotalServiceInstances *int `json:"total_service_instances"`

		// TotalServiceKeys Total service keys allowed (null = unlimited)
		TotalServiceKeys *int `json:"total_service_keys"`
	} `json:"services"`

	// UpdatedAt Timestamp when the organization quota was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// OrganizationQuotaCreate defines model for OrganizationQuotaCreate.
type OrganizationQuotaCreate struct {
	// Apps Application resource limits
	Apps *struct {
		// LogRateLimitInBytesPerSecond Log rate limit per second (null = unlimited)
		LogRateLimitInBytesPerSecond *int `json:"log_rate_limit_in_bytes_per_second"`

		// PerAppTasks Maximum tasks per app (null = unlimited)
		PerAppTasks *int `json:"per_app_tasks"`

		// PerProcessMemoryInMb Memory limit per app process (null = unlimited)
		PerProcessMemoryInMb *int `json:"per_process_memory_in_mb"`

		// TotalInstances Total app instances allowed (null = unlimited)
		TotalInstances *int `json:"total_instances"`

		// TotalMemoryInMb Total memory limit for all apps (null = unlimited)
		TotalMemoryInMb *int `json:"total_memory_in_mb"`
	} `json:"apps,omitempty"`

	// Domains Domain resource limits
	Domains *struct {
		// TotalDomains Total private domains allowed (null = unlimited)
		TotalDomains *int `json:"total_domains"`
	} `json:"domains,omitempty"`

	// Metadata Additional metadata for the organization quota
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the organization quota
	Name string `json:"name"`

	// Relationships Initial relationships to create
	Relationships *struct {
		Organizations *struct {
			// Data Organizations to apply this quota to
			Data *[]struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data,omitempty"`
		} `json:"organizations,omitempty"`
	} `json:"relationships,omitempty"`

	// Routes Route resource limits
	Routes *struct {
		// TotalReservedPorts Total reserved ports allowed (null = unlimited)
		TotalReservedPorts *int `json:"total_reserved_ports"`

		// TotalRoutes Total routes allowed (null = unlimited)
		TotalRoutes *int `json:"total_routes"`
	} `json:"routes,omitempty"`

	// Services Service resource limits
	Services *struct {
		// PaidServicesAllowed Whether paid services are allowed
		PaidServicesAllowed *bool `json:"paid_services_allowed,omitempty"`

		// TotalServiceInstances Total service instances allowed (null = unlimited)
		TotalServiceInstances *int `json:"total_service_instances"`

		// TotalServiceKeys Total service keys allowed (null = unlimited)
		TotalServiceKeys *int `json:"total_service_keys"`
	} `json:"services,omitempty"`
}

// OrganizationQuotaUpdate defines model for OrganizationQuotaUpdate.
type OrganizationQuotaUpdate struct {
	// Apps Application resource limits
	Apps *struct {
		// LogRateLimitInBytesPerSecond Log rate limit per second (null = unlimited)
		LogRateLimitInBytesPerSecond *int `json:"log_rate_limit_in_bytes_per_second"`

		// PerAppTasks Maximum tasks per app (null = unlimited)
		PerAppTasks *int `json:"per_app_tasks"`

		// PerProcessMemoryInMb Memory limit per app process (null = unlimited)
		PerProcessMemoryInMb *int `json:"per_process_memory_in_mb"`

		// TotalInstances Total app instances allowed (null = unlimited)
		TotalInstances *int `json:"total_instances"`

		// TotalMemoryInMb Total memory limit for all apps (null = unlimited)
		TotalMemoryInMb *int `json:"total_memory_in_mb"`
	} `json:"apps,omitempty"`

	// Domains Domain resource limits
	Domains *struct {
		// TotalDomains Total private domains allowed (null = unlimited)
		TotalDomains *int `json:"total_domains"`
	} `json:"domains,omitempty"`

	// Metadata Additional metadata for the organization quota
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the organization quota
	Name *string `json:"name,omitempty"`

	// Routes Route resource limits
	Routes *struct {
		// TotalReservedPorts Total reserved ports allowed (null = unlimited)
		TotalReservedPorts *int `json:"total_reserved_ports"`

		// TotalRoutes Total routes allowed (null = unlimited)
		TotalRoutes *int `json:"total_routes"`
	} `json:"routes,omitempty"`

	// Services Service resource limits
	Services *struct {
		// PaidServicesAllowed Whether paid services are allowed
		PaidServicesAllowed *bool `json:"paid_services_allowed,omitempty"`

		// TotalServiceInstances Total service instances allowed (null = unlimited)
		TotalServiceInstances *int `json:"total_service_instances"`

		// TotalServiceKeys Total service keys allowed (null = unlimited)
		TotalServiceKeys *int `json:"total_service_keys"`
	} `json:"services,omitempty"`
}

// OrganizationVisibility defines model for OrganizationVisibility.
type OrganizationVisibility struct {
	// Guid Unique identifier for the organization
	Guid openapi_types.UUID `json:"guid"`

	// Name Name of the organization
	Name string `json:"name"`
}

// Package defines model for Package.
type Package struct {
	// CreatedAt When the package was created
	CreatedAt time.Time `json:"created_at"`

	// Data Package type specific data
	Data struct {
		// Checksum Checksum of package bits
		Checksum *struct {
			Type  *PackageDataChecksumType `json:"type,omitempty"`
			Value *string                  `json:"value,omitempty"`
		} `json:"checksum,omitempty"`

		// Error Error message if package processing failed
		Error *string `json:"error"`

		// Image Image reference for docker/cnb packages
		Image *string `json:"image,omitempty"`

		// Password Registry password (write-only)
		Password *string `json:"password,omitempty"`

		// Username Registry username (write-only)
		Username *string `json:"username,omitempty"`
	} `json:"data"`

	// Guid Unique identifier for the package
	Guid  openapi_types.UUID `json:"guid"`
	Links struct {
		App      *Link `json:"app,omitempty"`
		Download *Link `json:"download,omitempty"`
		Self     *Link `json:"self,omitempty"`
		Upload   *Link `json:"upload,omitempty"`
	} `json:"links"`
	Metadata struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata"`
	Relationships struct {
		App *struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"app,omitempty"`
	} `json:"relationships"`

	// State Current state of the package
	State PackageState `json:"state"`

	// Type Type of package
	Type PackageType `json:"type"`

	// UpdatedAt When the package was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// PackageDataChecksumType defines model for Package.Data.Checksum.Type.
type PackageDataChecksumType string

// PackageState Current state of the package
type PackageState string

// PackageType Type of package
type PackageType string

// Pagination defines model for Pagination.
type Pagination struct {
	First struct {
		// Href URL to the first page of results
		Href string `json:"href"`
	} `json:"first"`
	Last struct {
		// Href URL to the last page of results
		Href string `json:"href"`
	} `json:"last"`
	Next *struct {
		// Href URL to the next page of results
		Href *string `json:"href,omitempty"`
	} `json:"next"`
	Previous *struct {
		// Href URL to the previous page of results
		Href *string `json:"href,omitempty"`
	} `json:"previous"`

	// TotalPages Total number of pages
	TotalPages int `json:"total_pages"`

	// TotalResults Total number of results across all pages
	TotalResults int `json:"total_results"`
}

// PlanSchemas defines model for PlanSchemas.
type PlanSchemas struct {
	ServiceBinding *struct {
		Create *struct {
			Parameters *map[string]interface{} `json:"parameters,omitempty"`
		} `json:"create,omitempty"`
	} `json:"service_binding,omitempty"`
	ServiceInstance *struct {
		Create *struct {
			Parameters *map[string]interface{} `json:"parameters,omitempty"`
		} `json:"create,omitempty"`
		Update *struct {
			Parameters *map[string]interface{} `json:"parameters,omitempty"`
		} `json:"update,omitempty"`
	} `json:"service_instance,omitempty"`
}

// PlatformInfo defines model for PlatformInfo.
type PlatformInfo struct {
	Build      *string `json:"build,omitempty"`
	CliVersion *struct {
		Minimum     *string `json:"minimum,omitempty"`
		Recommended *string `json:"recommended,omitempty"`
	} `json:"cli_version,omitempty"`
	Custom      *map[string]string `json:"custom,omitempty"`
	Description *string            `json:"description,omitempty"`
	Links       *struct {
		Self *struct {
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
		Support *struct {
			Href *string `json:"href,omitempty"`
		} `json:"support,omitempty"`
	} `json:"links,omitempty"`
	Name    *string `json:"name,omitempty"`
	Version *int    `json:"version,omitempty"`
}

// Process defines model for Process.
type Process struct {
	// Command Start command for the process
	Command   *string   `json:"command"`
	CreatedAt time.Time `json:"created_at"`

	// DiskInMb Disk allocated per instance in MB
	DiskInMb int `json:"disk_in_mb"`

	// Guid Unique identifier for the process
	Guid        openapi_types.UUID `json:"guid"`
	HealthCheck struct {
		Data *struct {
			Endpoint          *string `json:"endpoint,omitempty"`
			Interval          *int    `json:"interval,omitempty"`
			InvocationTimeout *int    `json:"invocation_timeout,omitempty"`
			Timeout           *int    `json:"timeout,omitempty"`
		} `json:"data,omitempty"`
		Type *ProcessHealthCheckType `json:"type,omitempty"`
	} `json:"health_check"`

	// Instances Number of instances
	Instances int `json:"instances"`
	Links     struct {
		App   *Link `json:"app,omitempty"`
		Scale *Link `json:"scale,omitempty"`
		Self  *Link `json:"self,omitempty"`
		Space *Link `json:"space,omitempty"`
		Stats *Link `json:"stats,omitempty"`
	} `json:"links"`

	// LogRateLimitInBytesPerSecond Log rate limit per instance (-1 for unlimited)
	LogRateLimitInBytesPerSecond int `json:"log_rate_limit_in_bytes_per_second"`

	// MemoryInMb Memory allocated per instance in MB
	MemoryInMb int `json:"memory_in_mb"`
	Metadata   struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata"`
	ReadinessHealthCheck *struct {
		Data *struct {
			Endpoint          *string `json:"endpoint,omitempty"`
			Interval          *int    `json:"interval,omitempty"`
			InvocationTimeout *int    `json:"invocation_timeout,omitempty"`
		} `json:"data,omitempty"`
		Type *ProcessReadinessHealthCheckType `json:"type,omitempty"`
	} `json:"readiness_health_check"`
	Relationships struct {
		App *struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"app,omitempty"`
		Revision *struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data"`
		} `json:"revision"`
	} `json:"relationships"`

	// Type Process type (e.g., web, worker)
	Type      string    `json:"type"`
	UpdatedAt time.Time `json:"updated_at"`

	// Version Process version identifier
	Version *string `json:"version,omitempty"`
}

// ProcessHealthCheckType defines model for Process.HealthCheck.Type.
type ProcessHealthCheckType string

// ProcessReadinessHealthCheckType defines model for Process.ReadinessHealthCheck.Type.
type ProcessReadinessHealthCheckType string

// ProcessStats defines model for ProcessStats.
type ProcessStats struct {
	// Details Additional details about instance state
	Details *string `json:"details"`

	// DiskQuota Disk quota in bytes
	DiskQuota int `json:"disk_quota"`

	// FdsQuota File descriptor quota
	FdsQuota int `json:"fds_quota"`

	// Host Host running the instance
	Host string `json:"host"`

	// Index Instance index
	Index int `json:"index"`

	// InstanceInternalIp Internal IP of the instance
	InstanceInternalIp *string `json:"instance_internal_ip,omitempty"`
	InstancePorts      []struct {
		External             *int `json:"external,omitempty"`
		ExternalTlsProxyPort *int `json:"external_tls_proxy_port,omitempty"`
		Internal             *int `json:"internal,omitempty"`
		InternalTlsProxyPort *int `json:"internal_tls_proxy_port,omitempty"`
	} `json:"instance_ports"`

	// IsolationSegment Isolation segment name
	IsolationSegment *string `json:"isolation_segment"`

	// MemQuota Memory quota in bytes
	MemQuota int `json:"mem_quota"`

	// Routable Whether the instance is routable
	Routable *bool `json:"routable,omitempty"`

	// State Instance state
	State ProcessStatsState `json:"state"`

	// Type Process type
	Type string `json:"type"`

	// Uptime Uptime in seconds
	Uptime int `json:"uptime"`
	Usage  struct {
		// Cpu CPU usage percentage
		Cpu *float64 `json:"cpu,omitempty"`

		// Disk Disk usage in bytes
		Disk *int `json:"disk,omitempty"`

		// Mem Memory usage in bytes
		Mem  *int       `json:"mem,omitempty"`
		Time *time.Time `json:"time,omitempty"`
	} `json:"usage"`
}

// ProcessStatsState Instance state
type ProcessStatsState string

// ResourceMatchObject defines model for ResourceMatchObject.
type ResourceMatchObject struct {
	Checksum *struct {
		Value *string `json:"value,omitempty"`
	} `json:"checksum,omitempty"`
	Mode        *string `json:"mode,omitempty"`
	Path        *string `json:"path,omitempty"`
	SizeInBytes *int    `json:"size_in_bytes,omitempty"`
}

// ResourceMatchRequest defines model for ResourceMatchRequest.
type ResourceMatchRequest struct {
	Resources *[]ResourceMatchObject `json:"resources,omitempty"`
}

// ResourceMatchResponse defines model for ResourceMatchResponse.
type ResourceMatchResponse struct {
	Resources *[]ResourceMatchObject `json:"resources,omitempty"`
}

// Revision defines model for Revision.
type Revision struct {
	CreatedAt time.Time `json:"created_at"`

	// Deployable Whether this revision can be deployed
	Deployable  bool    `json:"deployable"`
	Description *string `json:"description"`
	Droplet     struct {
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"droplet"`
	Guid  openapi_types.UUID `json:"guid"`
	Links struct {
		App                  *Link `json:"app,omitempty"`
		EnvironmentVariables *struct {
			Href *string `json:"href,omitempty"`
		} `json:"environment_variables,omitempty"`
		Self *Link `json:"self,omitempty"`
	} `json:"links"`
	Metadata struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata"`
	Processes map[string]struct {
		Command *string `json:"command"`
	} `json:"processes"`
	Relationships *struct {
		App *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"app,omitempty"`
	} `json:"relationships,omitempty"`
	Sidecars  []Sidecar `json:"sidecars"`
	UpdatedAt time.Time `json:"updated_at"`

	// Version Revision version number
	Version int `json:"version"`
}

// RevisionsList defines model for RevisionsList.
type RevisionsList struct {
	Pagination *struct {
		First *struct {
			Href *string `json:"href,omitempty"`
		} `json:"first,omitempty"`
		Last *struct {
			Href *string `json:"href,omitempty"`
		} `json:"last,omitempty"`
		Next *struct {
			Href *string `json:"href,omitempty"`
		} `json:"next"`
		Previous *struct {
			Href *string `json:"href,omitempty"`
		} `json:"previous"`
		TotalPages   *int `json:"total_pages,omitempty"`
		TotalResults *int `json:"total_results,omitempty"`
	} `json:"pagination,omitempty"`
	Resources *[]Revision `json:"resources,omitempty"`
}

// Role defines model for Role.
type Role struct {
	// CreatedAt Timestamp when the role was created
	CreatedAt time.Time `json:"created_at"`

	// Guid Unique identifier for the role
	Guid  openapi_types.UUID `json:"guid"`
	Links struct {
		Organization *struct {
			Href *string `json:"href,omitempty"`
		} `json:"organization"`
		Self struct {
			Href string `json:"href"`
		} `json:"self"`
		Space *struct {
			Href *string `json:"href,omitempty"`
		} `json:"space"`
		User struct {
			Href string `json:"href"`
		} `json:"user"`
	} `json:"links"`

	// Metadata Additional metadata for the role
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Relationships struct {
		Organization *struct {
			Data *struct {
				// Guid GUID of the organization (null for space roles)
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data"`
		} `json:"organization,omitempty"`
		Space *struct {
			Data *struct {
				// Guid GUID of the space (null for organization roles)
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data"`
		} `json:"space,omitempty"`
		User struct {
			Data struct {
				// Guid GUID of the user with this role
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"user"`
	} `json:"relationships"`

	// Type The type of role
	Type RoleType `json:"type"`

	// UpdatedAt Timestamp when the role was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// RoleType The type of role
type RoleType string

// RoleCreate defines model for RoleCreate.
type RoleCreate struct {
	// Metadata Additional metadata for the role
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Relationships struct {
		// Organization Required for organization roles
		Organization *struct {
			Data *struct {
				// Guid Organization GUID
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data,omitempty"`
		} `json:"organization,omitempty"`

		// Space Required for space roles
		Space *struct {
			Data *struct {
				// Guid Space GUID
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data,omitempty"`
		} `json:"space,omitempty"`
		User struct {
			Data RoleCreate_Relationships_User_Data `json:"data"`
		} `json:"user"`
	} `json:"relationships"`

	// Type The type of role to create
	Type RoleCreateType `json:"type"`
}

// RoleCreateRelationshipsUserData0 defines model for .
type RoleCreateRelationshipsUserData0 struct {
	// Guid User GUID
	Guid openapi_types.UUID `json:"guid"`
}

// RoleCreateRelationshipsUserData1 defines model for .
type RoleCreateRelationshipsUserData1 struct {
	// Origin Identity provider origin
	Origin *string `json:"origin,omitempty"`

	// Username Username (email)
	Username string `json:"username"`
}

// RoleCreate_Relationships_User_Data defines model for RoleCreate.Relationships.User.Data.
type RoleCreate_Relationships_User_Data struct {
	union json.RawMessage
}

// RoleCreateType The type of role to create
type RoleCreateType string

// Route defines model for Route.
type Route struct {
	CreatedAt time.Time `json:"created_at"`

	// Destinations List of destinations mapped to this route
	Destinations []Destination `json:"destinations"`

	// Guid Unique identifier for the route
	Guid openapi_types.UUID `json:"guid"`

	// Host Hostname for the route
	Host  *string `json:"host"`
	Links struct {
		Destinations *Link `json:"destinations,omitempty"`
		Domain       *Link `json:"domain,omitempty"`
		Self         *Link `json:"self,omitempty"`
		SharedSpaces *Link `json:"shared_spaces,omitempty"`
		Space        *Link `json:"space,omitempty"`
	} `json:"links"`
	Metadata struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata"`

	// Path Path for the route
	Path string `json:"path"`

	// Port Port for TCP routes
	Port *int `json:"port"`

	// Protocol Protocol for the route
	Protocol      RouteProtocol `json:"protocol"`
	Relationships struct {
		Domain *struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"domain,omitempty"`

		// SharedSpaces Spaces this route is shared with
		SharedSpaces *struct {
			Data *[]struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"shared_spaces,omitempty"`
		Space *struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"space,omitempty"`
	} `json:"relationships"`
	UpdatedAt time.Time `json:"updated_at"`

	// Url Full URL constructed from host, domain, path, and port
	Url string `json:"url"`
}

// RouteProtocol Protocol for the route
type RouteProtocol string

// Rule defines model for Rule.
type Rule struct {
	// Code ICMP code (only for ICMP protocol)
	Code *int `json:"code"`

	// Description Human-readable description of the rule
	Description *string `json:"description"`

	// Destination Destination address or CIDR block
	Destination string `json:"destination"`

	// Log Whether to log traffic matching this rule
	Log *bool `json:"log"`

	// Ports Port or port range (e.g., "80", "8080-8082")
	Ports *string `json:"ports"`

	// Protocol Network protocol
	Protocol RuleProtocol `json:"protocol"`

	// Type ICMP type (only for ICMP protocol)
	Type *int `json:"type"`
}

// RuleProtocol Network protocol
type RuleProtocol string

// SecurityGroup defines model for SecurityGroup.
type SecurityGroup struct {
	// CreatedAt Timestamp when the security group was created
	CreatedAt time.Time `json:"created_at"`

	// GloballyEnabled Whether this security group is applied globally
	GloballyEnabled struct {
		// Running Applied globally to all running apps
		Running bool `json:"running"`

		// Staging Applied globally during app staging
		Staging bool `json:"staging"`
	} `json:"globally_enabled"`

	// Guid Unique identifier for the security group
	Guid  openapi_types.UUID `json:"guid"`
	Links struct {
		Self struct {
			Href string `json:"href"`
		} `json:"self"`
	} `json:"links"`

	// Metadata Additional metadata for the security group
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the security group
	Name string `json:"name"`

	// Relationships Relationships to other resources
	Relationships struct {
		RunningSpaces *struct {
			// Data Spaces where this security group applies to running apps
			Data []struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"running_spaces,omitempty"`
		StagingSpaces *struct {
			// Data Spaces where this security group applies during staging
			Data []struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"staging_spaces,omitempty"`
	} `json:"relationships"`

	// Rules Array of egress traffic rules
	Rules []Rule `json:"rules"`

	// UpdatedAt Timestamp when the security group was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// SecurityGroupCreate defines model for SecurityGroupCreate.
type SecurityGroupCreate struct {
	// GloballyEnabled Whether to apply this security group globally
	GloballyEnabled *struct {
		// Running Apply globally to all running apps
		Running *bool `json:"running,omitempty"`

		// Staging Apply globally during app staging
		Staging *bool `json:"staging,omitempty"`
	} `json:"globally_enabled,omitempty"`

	// Metadata Additional metadata for the security group
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the security group
	Name string `json:"name"`

	// Relationships Initial relationships to create
	Relationships *struct {
		RunningSpaces *struct {
			// Data Spaces where this security group applies to running apps
			Data *[]struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data,omitempty"`
		} `json:"running_spaces,omitempty"`
		StagingSpaces *struct {
			// Data Spaces where this security group applies during staging
			Data *[]struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data,omitempty"`
		} `json:"staging_spaces,omitempty"`
	} `json:"relationships,omitempty"`

	// Rules Array of egress traffic rules
	Rules *[]Rule `json:"rules,omitempty"`
}

// SecurityGroupUpdate defines model for SecurityGroupUpdate.
type SecurityGroupUpdate struct {
	// GloballyEnabled Whether to apply this security group globally
	GloballyEnabled *struct {
		// Running Apply globally to all running apps
		Running *bool `json:"running,omitempty"`

		// Staging Apply globally during app staging
		Staging *bool `json:"staging,omitempty"`
	} `json:"globally_enabled,omitempty"`

	// Metadata Additional metadata for the security group
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the security group
	Name *string `json:"name,omitempty"`

	// Rules Array of egress traffic rules (replaces all existing rules)
	Rules *[]Rule `json:"rules,omitempty"`
}

// ServiceBroker defines model for ServiceBroker.
type ServiceBroker struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Guid      *openapi_types.UUID `json:"guid,omitempty"`
	Links     *struct {
		Self             *Link `json:"self,omitempty"`
		ServiceOfferings *Link `json:"service_offerings,omitempty"`
		Space            *Link `json:"space,omitempty"`
	} `json:"links,omitempty"`
	Metadata      *Metadata `json:"metadata,omitempty"`
	Name          *string   `json:"name,omitempty"`
	Relationships *struct {
		Space *ToOneRelationship `json:"space,omitempty"`
	} `json:"relationships,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Url       *string    `json:"url,omitempty"`
}

// ServiceCredentialBinding defines model for ServiceCredentialBinding.
type ServiceCredentialBinding struct {
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Guid          *string    `json:"guid,omitempty"`
	LastOperation *struct {
		CreatedAt   *time.Time                                  `json:"created_at,omitempty"`
		Description *string                                     `json:"description,omitempty"`
		State       *ServiceCredentialBindingLastOperationState `json:"state,omitempty"`
		Type        *ServiceCredentialBindingLastOperationType  `json:"type,omitempty"`
		UpdatedAt   *time.Time                                  `json:"updated_at,omitempty"`
	} `json:"last_operation,omitempty"`
	Links *struct {
		App *struct {
			Href *string `json:"href,omitempty"`
		} `json:"app,omitempty"`
		Details *struct {
			Href *string `json:"href,omitempty"`
		} `json:"details,omitempty"`
		Parameters *struct {
			Href *string `json:"href,omitempty"`
		} `json:"parameters,omitempty"`
		Self *struct {
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
		ServiceInstance *struct {
			Href *string `json:"href,omitempty"`
		} `json:"service_instance,omitempty"`
	} `json:"links,omitempty"`
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          *string `json:"name,omitempty"`
	Relationships *struct {
		App *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"app,omitempty"`
		ServiceInstance *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"service_instance,omitempty"`
	} `json:"relationships,omitempty"`
	Type      *ServiceCredentialBindingType `json:"type,omitempty"`
	UpdatedAt *time.Time                    `json:"updated_at,omitempty"`
}

// ServiceCredentialBindingLastOperationState defines model for ServiceCredentialBinding.LastOperation.State.
type ServiceCredentialBindingLastOperationState string

// ServiceCredentialBindingLastOperationType defines model for ServiceCredentialBinding.LastOperation.Type.
type ServiceCredentialBindingLastOperationType string

// ServiceCredentialBindingType defines model for ServiceCredentialBinding.Type.
type ServiceCredentialBindingType string

// ServiceInstance defines model for ServiceInstance.
type ServiceInstance struct {
	CreatedAt       *time.Time     `json:"created_at,omitempty"`
	DashboardUrl    *string        `json:"dashboard_url,omitempty"`
	Guid            *string        `json:"guid,omitempty"`
	LastOperation   *LastOperation `json:"last_operation,omitempty"`
	Links           *Links         `json:"links,omitempty"`
	MaintenanceInfo *struct {
		Version *string `json:"version,omitempty"`
	} `json:"maintenance_info,omitempty"`
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          *string `json:"name,omitempty"`
	Relationships *struct {
		ServicePlan *ToOneRelationship `json:"service_plan,omitempty"`
		Space       *ToOneRelationship `json:"space,omitempty"`
	} `json:"relationships,omitempty"`
	Tags             *[]string            `json:"tags,omitempty"`
	Type             *ServiceInstanceType `json:"type,omitempty"`
	UpdatedAt        *time.Time           `json:"updated_at,omitempty"`
	UpgradeAvailable *bool                `json:"upgrade_available,omitempty"`
}

// ServiceInstanceType defines model for ServiceInstance.Type.
type ServiceInstanceType string

// ServiceOffering defines model for ServiceOffering.
type ServiceOffering struct {
	Available        *bool          `json:"available,omitempty"`
	BrokerCatalog    *BrokerCatalog `json:"broker_catalog,omitempty"`
	CreatedAt        *time.Time     `json:"created_at,omitempty"`
	Description      *string        `json:"description,omitempty"`
	DocumentationUrl *string        `json:"documentation_url,omitempty"`
	Guid             *string        `json:"guid,omitempty"`
	Links            *struct {
		Self *struct {
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
		ServiceBroker *struct {
			Href *string `json:"href,omitempty"`
		} `json:"service_broker,omitempty"`
		ServicePlans *struct {
			Href *string `json:"href,omitempty"`
		} `json:"service_plans,omitempty"`
	} `json:"links,omitempty"`
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          *string `json:"name,omitempty"`
	Relationships *struct {
		ServiceBroker *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"service_broker,omitempty"`
	} `json:"relationships,omitempty"`
	Requires  *[]string  `json:"requires,omitempty"`
	Shareable *bool      `json:"shareable,omitempty"`
	Tags      *[]string  `json:"tags,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ServiceOfferingCreate defines model for ServiceOfferingCreate.
type ServiceOfferingCreate struct {
	Available        *bool          `json:"available,omitempty"`
	BrokerCatalog    *BrokerCatalog `json:"broker_catalog,omitempty"`
	Description      *string        `json:"description,omitempty"`
	DocumentationUrl *string        `json:"documentation_url,omitempty"`
	Name             *string        `json:"name,omitempty"`
	Relationships    *struct {
		ServiceBroker *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"service_broker,omitempty"`
	} `json:"relationships,omitempty"`
	Requires  *[]string `json:"requires,omitempty"`
	Shareable *bool     `json:"shareable,omitempty"`
	Tags      *[]string `json:"tags,omitempty"`
}

// ServiceOfferingList defines model for ServiceOfferingList.
type ServiceOfferingList struct {
	Pagination *struct {
		First *struct {
			Href *string `json:"href,omitempty"`
		} `json:"first,omitempty"`
		Last *struct {
			Href *string `json:"href,omitempty"`
		} `json:"last,omitempty"`
		Next *struct {
			Href *string `json:"href,omitempty"`
		} `json:"next"`
		Previous *struct {
			Href *string `json:"href,omitempty"`
		} `json:"previous"`
		TotalPages   *int `json:"total_pages,omitempty"`
		TotalResults *int `json:"total_results,omitempty"`
	} `json:"pagination,omitempty"`
	Resources *[]ServiceOffering `json:"resources,omitempty"`
}

// ServiceOfferingUpdate defines model for ServiceOfferingUpdate.
type ServiceOfferingUpdate struct {
	Available        *bool          `json:"available,omitempty"`
	BrokerCatalog    *BrokerCatalog `json:"broker_catalog,omitempty"`
	Description      *string        `json:"description,omitempty"`
	DocumentationUrl *string        `json:"documentation_url,omitempty"`
	Metadata         *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          *string `json:"name,omitempty"`
	Relationships *struct {
		ServiceBroker *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"service_broker,omitempty"`
	} `json:"relationships,omitempty"`
	Requires  *[]string `json:"requires,omitempty"`
	Shareable *bool     `json:"shareable,omitempty"`
	Tags      *[]string `json:"tags,omitempty"`
}

// ServicePlan defines model for ServicePlan.
type ServicePlan struct {
	Available     *bool          `json:"available,omitempty"`
	BrokerCatalog *BrokerCatalog `json:"broker_catalog,omitempty"`
	Costs         *[]Cost        `json:"costs,omitempty"`
	CreatedAt     *time.Time     `json:"created_at,omitempty"`
	Description   *string        `json:"description,omitempty"`
	Free          *bool          `json:"free,omitempty"`
	Guid          *string        `json:"guid,omitempty"`
	Links         *struct {
		Self *struct {
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
		ServiceOffering *struct {
			Href *string `json:"href,omitempty"`
		} `json:"service_offering,omitempty"`
		Visibility *struct {
			Href *string `json:"href,omitempty"`
		} `json:"visibility,omitempty"`
	} `json:"links,omitempty"`
	MaintenanceInfo *MaintenanceInfo `json:"maintenance_info,omitempty"`
	Metadata        *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          *string `json:"name,omitempty"`
	Relationships *struct {
		ServiceOffering *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"service_offering,omitempty"`
	} `json:"relationships,omitempty"`
	Schemas   *PlanSchemas `json:"schemas,omitempty"`
	UpdatedAt *time.Time   `json:"updated_at,omitempty"`

	// VisibilityType Denotes the visibility of the plan; can be public, admin, organization, space
	VisibilityType *string `json:"visibility_type,omitempty"`
}

// ServicePlanCreate defines model for ServicePlanCreate.
type ServicePlanCreate struct {
	Available     *bool          `json:"available,omitempty"`
	BrokerCatalog *BrokerCatalog `json:"broker_catalog,omitempty"`
	Costs         *[]Cost        `json:"costs,omitempty"`
	Description   *string        `json:"description,omitempty"`
	Free          *bool          `json:"free,omitempty"`
	Name          *string        `json:"name,omitempty"`
	Relationships *struct {
		ServiceOffering *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"service_offering,omitempty"`
	} `json:"relationships,omitempty"`
	Schemas        *PlanSchemas `json:"schemas,omitempty"`
	VisibilityType *string      `json:"visibility_type,omitempty"`
}

// ServicePlanList defines model for ServicePlanList.
type ServicePlanList struct {
	Pagination *struct {
		First *struct {
			Href *string `json:"href,omitempty"`
		} `json:"first,omitempty"`
		Last *struct {
			Href *string `json:"href,omitempty"`
		} `json:"last,omitempty"`
		Next *struct {
			Href *string `json:"href,omitempty"`
		} `json:"next"`
		Previous *struct {
			Href *string `json:"href,omitempty"`
		} `json:"previous"`
		TotalPages   *int `json:"total_pages,omitempty"`
		TotalResults *int `json:"total_results,omitempty"`
	} `json:"pagination,omitempty"`
	Resources *[]ServicePlan `json:"resources,omitempty"`
}

// ServicePlanUpdate defines model for ServicePlanUpdate.
type ServicePlanUpdate struct {
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// ServicePlanVisibility defines model for ServicePlanVisibility.
type ServicePlanVisibility struct {
	// Metadata Additional metadata for the service plan visibility
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Organizations List of organizations where the plan is visible (only for organization type)
	Organizations *[]OrganizationVisibility `json:"organizations,omitempty"`

	// Space Space where the plan is visible (only for space type)
	Space *struct {
		// Guid Space GUID
		Guid *openapi_types.UUID `json:"guid,omitempty"`

		// Name Space name
		Name *string `json:"name,omitempty"`
	} `json:"space,omitempty"`

	// Type Denotes the visibility of the plan
	Type ServicePlanVisibilityType `json:"type"`
}

// ServicePlanVisibilityType Denotes the visibility of the plan
type ServicePlanVisibilityType string

// ServicePlanVisibilityApply defines model for ServicePlanVisibilityApply.
type ServicePlanVisibilityApply struct {
	// Organizations List of organizations to add to the visibility list
	Organizations *[]struct {
		// Guid Organization GUID
		Guid openapi_types.UUID `json:"guid"`
	} `json:"organizations,omitempty"`

	// Type Denotes the visibility of the plan
	Type ServicePlanVisibilityApplyType `json:"type"`
}

// ServicePlanVisibilityApplyType Denotes the visibility of the plan
type ServicePlanVisibilityApplyType string

// ServicePlanVisibilityUpdate defines model for ServicePlanVisibilityUpdate.
type ServicePlanVisibilityUpdate struct {
	// Metadata Additional metadata for the service plan visibility
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Organizations List of organizations where the plan should be visible (required for organization type)
	Organizations *[]struct {
		// Guid Organization GUID
		Guid openapi_types.UUID `json:"guid"`
	} `json:"organizations,omitempty"`

	// Type Denotes the visibility of the plan
	Type ServicePlanVisibilityUpdateType `json:"type"`
}

// ServicePlanVisibilityUpdateType Denotes the visibility of the plan
type ServicePlanVisibilityUpdateType string

// ServiceRouteBinding defines model for ServiceRouteBinding.
type ServiceRouteBinding struct {
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Guid          *string    `json:"guid,omitempty"`
	LastOperation *struct {
		CreatedAt   *time.Time                             `json:"created_at,omitempty"`
		Description *string                                `json:"description,omitempty"`
		State       *ServiceRouteBindingLastOperationState `json:"state,omitempty"`
		Type        *ServiceRouteBindingLastOperationType  `json:"type,omitempty"`
		UpdatedAt   *time.Time                             `json:"updated_at,omitempty"`
	} `json:"last_operation,omitempty"`
	Links *struct {
		Parameters      *string `json:"parameters,omitempty"`
		Route           *string `json:"route,omitempty"`
		Self            *string `json:"self,omitempty"`
		ServiceInstance *string `json:"service_instance,omitempty"`
	} `json:"links,omitempty"`
	Metadata        *Metadata                         `json:"metadata,omitempty"`
	Relationships   *ServiceRouteBindingRelationships `json:"relationships,omitempty"`
	RouteServiceUrl *string                           `json:"route_service_url,omitempty"`
	UpdatedAt       *time.Time                        `json:"updated_at,omitempty"`
}

// ServiceRouteBindingLastOperationState defines model for ServiceRouteBinding.LastOperation.State.
type ServiceRouteBindingLastOperationState string

// ServiceRouteBindingLastOperationType defines model for ServiceRouteBinding.LastOperation.Type.
type ServiceRouteBindingLastOperationType string

// ServiceRouteBindingRelationships defines model for ServiceRouteBindingRelationships.
type ServiceRouteBindingRelationships struct {
	Route *struct {
		Data *struct {
			Guid *string `json:"guid,omitempty"`
		} `json:"data,omitempty"`
	} `json:"route,omitempty"`
	ServiceInstance *struct {
		Data *struct {
			Guid *string `json:"guid,omitempty"`
		} `json:"data,omitempty"`
	} `json:"service_instance,omitempty"`
}

// ServiceUsageEvent defines model for ServiceUsageEvent.
type ServiceUsageEvent struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Guid      *string    `json:"guid,omitempty"`
	Links     *struct {
		Self *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Organization *struct {
		Guid *string `json:"guid,omitempty"`
	} `json:"organization"`
	ServiceBroker *struct {
		Guid *string `json:"guid,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service_broker"`
	ServiceInstance *struct {
		Guid *string `json:"guid,omitempty"`
		Name *string `json:"name,omitempty"`
		Type *string `json:"type,omitempty"`
	} `json:"service_instance"`
	ServiceOffering *struct {
		Guid *string `json:"guid,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service_offering"`
	ServicePlan *struct {
		Guid *string `json:"guid,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"service_plan"`
	Space *struct {
		Guid *string `json:"guid,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"space"`
	State     *string    `json:"state"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Sidecar defines model for Sidecar.
type Sidecar struct {
	// Command Command to execute for the sidecar process
	Command string `json:"command"`

	// CreatedAt Timestamp when the sidecar was created
	CreatedAt time.Time `json:"created_at"`

	// Guid Unique identifier for the sidecar
	Guid  openapi_types.UUID `json:"guid"`
	Links struct {
		App struct {
			Href string `json:"href"`
		} `json:"app"`
		Self struct {
			Href string `json:"href"`
		} `json:"self"`
	} `json:"links"`

	// MemoryInMb Memory allocation for the sidecar in MB
	MemoryInMb int `json:"memory_in_mb"`

	// Metadata Additional metadata for the sidecar
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the sidecar
	Name string `json:"name"`

	// Origin How the sidecar was created
	Origin SidecarOrigin `json:"origin"`

	// ProcessTypes Process types this sidecar runs alongside
	ProcessTypes  []string `json:"process_types"`
	Relationships struct {
		App struct {
			Data struct {
				// Guid GUID of the parent app
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"app"`
	} `json:"relationships"`

	// UpdatedAt Timestamp when the sidecar was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// SidecarOrigin How the sidecar was created
type SidecarOrigin string

// SidecarCreate defines model for SidecarCreate.
type SidecarCreate struct {
	// Command Command to execute for the sidecar process
	Command string `json:"command"`

	// MemoryInMb Memory allocation for the sidecar in MB
	MemoryInMb *int `json:"memory_in_mb,omitempty"`

	// Metadata Additional metadata for the sidecar
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the sidecar
	Name string `json:"name"`

	// ProcessTypes Process types this sidecar runs alongside
	ProcessTypes []string `json:"process_types"`
}

// SidecarUpdate defines model for SidecarUpdate.
type SidecarUpdate struct {
	// Command Command to execute for the sidecar process
	Command *string `json:"command,omitempty"`

	// MemoryInMb Memory allocation for the sidecar in MB
	MemoryInMb *int `json:"memory_in_mb,omitempty"`

	// Metadata Additional metadata for the sidecar
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the sidecar
	Name *string `json:"name,omitempty"`

	// ProcessTypes Process types this sidecar runs alongside
	ProcessTypes *[]string `json:"process_types,omitempty"`
}

// Space Space resource when included
type Space struct {
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Guid      *openapi_types.UUID `json:"guid,omitempty"`
	Links     *struct {
		ApplyManifest *struct {
			Href   *string `json:"href,omitempty"`
			Method *string `json:"method,omitempty"`
		} `json:"apply_manifest,omitempty"`
		Features *struct {
			Href *string `json:"href,omitempty"`
		} `json:"features,omitempty"`
		Organization *struct {
			Href *string `json:"href,omitempty"`
		} `json:"organization,omitempty"`
		Self *struct {
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          *string `json:"name,omitempty"`
	Relationships *struct {
		Organization *ToOneRelationship `json:"organization,omitempty"`
		Quota        *struct {
			Data *map[string]interface{} `json:"data"`
		} `json:"quota"`
	} `json:"relationships,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// SpaceFeature defines model for SpaceFeature.
type SpaceFeature struct {
	// Description Human-readable description of the feature
	Description string `json:"description"`

	// Enabled Whether the feature is enabled for this space
	Enabled bool `json:"enabled"`

	// Metadata Additional metadata for the space feature
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name The feature identifier
	Name SpaceFeatureName `json:"name"`
}

// SpaceFeatureName The feature identifier
type SpaceFeatureName string

// SpaceFeatureUpdate defines model for SpaceFeatureUpdate.
type SpaceFeatureUpdate struct {
	// Enabled Whether to enable or disable the feature
	Enabled bool `json:"enabled"`

	// Metadata Additional metadata for the space feature
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// SpaceQuota defines model for SpaceQuota.
type SpaceQuota struct {
	// Apps Application resource limits
	Apps struct {
		// LogRateLimitInBytesPerSecond Log rate limit per second (null = unlimited)
		LogRateLimitInBytesPerSecond *int `json:"log_rate_limit_in_bytes_per_second"`

		// PerAppTasks Maximum tasks per app (null = unlimited)
		PerAppTasks *int `json:"per_app_tasks"`

		// PerProcessMemoryInMb Memory limit per app process (null = unlimited)
		PerProcessMemoryInMb *int `json:"per_process_memory_in_mb"`

		// TotalInstances Total app instances allowed (null = unlimited)
		TotalInstances *int `json:"total_instances"`

		// TotalMemoryInMb Total memory limit for all apps (null = unlimited)
		TotalMemoryInMb *int `json:"total_memory_in_mb"`
	} `json:"apps"`

	// CreatedAt Timestamp when the space quota was created
	CreatedAt time.Time `json:"created_at"`

	// Guid Unique identifier for the space quota
	Guid  openapi_types.UUID `json:"guid"`
	Links struct {
		Organization struct {
			Href string `json:"href"`
		} `json:"organization"`
		Self struct {
			Href string `json:"href"`
		} `json:"self"`
	} `json:"links"`

	// Metadata Additional metadata for the space quota
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the space quota
	Name          string `json:"name"`
	Relationships struct {
		Organization struct {
			Data struct {
				// Guid GUID of the parent organization
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"organization"`
		Spaces *struct {
			// Data Spaces this quota is applied to
			Data []struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"spaces,omitempty"`
	} `json:"relationships"`

	// Routes Route resource limits
	Routes struct {
		// TotalReservedPorts Total reserved ports allowed (null = unlimited)
		TotalReservedPorts *int `json:"total_reserved_ports"`

		// TotalRoutes Total routes allowed (null = unlimited)
		TotalRoutes *int `json:"total_routes"`
	} `json:"routes"`

	// Services Service resource limits
	Services struct {
		// PaidServicesAllowed Whether paid services are allowed
		PaidServicesAllowed bool `json:"paid_services_allowed"`

		// TotalServiceInstances Total service instances allowed (null = unlimited)
		TotalServiceInstances *int `json:"total_service_instances"`

		// TotalServiceKeys Total service keys allowed (null = unlimited)
		TotalServiceKeys *int `json:"total_service_keys"`
	} `json:"services"`

	// UpdatedAt Timestamp when the space quota was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// SpaceQuotaCreate defines model for SpaceQuotaCreate.
type SpaceQuotaCreate struct {
	// Apps Application resource limits
	Apps *struct {
		// LogRateLimitInBytesPerSecond Log rate limit per second (null = unlimited)
		LogRateLimitInBytesPerSecond *int `json:"log_rate_limit_in_bytes_per_second"`

		// PerAppTasks Maximum tasks per app (null = unlimited)
		PerAppTasks *int `json:"per_app_tasks"`

		// PerProcessMemoryInMb Memory limit per app process (null = unlimited)
		PerProcessMemoryInMb *int `json:"per_process_memory_in_mb"`

		// TotalInstances Total app instances allowed (null = unlimited)
		TotalInstances *int `json:"total_instances"`

		// TotalMemoryInMb Total memory limit for all apps (null = unlimited)
		TotalMemoryInMb *int `json:"total_memory_in_mb"`
	} `json:"apps,omitempty"`

	// Metadata Additional metadata for the space quota
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the space quota
	Name          string `json:"name"`
	Relationships struct {
		Organization struct {
			Data struct {
				// Guid GUID of the parent organization
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"organization"`

		// Spaces Initial spaces to apply this quota to
		Spaces *struct {
			Data *[]struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data,omitempty"`
		} `json:"spaces,omitempty"`
	} `json:"relationships"`

	// Routes Route resource limits
	Routes *struct {
		// TotalReservedPorts Total reserved ports allowed (null = unlimited)
		TotalReservedPorts *int `json:"total_reserved_ports"`

		// TotalRoutes Total routes allowed (null = unlimited)
		TotalRoutes *int `json:"total_routes"`
	} `json:"routes,omitempty"`

	// Services Service resource limits
	Services *struct {
		// PaidServicesAllowed Whether paid services are allowed
		PaidServicesAllowed *bool `json:"paid_services_allowed,omitempty"`

		// TotalServiceInstances Total service instances allowed (null = unlimited)
		TotalServiceInstances *int `json:"total_service_instances"`

		// TotalServiceKeys Total service keys allowed (null = unlimited)
		TotalServiceKeys *int `json:"total_service_keys"`
	} `json:"services,omitempty"`
}

// SpaceQuotaUpdate defines model for SpaceQuotaUpdate.
type SpaceQuotaUpdate struct {
	// Apps Application resource limits
	Apps *struct {
		// LogRateLimitInBytesPerSecond Log rate limit per second (null = unlimited)
		LogRateLimitInBytesPerSecond *int `json:"log_rate_limit_in_bytes_per_second"`

		// PerAppTasks Maximum tasks per app (null = unlimited)
		PerAppTasks *int `json:"per_app_tasks"`

		// PerProcessMemoryInMb Memory limit per app process (null = unlimited)
		PerProcessMemoryInMb *int `json:"per_process_memory_in_mb"`

		// TotalInstances Total app instances allowed (null = unlimited)
		TotalInstances *int `json:"total_instances"`

		// TotalMemoryInMb Total memory limit for all apps (null = unlimited)
		TotalMemoryInMb *int `json:"total_memory_in_mb"`
	} `json:"apps,omitempty"`

	// Metadata Additional metadata for the space quota
	Metadata *struct {
		// Annotations Key-value pairs for storing additional information
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for organizing and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Human-readable name for the space quota
	Name *string `json:"name,omitempty"`

	// Routes Route resource limits
	Routes *struct {
		// TotalReservedPorts Total reserved ports allowed (null = unlimited)
		TotalReservedPorts *int `json:"total_reserved_ports"`

		// TotalRoutes Total routes allowed (null = unlimited)
		TotalRoutes *int `json:"total_routes"`
	} `json:"routes,omitempty"`

	// Services Service resource limits
	Services *struct {
		// PaidServicesAllowed Whether paid services are allowed
		PaidServicesAllowed *bool `json:"paid_services_allowed,omitempty"`

		// TotalServiceInstances Total service instances allowed (null = unlimited)
		TotalServiceInstances *int `json:"total_service_instances"`

		// TotalServiceKeys Total service keys allowed (null = unlimited)
		TotalServiceKeys *int `json:"total_service_keys"`
	} `json:"services,omitempty"`
}

// Stack defines model for Stack.
type Stack struct {
	BuildRootfsImage *string             `json:"build_rootfs_image,omitempty"`
	CreatedAt        *time.Time          `json:"created_at,omitempty"`
	Default          *bool               `json:"default,omitempty"`
	Description      *string             `json:"description,omitempty"`
	Guid             *openapi_types.UUID `json:"guid,omitempty"`
	Links            *struct {
		Self *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name           *string    `json:"name,omitempty"`
	RunRootfsImage *string    `json:"run_rootfs_image,omitempty"`
	UpdatedAt      *time.Time `json:"updated_at,omitempty"`
}

// Task defines model for Task.
type Task struct {
	Command     *string             `json:"command,omitempty"`
	CreatedAt   *time.Time          `json:"created_at,omitempty"`
	DiskInMb    *int                `json:"disk_in_mb,omitempty"`
	DropletGuid *openapi_types.UUID `json:"droplet_guid,omitempty"`
	Guid        *openapi_types.UUID `json:"guid,omitempty"`
	Links       *struct {
		App     *string `json:"app,omitempty"`
		Cancel  *string `json:"cancel,omitempty"`
		Droplet *string `json:"droplet,omitempty"`
		Self    *string `json:"self,omitempty"`
	} `json:"links,omitempty"`
	LogRateLimitInBytesPerSecond *int `json:"log_rate_limit_in_bytes_per_second,omitempty"`
	MemoryInMb                   *int `json:"memory_in_mb,omitempty"`
	Metadata                     *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          *string `json:"name,omitempty"`
	Relationships *struct {
		App *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"app,omitempty"`
	} `json:"relationships,omitempty"`
	Result *struct {
		FailureReason *string `json:"failure_reason,omitempty"`
	} `json:"result,omitempty"`
	SequenceId *int       `json:"sequence_id,omitempty"`
	State      *TaskState `json:"state,omitempty"`
	UpdatedAt  *time.Time `json:"updated_at,omitempty"`
}

// TaskState defines model for Task.State.
type TaskState string

// ToOneRelationship defines model for ToOneRelationship.
type ToOneRelationship struct {
	Data *struct {
		Guid *string `json:"guid,omitempty"`
	} `json:"data,omitempty"`
}

// UsageSummary defines model for UsageSummary.
type UsageSummary struct {
	Links *struct {
		Self *struct {
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	UsageSummary *[]struct {
		BoundAppCount *int `json:"bound_app_count,omitempty"`

		// Space Space resource when included
		Space *Space `json:"space,omitempty"`
	} `json:"usage_summary,omitempty"`
}

// User User resource when included
type User struct {
	// CreatedAt The time with zone when the object was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Guid Unique identifier for the user
	Guid  *openapi_types.UUID `json:"guid,omitempty"`
	Links *struct {
		Self *struct {
			Href *string `json:"href,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Metadata *struct {
		// Annotations Annotations added to the user
		Annotations *map[string]interface{} `json:"annotations,omitempty"`

		// Labels Labels applied to the user
		Labels *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Origin The identity provider for the UAA user; will be null for UAA clients
	Origin *string `json:"origin"`

	// PresentationName The name displayed for the user; for UAA users, this is the same as the username. For UAA clients, this is the UAA client ID
	PresentationName *string `json:"presentation_name,omitempty"`

	// UpdatedAt The time with zone when the object was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Username The name registered in UAA; will be null for UAA clients and non-UAA users
	Username *string `json:"username"`
}

// UserProvidedServiceInstanceUpdate defines model for UserProvidedServiceInstanceUpdate.
type UserProvidedServiceInstanceUpdate struct {
	Credentials *map[string]interface{} `json:"credentials,omitempty"`
	Metadata    *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name            *string   `json:"name,omitempty"`
	RouteServiceUrl *string   `json:"route_service_url,omitempty"`
	SyslogDrainUrl  *string   `json:"syslog_drain_url,omitempty"`
	Tags            *[]string `json:"tags,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Backtrace Stack trace (only in development environments)
	Backtrace *[]string   `json:"backtrace,omitempty"`
	Code      interface{} `json:"code"`

	// Description Description of the error
	Description *string `json:"description,omitempty"`

	// Detail Detailed description of the error
	Detail string `json:"detail"`

	// Error Name of the error
	Error  *string `json:"error,omitempty"`
	Source *struct {
		// Parameter Query parameter that caused the error
		Parameter *string `json:"parameter,omitempty"`

		// Pointer JSON Pointer to the invalid field
		Pointer *string `json:"pointer,omitempty"`
	} `json:"source,omitempty"`

	// TestModeInfo Additional information when in test mode
	TestModeInfo *struct {
		// Backtrace Stack trace of the error
		Backtrace *[]string `json:"backtrace,omitempty"`
		Source    *struct {
			// Parameter Query parameter that caused the error
			Parameter *string `json:"parameter,omitempty"`

			// Pointer JSON pointer to the source of the error
			Pointer *string `json:"pointer,omitempty"`
		} `json:"source,omitempty"`
	} `json:"test_mode_info,omitempty"`
	Title interface{} `json:"title"`
}

// Warning defines model for Warning.
type Warning struct {
	// Detail Warning message detail
	Detail string `json:"detail"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Errors

// BadRequestError defines model for BadRequestError.
type BadRequestError = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// ForbiddenError defines model for ForbiddenError.
type ForbiddenError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// NotFoundError defines model for NotFoundError.
type NotFoundError = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// UnauthorizedError defines model for UnauthorizedError.
type UnauthorizedError = Error

// UnexpectedError defines model for UnexpectedError.
type UnexpectedError = Error

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = Error

// UnprocessableEntityError defines model for UnprocessableEntityError.
type UnprocessableEntityError = ValidationError

// GetV3AppUsageEventsParams defines parameters for GetV3AppUsageEvents.
type GetV3AppUsageEventsParams struct {
	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *GetV3AppUsageEventsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// AfterGuid Filters out events before and including the event with the given guid
	AfterGuid *string `form:"after_guid,omitempty" json:"after_guid,omitempty"`

	// Guids Comma-delimited list of usage event guids to filter by
	Guids *[]string `form:"guids,omitempty" json:"guids,omitempty"`

	// CreatedAts Timestamp to filter by
	CreatedAts *[]time.Time `form:"created_ats,omitempty" json:"created_ats,omitempty"`
}

// GetV3AppUsageEventsParamsOrderBy defines parameters for GetV3AppUsageEvents.
type GetV3AppUsageEventsParamsOrderBy string

// ListAppsParams defines parameters for ListApps.
type ListAppsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Field to sort results by
	OrderBy *ListAppsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Names Filter by app names (comma-separated)
	Names *string `form:"names,omitempty" json:"names,omitempty"`

	// Guids Filter by app GUIDs (comma-separated)
	Guids *string `form:"guids,omitempty" json:"guids,omitempty"`

	// OrganizationGuids Filter by organization GUIDs (comma-separated)
	OrganizationGuids *string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// SpaceGuids Filter by space GUIDs (comma-separated)
	SpaceGuids *string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// Stacks Filter by stack names (comma-separated)
	Stacks *string `form:"stacks,omitempty" json:"stacks,omitempty"`

	// States Filter by app states (comma-separated)
	States *string `form:"states,omitempty" json:"states,omitempty"`

	// Include Include related resources
	Include *ListAppsParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// LifecycleType Filter by lifecycle type
	LifecycleType *ListAppsParamsLifecycleType `form:"lifecycle_type,omitempty" json:"lifecycle_type,omitempty"`

	// LabelSelector Filter by labels using label selector syntax
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Filter by creation timestamp. Supports multiple formats:
	// - Range: created_ats=2020-01-01T00:00:00Z,2020-12-31T23:59:59Z
	// - Greater than: created_ats[gt]=2020-01-01T00:00:00Z
	// - Greater than or equal: created_ats[gte]=2020-01-01T00:00:00Z
	// - Less than: created_ats[lt]=2020-12-31T23:59:59Z
	// - Less than or equal: created_ats[lte]=2020-12-31T23:59:59Z
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update timestamp. Supports multiple formats:
	// - Range: updated_ats=2020-01-01T00:00:00Z,2020-12-31T23:59:59Z
	// - Greater than: updated_ats[gt]=2020-01-01T00:00:00Z
	// - Greater than or equal: updated_ats[gte]=2020-01-01T00:00:00Z
	// - Less than: updated_ats[lt]=2020-12-31T23:59:59Z
	// - Less than or equal: updated_ats[lte]=2020-12-31T23:59:59Z
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`

	// Fields Fields to include in the response. Use dot notation for nested fields.
	// Example: fields[apps]=name,guid,state or fields[space]=name,guid
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// ListAppsParamsOrderBy defines parameters for ListApps.
type ListAppsParamsOrderBy string

// ListAppsParamsInclude defines parameters for ListApps.
type ListAppsParamsInclude string

// ListAppsParamsLifecycleType defines parameters for ListApps.
type ListAppsParamsLifecycleType string

// CreateAppJSONBody defines parameters for CreateApp.
type CreateAppJSONBody struct {
	// EnvironmentVariables Environment variables for the app
	EnvironmentVariables *map[string]string `json:"environment_variables,omitempty"`

	// Lifecycle App lifecycle configuration
	Lifecycle *struct {
		Data *struct {
			// Buildpacks List of buildpacks for buildpack/cnb lifecycle
			Buildpacks *[]string `json:"buildpacks,omitempty"`

			// Stack Stack to use for buildpack lifecycle
			Stack *string `json:"stack,omitempty"`
		} `json:"data,omitempty"`

		// Type Type of app lifecycle
		Type *CreateAppJSONBodyLifecycleType `json:"type,omitempty"`
	} `json:"lifecycle,omitempty"`
	Metadata *struct {
		// Annotations Key-value pairs for storing metadata
		Annotations *map[string]string `json:"annotations,omitempty"`

		// Labels Key-value pairs for labeling and filtering
		Labels *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Name of the app (unique within space)
	Name          string `json:"name"`
	Relationships struct {
		Space struct {
			Data struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"space"`
	} `json:"relationships"`

	// State Initial desired state of the app
	State *CreateAppJSONBodyState `json:"state,omitempty"`
}

// CreateAppJSONBodyLifecycleType defines parameters for CreateApp.
type CreateAppJSONBodyLifecycleType string

// CreateAppJSONBodyState defines parameters for CreateApp.
type CreateAppJSONBodyState string

// GetAppParams defines parameters for GetApp.
type GetAppParams struct {
	// Include Include related resources
	Include *GetAppParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetAppParamsInclude defines parameters for GetApp.
type GetAppParamsInclude string

// UpdateAppJSONBody defines parameters for UpdateApp.
type UpdateAppJSONBody struct {
	EnvironmentVariables *map[string]string `json:"environment_variables,omitempty"`
	Lifecycle            *struct {
		Data *struct {
			Buildpacks *[]string `json:"buildpacks,omitempty"`
			Stack      *string   `json:"stack,omitempty"`
		} `json:"data,omitempty"`
		Type *UpdateAppJSONBodyLifecycleType `json:"type,omitempty"`
	} `json:"lifecycle,omitempty"`
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name New name for the app
	Name *string `json:"name,omitempty"`

	// State Desired state of the app
	State *UpdateAppJSONBodyState `json:"state,omitempty"`
}

// UpdateAppJSONBodyLifecycleType defines parameters for UpdateApp.
type UpdateAppJSONBodyLifecycleType string

// UpdateAppJSONBodyState defines parameters for UpdateApp.
type UpdateAppJSONBodyState string

// GetV3AppsGuidBuildsParams defines parameters for GetV3AppsGuidBuilds.
type GetV3AppsGuidBuildsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Field by which to order results
	OrderBy *GetV3AppsGuidBuildsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// States Filter by build states (comma-separated)
	States *string `form:"states,omitempty" json:"states,omitempty"`
}

// GetV3AppsGuidBuildsParamsOrderBy defines parameters for GetV3AppsGuidBuilds.
type GetV3AppsGuidBuildsParamsOrderBy string

// GetV3AppsGuidDropletsParams defines parameters for GetV3AppsGuidDroplets.
type GetV3AppsGuidDropletsParams struct {
	// Guids Comma-delimited list of droplet guids to filter by
	Guids *[]string `form:"guids,omitempty" json:"guids,omitempty"`

	// States Comma-delimited list of droplet states to filter by
	States *[]string `form:"states,omitempty" json:"states,omitempty"`

	// Current If true, only include the droplet currently assigned to the app
	Current *bool `form:"current,omitempty" json:"current,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *string `form:"order_by,omitempty" json:"order_by,omitempty"`

	// LabelSelector A query string containing a list of label selector requirements
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`
}

// UpdateAppEnvironmentVariablesJSONBody defines parameters for UpdateAppEnvironmentVariables.
type UpdateAppEnvironmentVariablesJSONBody struct {
	// Var Environment variables to set
	Var *map[string]*string `json:"var,omitempty"`
}

// GetV3AppsGuidFeaturesNameParamsName defines parameters for GetV3AppsGuidFeaturesName.
type GetV3AppsGuidFeaturesNameParamsName string

// PatchV3AppsGuidFeaturesNameParamsName defines parameters for PatchV3AppsGuidFeaturesName.
type PatchV3AppsGuidFeaturesNameParamsName string

// GetV3AppsGuidPackagesParams defines parameters for GetV3AppsGuidPackages.
type GetV3AppsGuidPackagesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Field to sort results by
	OrderBy *GetV3AppsGuidPackagesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// States Filter by package states (comma-separated)
	States *string `form:"states,omitempty" json:"states,omitempty"`

	// Types Filter by package types (comma-separated)
	Types *string `form:"types,omitempty" json:"types,omitempty"`
}

// GetV3AppsGuidPackagesParamsOrderBy defines parameters for GetV3AppsGuidPackages.
type GetV3AppsGuidPackagesParamsOrderBy string

// GetV3AppsGuidProcessesParams defines parameters for GetV3AppsGuidProcesses.
type GetV3AppsGuidProcessesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Types Filter by process types (comma-separated)
	Types *string `form:"types,omitempty" json:"types,omitempty"`
}

// PatchV3AppsGuidRelationshipsCurrentDropletJSONBody defines parameters for PatchV3AppsGuidRelationshipsCurrentDroplet.
type PatchV3AppsGuidRelationshipsCurrentDropletJSONBody struct {
	Data *struct {
		// Guid The droplet GUID to set as current
		Guid openapi_types.UUID `json:"guid"`
	} `json:"data,omitempty"`
}

// GetV3AppsGuidRevisionsParams defines parameters for GetV3AppsGuidRevisions.
type GetV3AppsGuidRevisionsParams struct {
	// Versions Comma-delimited list of revision versions to filter by
	Versions *[]string `form:"versions,omitempty" json:"versions,omitempty"`

	// LabelSelector A query string containing a list of label selector requirements
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// Page Page to display; valid values are integers >= 1
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page; valid values are 1 through 5000
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by. Defaults to ascending; prepend with - to sort descending.
	OrderBy *string `form:"order_by,omitempty" json:"order_by,omitempty"`

	// CreatedAts Timestamp to filter by; supports filtering with relational operators
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Timestamp to filter by; supports filtering with relational operators
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3AppsGuidRevisionsDeployedParams defines parameters for GetV3AppsGuidRevisionsDeployed.
type GetV3AppsGuidRevisionsDeployedParams struct {
	// Page Page to display; valid values are integers >= 1
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page; valid values are 1 through 5000
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by. Defaults to ascending; prepend with - to sort descending.
	OrderBy *string `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// GetV3AppsGuidSidecarsParams defines parameters for GetV3AppsGuidSidecars.
type GetV3AppsGuidSidecarsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Sort order for results
	OrderBy *GetV3AppsGuidSidecarsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Names Filter by sidecar names (comma-separated)
	Names *string `form:"names,omitempty" json:"names,omitempty"`

	// LabelSelector Filter by label selector
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Filter by creation time
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update time
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3AppsGuidSidecarsParamsOrderBy defines parameters for GetV3AppsGuidSidecars.
type GetV3AppsGuidSidecarsParamsOrderBy string

// PostV3AppsGuidTasksJSONBody defines parameters for PostV3AppsGuidTasks.
type PostV3AppsGuidTasksJSONBody struct {
	// Command Command that will be executed; optional if a template.process.guid is provided
	Command *string `json:"command,omitempty"`

	// DiskInMb Amount of disk to allocate for the task in MB
	DiskInMb *int `json:"disk_in_mb,omitempty"`

	// DropletGuid The guid of the droplet that will be used to run the command
	DropletGuid *openapi_types.UUID `json:"droplet_guid,omitempty"`

	// LogRateLimitInBytesPerSecond Amount of log rate to allocate for the task in bytes
	LogRateLimitInBytesPerSecond *int `json:"log_rate_limit_in_bytes_per_second,omitempty"`

	// MemoryInMb Amount of memory to allocate for the task in MB
	MemoryInMb *int `json:"memory_in_mb,omitempty"`
	Metadata   *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Name of the task; auto-generated if not provided
	Name     *string `json:"name,omitempty"`
	Template *struct {
		Process *struct {
			// Guid The guid of the process that will be used as a template
			Guid *openapi_types.UUID `json:"guid,omitempty"`
		} `json:"process,omitempty"`
	} `json:"template,omitempty"`
}

// GetV3AuditEventsParams defines parameters for GetV3AuditEvents.
type GetV3AuditEventsParams struct {
	// Types Comma-delimited list of event types to filter by
	Types *[]string `form:"types,omitempty" json:"types,omitempty"`

	// TargetGuids Comma-delimited list of target guids to filter by. Also supports filtering by exclusion.
	TargetGuids *[]string `form:"target_guids,omitempty" json:"target_guids,omitempty"`

	// SpaceGuids Comma-delimited list of space guids to filter by
	SpaceGuids *[]string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// OrganizationGuids Comma-delimited list of organization guids to filter by
	OrganizationGuids *[]string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *GetV3AuditEventsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// CreatedAts Timestamp to filter by
	CreatedAts *[]time.Time `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Timestamp to filter by
	UpdatedAts *[]time.Time `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3AuditEventsParamsOrderBy defines parameters for GetV3AuditEvents.
type GetV3AuditEventsParamsOrderBy string

// GetV3BuildpacksParams defines parameters for GetV3Buildpacks.
type GetV3BuildpacksParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Field by which to order results
	OrderBy *GetV3BuildpacksParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Names Filter by buildpack names (comma-separated)
	Names *string `form:"names,omitempty" json:"names,omitempty"`

	// Stacks Filter by stack names (comma-separated)
	Stacks *string `form:"stacks,omitempty" json:"stacks,omitempty"`

	// LabelSelector Filter by label selector
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Filter by creation timestamps
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update timestamps
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3BuildpacksParamsOrderBy defines parameters for GetV3Buildpacks.
type GetV3BuildpacksParamsOrderBy string

// PostV3BuildpacksJSONBody defines parameters for PostV3Buildpacks.
type PostV3BuildpacksJSONBody struct {
	// Enabled Whether buildpack is available for use
	Enabled *bool `json:"enabled,omitempty"`

	// Locked Whether buildpack updates are prevented
	Locked   *bool `json:"locked,omitempty"`
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Name of the buildpack
	Name string `json:"name"`

	// Position Priority position for automatic detection
	Position *int `json:"position,omitempty"`

	// Stack Stack the buildpack runs on
	Stack *string `json:"stack,omitempty"`
}

// PatchV3BuildpacksGuidJSONBody defines parameters for PatchV3BuildpacksGuid.
type PatchV3BuildpacksGuidJSONBody struct {
	// Enabled Whether buildpack is available for use
	Enabled *bool `json:"enabled,omitempty"`

	// Locked Whether buildpack updates are prevented
	Locked   *bool `json:"locked,omitempty"`
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Name of the buildpack
	Name *string `json:"name,omitempty"`

	// Position Priority position for automatic detection
	Position *int `json:"position,omitempty"`

	// Stack Stack the buildpack runs on
	Stack *string `json:"stack,omitempty"`
}

// PostV3BuildpacksGuidUploadJSONBody defines parameters for PostV3BuildpacksGuidUpload.
type PostV3BuildpacksGuidUploadJSONBody struct {
	// Image Docker image reference for Cloud Native Buildpack (experimental)
	Image *string `json:"image,omitempty"`

	// Password Password for private registry authentication
	Password *string `json:"password,omitempty"`

	// Username Username for private registry authentication
	Username *string `json:"username,omitempty"`
}

// PostV3BuildpacksGuidUploadMultipartBody defines parameters for PostV3BuildpacksGuidUpload.
type PostV3BuildpacksGuidUploadMultipartBody struct {
	// Bits Zip file containing buildpack contents
	Bits openapi_types.File `json:"bits"`
}

// GetV3BuildsParams defines parameters for GetV3Builds.
type GetV3BuildsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Field by which to order results
	OrderBy *GetV3BuildsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// States Filter by build states (comma-separated)
	States *string `form:"states,omitempty" json:"states,omitempty"`

	// AppGuids Filter by app GUIDs (comma-separated)
	AppGuids *string `form:"app_guids,omitempty" json:"app_guids,omitempty"`

	// PackageGuids Filter by package GUIDs (comma-separated)
	PackageGuids *string `form:"package_guids,omitempty" json:"package_guids,omitempty"`

	// LabelSelector Filter by label selector
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Filter by creation timestamps
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update timestamps
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3BuildsParamsOrderBy defines parameters for GetV3Builds.
type GetV3BuildsParamsOrderBy string

// PostV3BuildsJSONBody defines parameters for PostV3Builds.
type PostV3BuildsJSONBody struct {
	// EnvironmentVariables Environment variables for staging
	EnvironmentVariables *map[string]string `json:"environment_variables,omitempty"`

	// Lifecycle Lifecycle information for staging
	Lifecycle *struct {
		Data *struct {
			// Buildpacks List of buildpacks to use (buildpack lifecycle)
			Buildpacks *[]string `json:"buildpacks,omitempty"`

			// Credentials Docker registry credentials (docker lifecycle)
			Credentials *struct {
				Password *string `json:"password,omitempty"`
				Username *string `json:"username,omitempty"`
			} `json:"credentials,omitempty"`

			// Stack Stack to use for staging
			Stack *string `json:"stack,omitempty"`
		} `json:"data,omitempty"`

		// Type Type of lifecycle
		Type *PostV3BuildsJSONBodyLifecycleType `json:"type,omitempty"`
	} `json:"lifecycle,omitempty"`
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Package struct {
		// Guid GUID of the package to stage
		Guid openapi_types.UUID `json:"guid"`
	} `json:"package"`

	// StagingDiskInMb Disk limit for staging container
	StagingDiskInMb *int `json:"staging_disk_in_mb,omitempty"`

	// StagingLogRateLimitBytesPerSecond Log rate limit during staging
	StagingLogRateLimitBytesPerSecond *int `json:"staging_log_rate_limit_bytes_per_second,omitempty"`

	// StagingMemoryInMb Memory limit for staging container
	StagingMemoryInMb *int `json:"staging_memory_in_mb,omitempty"`
}

// PostV3BuildsJSONBodyLifecycleType defines parameters for PostV3Builds.
type PostV3BuildsJSONBodyLifecycleType string

// PatchV3BuildsGuidJSONBody defines parameters for PatchV3BuildsGuid.
type PatchV3BuildsGuidJSONBody struct {
	CreatedBy *struct {
		Email *string             `json:"email,omitempty"`
		Guid  *openapi_types.UUID `json:"guid,omitempty"`
		Name  *string             `json:"name,omitempty"`
	} `json:"created_by,omitempty"`

	// Error Error message if build failed
	Error *string `json:"error,omitempty"`

	// Lifecycle Updated lifecycle data
	Lifecycle *struct {
		Data *struct {
			BuildpackLifecycleBuildpacks *[]struct {
				DetectOutput *string `json:"detect_output,omitempty"`
				Name         *string `json:"name,omitempty"`
				Version      *string `json:"version,omitempty"`
			} `json:"buildpack_lifecycle_buildpacks,omitempty"`

			// Image Resulting image reference
			Image *string `json:"image,omitempty"`
		} `json:"data,omitempty"`
		Type *PatchV3BuildsGuidJSONBodyLifecycleType `json:"type,omitempty"`
	} `json:"lifecycle,omitempty"`
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// State New state for the build
	State *PatchV3BuildsGuidJSONBodyState `json:"state,omitempty"`
}

// PatchV3BuildsGuidJSONBodyLifecycleType defines parameters for PatchV3BuildsGuid.
type PatchV3BuildsGuidJSONBodyLifecycleType string

// PatchV3BuildsGuidJSONBodyState defines parameters for PatchV3BuildsGuid.
type PatchV3BuildsGuidJSONBodyState string

// GetV3DeploymentsParams defines parameters for GetV3Deployments.
type GetV3DeploymentsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Field by which to order results
	OrderBy *GetV3DeploymentsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// States Filter by deployment states (comma-separated)
	States *string `form:"states,omitempty" json:"states,omitempty"`

	// AppGuids Filter by app GUIDs (comma-separated)
	AppGuids *string `form:"app_guids,omitempty" json:"app_guids,omitempty"`

	// StatusReasons Filter by status reasons (comma-separated)
	StatusReasons *string `form:"status_reasons,omitempty" json:"status_reasons,omitempty"`

	// StatusValues Filter by status values (comma-separated)
	StatusValues *string `form:"status_values,omitempty" json:"status_values,omitempty"`

	// LabelSelector Filter by label selector
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Filter by creation timestamps
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update timestamps
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3DeploymentsParamsOrderBy defines parameters for GetV3Deployments.
type GetV3DeploymentsParamsOrderBy string

// PostV3DeploymentsJSONBody defines parameters for PostV3Deployments.
type PostV3DeploymentsJSONBody struct {
	Droplet *struct {
		// Guid GUID of the droplet to deploy
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"droplet,omitempty"`
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Options *struct {
		// MaxInFlight Maximum number of instances to update simultaneously (rolling strategy)
		MaxInFlight *int `json:"max_in_flight,omitempty"`
	} `json:"options,omitempty"`
	Relationships struct {
		App struct {
			Data struct {
				// Guid GUID of the app to deploy
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"app"`
	} `json:"relationships"`
	Revision *struct {
		// Guid GUID of the revision to deploy
		Guid *openapi_types.UUID `json:"guid,omitempty"`

		// Version Version number of the revision
		Version *int `json:"version,omitempty"`
	} `json:"revision,omitempty"`

	// Strategy Deployment strategy to use
	Strategy *PostV3DeploymentsJSONBodyStrategy `json:"strategy,omitempty"`
}

// PostV3DeploymentsJSONBodyStrategy defines parameters for PostV3Deployments.
type PostV3DeploymentsJSONBodyStrategy string

// PatchV3DeploymentsGuidJSONBody defines parameters for PatchV3DeploymentsGuid.
type PatchV3DeploymentsGuidJSONBody struct {
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// GetV3DomainsParams defines parameters for GetV3Domains.
type GetV3DomainsParams struct {
	// Guids Comma-delimited list of guids to filter by
	Guids *[]string `form:"guids,omitempty" json:"guids,omitempty"`

	// Names Comma-delimited list of domain names to filter by
	Names *[]string `form:"names,omitempty" json:"names,omitempty"`

	// OrganizationGuids Comma-delimited list of owning organization guids to filter by
	OrganizationGuids *[]string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *string `form:"order_by,omitempty" json:"order_by,omitempty"`

	// LabelSelector List of label selector requirements
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Timestamp to filter by
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Timestamp to filter by
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// PostV3DomainsJSONBody defines parameters for PostV3Domains.
type PostV3DomainsJSONBody struct {
	// Internal Whether the domain is used for internal traffic
	Internal *bool `json:"internal,omitempty"`
	Metadata *struct {
		// Annotations Annotations applied to the domain
		Annotations *map[string]interface{} `json:"annotations,omitempty"`

		// Labels Labels applied to the domain
		Labels *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Name of the domain
	Name         *string `json:"name,omitempty"`
	Organization *struct {
		Data *struct {
			// Guid The organization guid
			Guid *openapi_types.UUID `json:"guid,omitempty"`
		} `json:"data,omitempty"`
	} `json:"organization,omitempty"`
	RouterGroup *struct {
		// Guid The desired router group guid
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"router_group,omitempty"`
	SharedOrganizations *[]struct {
		// Guid The organization guid
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"shared_organizations,omitempty"`
}

// PatchV3DomainsGuidJSONBody defines parameters for PatchV3DomainsGuid.
type PatchV3DomainsGuidJSONBody struct {
	Metadata *struct {
		// Annotations Annotations applied to the domain
		Annotations *map[string]interface{} `json:"annotations,omitempty"`

		// Labels Labels applied to the domain
		Labels *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// PostV3DomainsGuidRelationshipsSharedOrganizationsJSONBody defines parameters for PostV3DomainsGuidRelationshipsSharedOrganizations.
type PostV3DomainsGuidRelationshipsSharedOrganizationsJSONBody struct {
	Data *[]struct {
		// Guid The organization guid
		Guid *openapi_types.UUID `json:"guid,omitempty"`
	} `json:"data,omitempty"`
}

// GetV3DropletsParams defines parameters for GetV3Droplets.
type GetV3DropletsParams struct {
	// Guids Comma-delimited list of droplet guids to filter by
	Guids *[]string `form:"guids,omitempty" json:"guids,omitempty"`

	// States Comma-delimited list of droplet states to filter by
	States *[]string `form:"states,omitempty" json:"states,omitempty"`

	// AppGuids Comma-delimited list of app guids to filter by
	AppGuids *[]string `form:"app_guids,omitempty" json:"app_guids,omitempty"`

	// SpaceGuids Comma-delimited list of space guids to filter by
	SpaceGuids *[]string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// OrganizationGuids Comma-delimited list of organization guids to filter by
	OrganizationGuids *[]string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *string `form:"order_by,omitempty" json:"order_by,omitempty"`

	// LabelSelector A query string containing a list of label selector requirements
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Timestamp to filter by
	CreatedAts *time.Time `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Timestamp to filter by
	UpdatedAts *time.Time `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// PostV3DropletsJSONBody defines parameters for PostV3Droplets.
type PostV3DropletsJSONBody struct {
	Relationships struct {
		App *struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"app,omitempty"`
	} `json:"relationships"`
}

// PostV3DropletsParams defines parameters for PostV3Droplets.
type PostV3DropletsParams struct {
	// SourceGuid Source guid of the droplet to be copied (for copy operation)
	SourceGuid *openapi_types.UUID `form:"source_guid,omitempty" json:"source_guid,omitempty"`
}

// PatchV3DropletsGuidJSONBody defines parameters for PatchV3DropletsGuid.
type PatchV3DropletsGuidJSONBody struct {
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// GetV3EnvironmentVariableGroupsNameParamsName defines parameters for GetV3EnvironmentVariableGroupsName.
type GetV3EnvironmentVariableGroupsNameParamsName string

// PatchV3EnvironmentVariableGroupsNameParamsName defines parameters for PatchV3EnvironmentVariableGroupsName.
type PatchV3EnvironmentVariableGroupsNameParamsName string

// GetV3FeatureFlagsParams defines parameters for GetV3FeatureFlags.
type GetV3FeatureFlagsParams struct {
	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *GetV3FeatureFlagsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// UpdatedAts Filter by update time
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`

	// Names Comma-delimited list of feature flag names to filter by
	Names *string `form:"names,omitempty" json:"names,omitempty"`

	// LabelSelector Filter by label selector
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`
}

// GetV3FeatureFlagsParamsOrderBy defines parameters for GetV3FeatureFlags.
type GetV3FeatureFlagsParamsOrderBy string

// GetV3IsolationSegmentsParams defines parameters for GetV3IsolationSegments.
type GetV3IsolationSegmentsParams struct {
	// Guids Comma-delimited list of isolation segment guids to filter by
	Guids *[]string `form:"guids,omitempty" json:"guids,omitempty"`

	// Names Comma-delimited list of isolation segment names to filter by
	Names *[]string `form:"names,omitempty" json:"names,omitempty"`

	// OrganizationGuids Comma-delimited list of organization guids to filter by
	OrganizationGuids *[]string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by; defaults to ascending. Prepend with - to sort descending
	OrderBy *GetV3IsolationSegmentsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// LabelSelector A query string containing a list of label selector requirements
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Timestamp to filter by
	CreatedAts *time.Time `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Timestamp to filter by
	UpdatedAts *time.Time `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3IsolationSegmentsParamsOrderBy defines parameters for GetV3IsolationSegments.
type GetV3IsolationSegmentsParamsOrderBy string

// PostV3IsolationSegmentsGuidRelationshipsOrganizationsJSONBody defines parameters for PostV3IsolationSegmentsGuidRelationshipsOrganizations.
type PostV3IsolationSegmentsGuidRelationshipsOrganizationsJSONBody struct {
	Data *[]struct {
		Guid *string `json:"guid,omitempty"`
	} `json:"data,omitempty"`
}

// GetV3JobsParams defines parameters for GetV3Jobs.
type GetV3JobsParams struct {
	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *GetV3JobsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// States Comma-delimited list of job states to filter by
	States *string `form:"states,omitempty" json:"states,omitempty"`

	// LabelSelector Filter by label selector
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Filter by creation time
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update time
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`

	// Guids Comma-delimited list of job GUIDs to filter by
	Guids *string `form:"guids,omitempty" json:"guids,omitempty"`
}

// GetV3JobsParamsOrderBy defines parameters for GetV3Jobs.
type GetV3JobsParamsOrderBy string

// ListOrganizationQuotasParams defines parameters for ListOrganizationQuotas.
type ListOrganizationQuotasParams struct {
	// Guids Comma-delimited list of organization quota guids to filter by
	Guids *string `form:"guids,omitempty" json:"guids,omitempty"`

	// Names Comma-delimited list of organization quota names to filter by
	Names *string `form:"names,omitempty" json:"names,omitempty"`

	// OrganizationGuids Comma-delimited list of organization guids to filter by
	OrganizationGuids *string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// LabelSelector Filter by label selector
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *ListOrganizationQuotasParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// CreatedAts Filter by creation time
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update time
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`

	// Include Optionally include related resources in the response
	Include *ListOrganizationQuotasParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// ListOrganizationQuotasParamsOrderBy defines parameters for ListOrganizationQuotas.
type ListOrganizationQuotasParamsOrderBy string

// ListOrganizationQuotasParamsInclude defines parameters for ListOrganizationQuotas.
type ListOrganizationQuotasParamsInclude string

// GetOrganizationQuotaParams defines parameters for GetOrganizationQuota.
type GetOrganizationQuotaParams struct {
	// Include Optionally include related resources in the response
	Include *GetOrganizationQuotaParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetOrganizationQuotaParamsInclude defines parameters for GetOrganizationQuota.
type GetOrganizationQuotaParamsInclude string

// ApplyOrganizationQuotaToOrganizationsJSONBody defines parameters for ApplyOrganizationQuotaToOrganizations.
type ApplyOrganizationQuotaToOrganizationsJSONBody struct {
	// Data List of organization relationships to apply the quota to
	Data []struct {
		// Guid Organization GUID
		Guid openapi_types.UUID `json:"guid"`
	} `json:"data"`
}

// ListOrganizationsParams defines parameters for ListOrganizations.
type ListOrganizationsParams struct {
	Names         *string `form:"names,omitempty" json:"names,omitempty"`
	Guids         *string `form:"guids,omitempty" json:"guids,omitempty"`
	Page          *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage       *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	OrderBy       *string `form:"order_by,omitempty" json:"order_by,omitempty"`
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`
	CreatedAts    *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`
	UpdatedAts    *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// CreateOrganizationJSONBody defines parameters for CreateOrganization.
type CreateOrganizationJSONBody struct {
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name      string `json:"name"`
	Suspended *bool  `json:"suspended,omitempty"`
}

// UpdateOrganizationJSONBody defines parameters for UpdateOrganization.
type UpdateOrganizationJSONBody struct {
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name      *string `json:"name,omitempty"`
	Suspended *bool   `json:"suspended,omitempty"`
}

// AssignDefaultIsolationSegmentJSONBody defines parameters for AssignDefaultIsolationSegment.
type AssignDefaultIsolationSegmentJSONBody struct {
	Data *struct {
		Guid *string `json:"guid,omitempty"`
	} `json:"data,omitempty"`
}

// ListUsersForOrganizationParams defines parameters for ListUsersForOrganization.
type ListUsersForOrganizationParams struct {
	Guids            *string `form:"guids,omitempty" json:"guids,omitempty"`
	Usernames        *string `form:"usernames,omitempty" json:"usernames,omitempty"`
	PartialUsernames *string `form:"partial_usernames,omitempty" json:"partial_usernames,omitempty"`
	Origins          *string `form:"origins,omitempty" json:"origins,omitempty"`
	Page             *int    `form:"page,omitempty" json:"page,omitempty"`
	PerPage          *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	OrderBy          *string `form:"order_by,omitempty" json:"order_by,omitempty"`
	LabelSelector    *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`
	CreatedAts       *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`
	UpdatedAts       *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3PackagesParams defines parameters for GetV3Packages.
type GetV3PackagesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Field to sort results by
	OrderBy *GetV3PackagesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Guids Filter by package GUIDs (comma-separated)
	Guids *string `form:"guids,omitempty" json:"guids,omitempty"`

	// States Filter by package states (comma-separated)
	States *string `form:"states,omitempty" json:"states,omitempty"`

	// Types Filter by package types (comma-separated)
	Types *string `form:"types,omitempty" json:"types,omitempty"`

	// AppGuids Filter by app GUIDs (comma-separated)
	AppGuids *string `form:"app_guids,omitempty" json:"app_guids,omitempty"`

	// SpaceGuids Filter by space GUIDs (comma-separated)
	SpaceGuids *string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// OrganizationGuids Filter by organization GUIDs (comma-separated)
	OrganizationGuids *string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// LabelSelector Filter by labels using label selector syntax
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Filter by creation timestamp range
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update timestamp range
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3PackagesParamsOrderBy defines parameters for GetV3Packages.
type GetV3PackagesParamsOrderBy string

// PostV3PackagesJSONBody defines parameters for PostV3Packages.
type PostV3PackagesJSONBody struct {
	// Data Package type specific data
	Data *struct {
		// Image Docker image URL or OCI image reference (docker/cnb types)
		Image *string `json:"image,omitempty"`

		// Password Password for private registry authentication
		Password *string `json:"password,omitempty"`

		// Username Username for private registry authentication
		Username *string `json:"username,omitempty"`
	} `json:"data,omitempty"`
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Relationships struct {
		App struct {
			Data struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"app"`
	} `json:"relationships"`

	// Type Type of package
	Type PostV3PackagesJSONBodyType `json:"type"`
}

// PostV3PackagesJSONBodyType defines parameters for PostV3Packages.
type PostV3PackagesJSONBodyType string

// PatchV3PackagesGuidJSONBody defines parameters for PatchV3PackagesGuid.
type PatchV3PackagesGuidJSONBody struct {
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// PostV3PackagesGuidCopyJSONBody defines parameters for PostV3PackagesGuidCopy.
type PostV3PackagesGuidCopyJSONBody struct {
	Relationships struct {
		App struct {
			Data struct {
				// Guid GUID of the target app
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"app"`
	} `json:"relationships"`
}

// GetV3PackagesGuidDropletsParams defines parameters for GetV3PackagesGuidDroplets.
type GetV3PackagesGuidDropletsParams struct {
	// Guids Comma-delimited list of droplet guids to filter by
	Guids *[]string `form:"guids,omitempty" json:"guids,omitempty"`

	// States Comma-delimited list of droplet states to filter by
	States *[]string `form:"states,omitempty" json:"states,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *string `form:"order_by,omitempty" json:"order_by,omitempty"`

	// LabelSelector A query string containing a list of label selector requirements
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`
}

// PostV3PackagesGuidUploadMultipartBody defines parameters for PostV3PackagesGuidUpload.
type PostV3PackagesGuidUploadMultipartBody struct {
	// Bits Zip file containing application source code
	Bits openapi_types.File `json:"bits"`

	// Resources Fingerprints of already-uploaded bits for resource matching
	Resources *string `json:"resources,omitempty"`
}

// GetV3ProcessesParams defines parameters for GetV3Processes.
type GetV3ProcessesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Field to sort results by
	OrderBy *GetV3ProcessesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Guids Filter by process GUIDs (comma-separated)
	Guids *string `form:"guids,omitempty" json:"guids,omitempty"`

	// Types Filter by process types (comma-separated)
	Types *string `form:"types,omitempty" json:"types,omitempty"`

	// AppGuids Filter by app GUIDs (comma-separated)
	AppGuids *string `form:"app_guids,omitempty" json:"app_guids,omitempty"`

	// SpaceGuids Filter by space GUIDs (comma-separated)
	SpaceGuids *string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// OrganizationGuids Filter by organization GUIDs (comma-separated)
	OrganizationGuids *string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// LabelSelector Filter by labels using label selector syntax
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Filter by creation timestamp range
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update timestamp range
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3ProcessesParamsOrderBy defines parameters for GetV3Processes.
type GetV3ProcessesParamsOrderBy string

// PatchV3ProcessesGuidJSONBody defines parameters for PatchV3ProcessesGuid.
type PatchV3ProcessesGuidJSONBody struct {
	// Command Start command for the process
	Command     *string `json:"command"`
	HealthCheck *struct {
		Data *struct {
			// Endpoint Endpoint for http health checks
			Endpoint *string `json:"endpoint,omitempty"`

			// Interval Interval between health checks in seconds
			Interval *int `json:"interval,omitempty"`

			// InvocationTimeout Invocation timeout for http health checks
			InvocationTimeout *int `json:"invocation_timeout,omitempty"`

			// Timeout Health check timeout in seconds
			Timeout *int `json:"timeout,omitempty"`
		} `json:"data,omitempty"`

		// Type Type of health check
		Type *PatchV3ProcessesGuidJSONBodyHealthCheckType `json:"type,omitempty"`
	} `json:"health_check,omitempty"`
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// ReadinessHealthCheck Readiness health check configuration
	ReadinessHealthCheck *struct {
		Data *struct {
			Endpoint          *string `json:"endpoint,omitempty"`
			Interval          *int    `json:"interval,omitempty"`
			InvocationTimeout *int    `json:"invocation_timeout,omitempty"`
		} `json:"data,omitempty"`
		Type *PatchV3ProcessesGuidJSONBodyReadinessHealthCheckType `json:"type,omitempty"`
	} `json:"readiness_health_check,omitempty"`
}

// PatchV3ProcessesGuidJSONBodyHealthCheckType defines parameters for PatchV3ProcessesGuid.
type PatchV3ProcessesGuidJSONBodyHealthCheckType string

// PatchV3ProcessesGuidJSONBodyReadinessHealthCheckType defines parameters for PatchV3ProcessesGuid.
type PatchV3ProcessesGuidJSONBodyReadinessHealthCheckType string

// PostV3ProcessesGuidActionsScaleJSONBody defines parameters for PostV3ProcessesGuidActionsScale.
type PostV3ProcessesGuidActionsScaleJSONBody struct {
	// DiskInMb Disk limit per instance in MB
	DiskInMb *int `json:"disk_in_mb,omitempty"`

	// Instances Number of instances
	Instances *int `json:"instances,omitempty"`

	// LogRateLimitInBytesPerSecond Log rate limit per instance (-1 for unlimited)
	LogRateLimitInBytesPerSecond *int `json:"log_rate_limit_in_bytes_per_second,omitempty"`

	// MemoryInMb Memory limit per instance in MB
	MemoryInMb *int `json:"memory_in_mb,omitempty"`
}

// GetV3ProcessesGuidSidecarsParams defines parameters for GetV3ProcessesGuidSidecars.
type GetV3ProcessesGuidSidecarsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Sort order for results
	OrderBy *GetV3ProcessesGuidSidecarsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Names Filter by sidecar names (comma-separated)
	Names *string `form:"names,omitempty" json:"names,omitempty"`

	// LabelSelector Filter by label selector
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Filter by creation time
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update time
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3ProcessesGuidSidecarsParamsOrderBy defines parameters for GetV3ProcessesGuidSidecars.
type GetV3ProcessesGuidSidecarsParamsOrderBy string

// PatchV3RevisionsGuidJSONBody defines parameters for PatchV3RevisionsGuid.
type PatchV3RevisionsGuidJSONBody struct {
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// GetV3RolesParams defines parameters for GetV3Roles.
type GetV3RolesParams struct {
	// Guids Comma-delimited list of role guids to filter by
	Guids *string `form:"guids,omitempty" json:"guids,omitempty"`

	// Types Comma-delimited list of role types to filter by
	Types *string `form:"types,omitempty" json:"types,omitempty"`

	// SpaceGuids Comma-delimited list of space guids to filter by
	SpaceGuids *string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// OrganizationGuids Comma-delimited list of organization guids to filter by
	OrganizationGuids *string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// UserGuids Comma-delimited list of user guids to filter by
	UserGuids *string `form:"user_guids,omitempty" json:"user_guids,omitempty"`

	// LabelSelector Filter by label selector
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *GetV3RolesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Include Optionally include related resources in the response
	Include *GetV3RolesParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// CreatedAts Filter by creation time
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update time
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3RolesParamsOrderBy defines parameters for GetV3Roles.
type GetV3RolesParamsOrderBy string

// GetV3RolesParamsInclude defines parameters for GetV3Roles.
type GetV3RolesParamsInclude string

// GetV3RolesGuidParams defines parameters for GetV3RolesGuid.
type GetV3RolesGuidParams struct {
	// Include Optionally include related resources in the response
	Include *GetV3RolesGuidParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetV3RolesGuidParamsInclude defines parameters for GetV3RolesGuid.
type GetV3RolesGuidParamsInclude string

// GetV3RoutesParams defines parameters for GetV3Routes.
type GetV3RoutesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Field to sort results by
	OrderBy *GetV3RoutesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// AppGuids Filter by app GUIDs (comma-separated)
	AppGuids *string `form:"app_guids,omitempty" json:"app_guids,omitempty"`

	// DomainGuids Filter by domain GUIDs (comma-separated)
	DomainGuids *string `form:"domain_guids,omitempty" json:"domain_guids,omitempty"`

	// SpaceGuids Filter by space GUIDs (comma-separated)
	SpaceGuids *string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// OrganizationGuids Filter by organization GUIDs (comma-separated)
	OrganizationGuids *string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// Hosts Filter by hostnames (comma-separated)
	Hosts *string `form:"hosts,omitempty" json:"hosts,omitempty"`

	// Paths Filter by paths (comma-separated)
	Paths *string `form:"paths,omitempty" json:"paths,omitempty"`

	// Ports Filter by ports (comma-separated)
	Ports *string `form:"ports,omitempty" json:"ports,omitempty"`

	// ServiceInstanceGuids Filter by service instance GUIDs (comma-separated)
	ServiceInstanceGuids *string `form:"service_instance_guids,omitempty" json:"service_instance_guids,omitempty"`

	// LabelSelector Filter by labels using label selector syntax
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// Include Include related resources
	Include *GetV3RoutesParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// CreatedAts Filter by creation timestamp. Supports multiple formats:
	// - Range: created_ats=2020-01-01T00:00:00Z,2020-12-31T23:59:59Z
	// - Greater than: created_ats[gt]=2020-01-01T00:00:00Z
	// - Greater than or equal: created_ats[gte]=2020-01-01T00:00:00Z
	// - Less than: created_ats[lt]=2020-12-31T23:59:59Z
	// - Less than or equal: created_ats[lte]=2020-12-31T23:59:59Z
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update timestamp. Supports multiple formats:
	// - Range: updated_ats=2020-01-01T00:00:00Z,2020-12-31T23:59:59Z
	// - Greater than: updated_ats[gt]=2020-01-01T00:00:00Z
	// - Greater than or equal: updated_ats[gte]=2020-01-01T00:00:00Z
	// - Less than: updated_ats[lt]=2020-12-31T23:59:59Z
	// - Less than or equal: updated_ats[lte]=2020-12-31T23:59:59Z
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`

	// Fields Fields to include in the response. Use dot notation for nested fields.
	// Example: fields[routes]=guid,host,path or fields[domain]=name,guid
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV3RoutesParamsOrderBy defines parameters for GetV3Routes.
type GetV3RoutesParamsOrderBy string

// GetV3RoutesParamsInclude defines parameters for GetV3Routes.
type GetV3RoutesParamsInclude string

// PostV3RoutesJSONBody defines parameters for PostV3Routes.
type PostV3RoutesJSONBody struct {
	// Host Hostname for the route
	Host     *string `json:"host,omitempty"`
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Path Path for the route
	Path *string `json:"path,omitempty"`

	// Port Port for TCP route
	Port          *int `json:"port,omitempty"`
	Relationships struct {
		Domain struct {
			Data struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"domain"`
		Space struct {
			Data struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"space"`
	} `json:"relationships"`
}

// GetV3RoutesGuidParams defines parameters for GetV3RoutesGuid.
type GetV3RoutesGuidParams struct {
	// Include Include related resources
	Include *GetV3RoutesGuidParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetV3RoutesGuidParamsInclude defines parameters for GetV3RoutesGuid.
type GetV3RoutesGuidParamsInclude string

// PatchV3RoutesGuidJSONBody defines parameters for PatchV3RoutesGuid.
type PatchV3RoutesGuidJSONBody struct {
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// GetV3RoutesGuidDestinationsParams defines parameters for GetV3RoutesGuidDestinations.
type GetV3RoutesGuidDestinationsParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// AppGuids Filter by app GUIDs (comma-separated)
	AppGuids *string `form:"app_guids,omitempty" json:"app_guids,omitempty"`
}

// PatchV3RoutesGuidDestinationsJSONBody defines parameters for PatchV3RoutesGuidDestinations.
type PatchV3RoutesGuidDestinationsJSONBody struct {
	Destinations []struct {
		App struct {
			Guid    openapi_types.UUID `json:"guid"`
			Process *struct {
				Type *string `json:"type,omitempty"`
			} `json:"process,omitempty"`
		} `json:"app"`
		Port     *int                                                       `json:"port,omitempty"`
		Protocol *PatchV3RoutesGuidDestinationsJSONBodyDestinationsProtocol `json:"protocol,omitempty"`
		Weight   *int                                                       `json:"weight,omitempty"`
	} `json:"destinations"`
}

// PatchV3RoutesGuidDestinationsJSONBodyDestinationsProtocol defines parameters for PatchV3RoutesGuidDestinations.
type PatchV3RoutesGuidDestinationsJSONBodyDestinationsProtocol string

// PostV3RoutesGuidDestinationsJSONBody defines parameters for PostV3RoutesGuidDestinations.
type PostV3RoutesGuidDestinationsJSONBody struct {
	Destinations []struct {
		App struct {
			Guid    openapi_types.UUID `json:"guid"`
			Process *struct {
				// Type Process type to route to
				Type *string `json:"type,omitempty"`
			} `json:"process,omitempty"`
		} `json:"app"`

		// Port Port on the app process
		Port *int `json:"port,omitempty"`

		// Protocol Protocol for the destination
		Protocol *PostV3RoutesGuidDestinationsJSONBodyDestinationsProtocol `json:"protocol,omitempty"`

		// Weight Percentage of traffic for weighted routing
		Weight *int `json:"weight,omitempty"`
	} `json:"destinations"`
}

// PostV3RoutesGuidDestinationsJSONBodyDestinationsProtocol defines parameters for PostV3RoutesGuidDestinations.
type PostV3RoutesGuidDestinationsJSONBodyDestinationsProtocol string

// PatchV3RoutesGuidRelationshipsSpaceJSONBody defines parameters for PatchV3RoutesGuidRelationshipsSpace.
type PatchV3RoutesGuidRelationshipsSpaceJSONBody struct {
	// Data List of spaces to share the route with
	Data []struct {
		// Guid GUID of the space to share with
		Guid openapi_types.UUID `json:"guid"`
	} `json:"data"`
}

// PostV3RoutesGuidTransferOwnerJSONBody defines parameters for PostV3RoutesGuidTransferOwner.
type PostV3RoutesGuidTransferOwnerJSONBody struct {
	Relationships struct {
		Space struct {
			Data struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
		} `json:"space"`
	} `json:"relationships"`
}

// GetV3SecurityGroupsParams defines parameters for GetV3SecurityGroups.
type GetV3SecurityGroupsParams struct {
	// Guids Comma-delimited list of security group guids to filter by
	Guids *string `form:"guids,omitempty" json:"guids,omitempty"`

	// Names Comma-delimited list of security group names to filter by
	Names *string `form:"names,omitempty" json:"names,omitempty"`

	// GloballyEnabledRunning If true, only include security groups enabled globally for running apps
	GloballyEnabledRunning *bool `form:"globally_enabled_running,omitempty" json:"globally_enabled_running,omitempty"`

	// GloballyEnabledStaging If true, only include security groups enabled globally for staging apps
	GloballyEnabledStaging *bool `form:"globally_enabled_staging,omitempty" json:"globally_enabled_staging,omitempty"`

	// RunningSpaceGuids Comma-delimited list of space guids to filter by for running security groups
	RunningSpaceGuids *string `form:"running_space_guids,omitempty" json:"running_space_guids,omitempty"`

	// StagingSpaceGuids Comma-delimited list of space guids to filter by for staging security groups
	StagingSpaceGuids *string `form:"staging_space_guids,omitempty" json:"staging_space_guids,omitempty"`

	// LabelSelector Filter by label selector
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *GetV3SecurityGroupsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// CreatedAts Filter by creation time
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update time
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3SecurityGroupsParamsOrderBy defines parameters for GetV3SecurityGroups.
type GetV3SecurityGroupsParamsOrderBy string

// PostV3SecurityGroupsGuidRelationshipsRunningSpacesJSONBody defines parameters for PostV3SecurityGroupsGuidRelationshipsRunningSpaces.
type PostV3SecurityGroupsGuidRelationshipsRunningSpacesJSONBody struct {
	// Data List of space relationships to bind
	Data []struct {
		// Guid Space GUID to bind
		Guid openapi_types.UUID `json:"guid"`
	} `json:"data"`
}

// PostV3SecurityGroupsGuidRelationshipsStagingSpacesJSONBody defines parameters for PostV3SecurityGroupsGuidRelationshipsStagingSpaces.
type PostV3SecurityGroupsGuidRelationshipsStagingSpacesJSONBody struct {
	// Data List of space relationships to bind
	Data []struct {
		// Guid Space GUID to bind
		Guid openapi_types.UUID `json:"guid"`
	} `json:"data"`
}

// GetV3ServiceBrokersParams defines parameters for GetV3ServiceBrokers.
type GetV3ServiceBrokersParams struct {
	// Names Comma-delimited list of service broker names to filter by
	Names *[]string `form:"names,omitempty" json:"names,omitempty"`

	// SpaceGuids Comma-delimited list of space GUIDs to filter by
	SpaceGuids *[]string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// OrderBy Value to sort by
	OrderBy       *GetV3ServiceBrokersParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	Page          *int                              `form:"page,omitempty" json:"page,omitempty"`
	PerPage       *int                              `form:"per_page,omitempty" json:"per_page,omitempty"`
	LabelSelector *string                           `form:"label_selector,omitempty" json:"label_selector,omitempty"`
	CreatedAts    *string                           `form:"created_ats,omitempty" json:"created_ats,omitempty"`
	UpdatedAts    *string                           `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3ServiceBrokersParamsOrderBy defines parameters for GetV3ServiceBrokers.
type GetV3ServiceBrokersParamsOrderBy string

// PostV3ServiceBrokersJSONBody defines parameters for PostV3ServiceBrokers.
type PostV3ServiceBrokersJSONBody struct {
	Authentication Authentication `json:"authentication"`
	Metadata       *Metadata      `json:"metadata,omitempty"`
	Name           string         `json:"name"`
	Relationships  *struct {
		Space *ToOneRelationship `json:"space,omitempty"`
	} `json:"relationships,omitempty"`
	Url string `json:"url"`
}

// PatchV3ServiceBrokersGuidJSONBody defines parameters for PatchV3ServiceBrokersGuid.
type PatchV3ServiceBrokersGuidJSONBody struct {
	Authentication *Authentication `json:"authentication,omitempty"`
	Metadata       *Metadata       `json:"metadata,omitempty"`
	Name           *string         `json:"name,omitempty"`
	Url            *string         `json:"url,omitempty"`
}

// PostV3ServiceCredentialBindingsJSONBody defines parameters for PostV3ServiceCredentialBindings.
type PostV3ServiceCredentialBindingsJSONBody struct {
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Parameters    *map[string]interface{} `json:"parameters,omitempty"`
	Relationships struct {
		App *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"app,omitempty"`
		ServiceInstance struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"service_instance"`
	} `json:"relationships"`
	Type PostV3ServiceCredentialBindingsJSONBodyType `json:"type"`
}

// PostV3ServiceCredentialBindingsJSONBodyType defines parameters for PostV3ServiceCredentialBindings.
type PostV3ServiceCredentialBindingsJSONBodyType string

// GetV3ServiceCredentialBindingsGuidParams defines parameters for GetV3ServiceCredentialBindingsGuid.
type GetV3ServiceCredentialBindingsGuidParams struct {
	Include *[]GetV3ServiceCredentialBindingsGuidParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetV3ServiceCredentialBindingsGuidParamsInclude defines parameters for GetV3ServiceCredentialBindingsGuid.
type GetV3ServiceCredentialBindingsGuidParamsInclude string

// PatchV3ServiceCredentialBindingsGuidJSONBody defines parameters for PatchV3ServiceCredentialBindingsGuid.
type PatchV3ServiceCredentialBindingsGuidJSONBody struct {
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// GetV3ServiceInstancesParams defines parameters for GetV3ServiceInstances.
type GetV3ServiceInstancesParams struct {
	// Names Comma-delimited list of service instance names to filter by
	Names *[]string `form:"names,omitempty" json:"names,omitempty"`

	// Guids Comma-delimited list of service instance guids to filter by
	Guids *[]string `form:"guids,omitempty" json:"guids,omitempty"`

	// Type Filter by type
	Type *GetV3ServiceInstancesParamsType `form:"type,omitempty" json:"type,omitempty"`

	// SpaceGuids Comma-delimited list of space guids to filter by
	SpaceGuids *[]string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// OrganizationGuids Comma-delimited list of organization guids to filter by
	OrganizationGuids *[]string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// ServicePlanGuids Comma-delimited list of service plan guids to filter by
	ServicePlanGuids *[]string `form:"service_plan_guids,omitempty" json:"service_plan_guids,omitempty"`

	// ServicePlanNames Comma-delimited list of service plan names to filter by
	ServicePlanNames *[]string `form:"service_plan_names,omitempty" json:"service_plan_names,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *GetV3ServiceInstancesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// LabelSelector A query string containing a list of label selector requirements
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Timestamp to filter by
	CreatedAts *[]time.Time `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Timestamp to filter by
	UpdatedAts *[]time.Time `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3ServiceInstancesParamsType defines parameters for GetV3ServiceInstances.
type GetV3ServiceInstancesParamsType string

// GetV3ServiceInstancesParamsOrderBy defines parameters for GetV3ServiceInstances.
type GetV3ServiceInstancesParamsOrderBy string

// DeleteV3ServiceInstancesGuidParams defines parameters for DeleteV3ServiceInstancesGuid.
type DeleteV3ServiceInstancesGuidParams struct {
	// Purge If true, deletes the service instance and all associated resources without any interaction with the service broker
	Purge *bool `form:"purge,omitempty" json:"purge,omitempty"`
}

// PatchV3ServiceInstancesGuidJSONBody defines parameters for PatchV3ServiceInstancesGuid.
type PatchV3ServiceInstancesGuidJSONBody struct {
	union json.RawMessage
}

// PostV3ServiceInstancesGuidRelationshipsSharedSpacesJSONBody defines parameters for PostV3ServiceInstancesGuidRelationshipsSharedSpaces.
type PostV3ServiceInstancesGuidRelationshipsSharedSpacesJSONBody struct {
	Data *[]Space `json:"data,omitempty"`
}

// GetV3ServiceOfferingsParams defines parameters for GetV3ServiceOfferings.
type GetV3ServiceOfferingsParams struct {
	// Names Comma-delimited list of names to filter by
	Names *[]string `form:"names,omitempty" json:"names,omitempty"`

	// Available Filter by the available property; valid values are true or false
	Available *bool `form:"available,omitempty" json:"available,omitempty"`

	// ServiceBrokerGuids Comma-delimited list of service broker GUIDs to filter by
	ServiceBrokerGuids *[]string `form:"service_broker_guids,omitempty" json:"service_broker_guids,omitempty"`

	// ServiceBrokerNames Comma-delimited list of service broker names to filter by
	ServiceBrokerNames *[]string `form:"service_broker_names,omitempty" json:"service_broker_names,omitempty"`

	// SpaceGuids Comma-delimited list of space GUIDs to filter by
	SpaceGuids *[]string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// OrganizationGuids Comma-delimited list of organization GUIDs to filter by
	OrganizationGuids *[]string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// LabelSelector A query string containing a list of label selector requirements
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// OrderBy Value to sort by. Defaults to ascending; prepend with - to sort descending. Valid values are created_at, updated_at, name
	OrderBy *string `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Page Page to display; valid values are integers >= 1
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page; valid values are 1 through 5000
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// CreatedAts Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed. Also supports filtering with relational operators
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed. Also supports filtering with relational operators
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// DeleteV3ServiceOfferingsGuidParams defines parameters for DeleteV3ServiceOfferingsGuid.
type DeleteV3ServiceOfferingsGuidParams struct {
	// Purge If true, any service plans, instances, and bindings associated with this service offering will also be deleted
	Purge *bool `form:"purge,omitempty" json:"purge,omitempty"`
}

// GetV3ServicePlansParams defines parameters for GetV3ServicePlans.
type GetV3ServicePlansParams struct {
	// Names Comma-delimited list of names to filter by
	Names *[]string `form:"names,omitempty" json:"names,omitempty"`

	// Available Filter by the available property; valid values are true or false
	Available *bool `form:"available,omitempty" json:"available,omitempty"`

	// BrokerCatalogIds Comma-delimited list of IDs provided by the service broker for the service plan to filter by
	BrokerCatalogIds *[]string `form:"broker_catalog_ids,omitempty" json:"broker_catalog_ids,omitempty"`

	// SpaceGuids Comma-delimited list of space GUIDs to filter by
	SpaceGuids *[]string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// OrganizationGuids Comma-delimited list of organization GUIDs to filter by
	OrganizationGuids *[]string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// ServiceBrokerGuids Comma-delimited list of service broker GUIDs to filter by
	ServiceBrokerGuids *[]string `form:"service_broker_guids,omitempty" json:"service_broker_guids,omitempty"`

	// ServiceBrokerNames Comma-delimited list of service broker names to filter by
	ServiceBrokerNames *[]string `form:"service_broker_names,omitempty" json:"service_broker_names,omitempty"`

	// ServiceOfferingGuids Comma-delimited list of service Offering GUIDs to filter by
	ServiceOfferingGuids *[]string `form:"service_offering_guids,omitempty" json:"service_offering_guids,omitempty"`

	// ServiceOfferingNames Comma-delimited list of service Offering names to filter by
	ServiceOfferingNames *[]string `form:"service_offering_names,omitempty" json:"service_offering_names,omitempty"`

	// ServiceInstanceGuids Comma-delimited list of service Instance GUIDs to filter by
	ServiceInstanceGuids *[]string `form:"service_instance_guids,omitempty" json:"service_instance_guids,omitempty"`

	// Include Optionally include a list of related resources in the response; valid values are space.organization and service_offering
	Include *[]string `form:"include,omitempty" json:"include,omitempty"`

	// Page Page to display; valid values are integers >= 1
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page; valid values are 1 through 5000
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by. Defaults to ascending; prepend with - to sort descending. Valid values are created_at, updated_at, name
	OrderBy *string `form:"order_by,omitempty" json:"order_by,omitempty"`

	// LabelSelector A query string containing a list of label selector requirements
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// Fields Allowed values for fields
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// CreatedAts Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed. Also supports filtering with relational operators
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed. Also supports filtering with relational operators
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// DeleteV3ServicePlansGuidParams defines parameters for DeleteV3ServicePlansGuid.
type DeleteV3ServicePlansGuidParams struct {
	// Purge If true, any service plans, instances, and bindings associated with this service plan will also be deleted
	Purge *bool `form:"purge,omitempty" json:"purge,omitempty"`
}

// GetV3ServiceRouteBindingsParams defines parameters for GetV3ServiceRouteBindings.
type GetV3ServiceRouteBindingsParams struct {
	RouteGuids           *[]string                               `form:"route_guids,omitempty" json:"route_guids,omitempty"`
	ServiceInstanceGuids *[]string                               `form:"service_instance_guids,omitempty" json:"service_instance_guids,omitempty"`
	ServiceInstanceNames *[]string                               `form:"service_instance_names,omitempty" json:"service_instance_names,omitempty"`
	LabelSelector        *string                                 `form:"label_selector,omitempty" json:"label_selector,omitempty"`
	Guids                *[]string                               `form:"guids,omitempty" json:"guids,omitempty"`
	CreatedAts           *string                                 `form:"created_ats,omitempty" json:"created_ats,omitempty"`
	UpdatedAts           *string                                 `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
	Include              *[]string                               `form:"include,omitempty" json:"include,omitempty"`
	Page                 *int                                    `form:"page,omitempty" json:"page,omitempty"`
	PerPage              *int                                    `form:"per_page,omitempty" json:"per_page,omitempty"`
	OrderBy              *GetV3ServiceRouteBindingsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// GetV3ServiceRouteBindingsParamsOrderBy defines parameters for GetV3ServiceRouteBindings.
type GetV3ServiceRouteBindingsParamsOrderBy string

// PostV3ServiceRouteBindingsJSONBody defines parameters for PostV3ServiceRouteBindings.
type PostV3ServiceRouteBindingsJSONBody struct {
	Metadata      *Metadata                        `json:"metadata,omitempty"`
	Parameters    *map[string]interface{}          `json:"parameters,omitempty"`
	Relationships ServiceRouteBindingRelationships `json:"relationships"`
}

// GetV3ServiceRouteBindingsGuidParams defines parameters for GetV3ServiceRouteBindingsGuid.
type GetV3ServiceRouteBindingsGuidParams struct {
	Include *[]GetV3ServiceRouteBindingsGuidParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetV3ServiceRouteBindingsGuidParamsInclude defines parameters for GetV3ServiceRouteBindingsGuid.
type GetV3ServiceRouteBindingsGuidParamsInclude string

// PatchV3ServiceRouteBindingsGuidJSONBody defines parameters for PatchV3ServiceRouteBindingsGuid.
type PatchV3ServiceRouteBindingsGuidJSONBody struct {
	Metadata *Metadata `json:"metadata,omitempty"`
}

// GetV3ServiceUsageEventsParams defines parameters for GetV3ServiceUsageEvents.
type GetV3ServiceUsageEventsParams struct {
	Page                 *int                                                 `form:"page,omitempty" json:"page,omitempty"`
	PerPage              *int                                                 `form:"per_page,omitempty" json:"per_page,omitempty"`
	OrderBy              *GetV3ServiceUsageEventsParamsOrderBy                `form:"order_by,omitempty" json:"order_by,omitempty"`
	AfterGuid            *string                                              `form:"after_guid,omitempty" json:"after_guid,omitempty"`
	Guids                *[]string                                            `form:"guids,omitempty" json:"guids,omitempty"`
	ServiceInstanceTypes *[]GetV3ServiceUsageEventsParamsServiceInstanceTypes `form:"service_instance_types,omitempty" json:"service_instance_types,omitempty"`
	ServiceOfferingGuids *[]string                                            `form:"service_offering_guids,omitempty" json:"service_offering_guids,omitempty"`
	CreatedAts           *string                                              `form:"created_ats,omitempty" json:"created_ats,omitempty"`
	UpdatedAts           *string                                              `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3ServiceUsageEventsParamsOrderBy defines parameters for GetV3ServiceUsageEvents.
type GetV3ServiceUsageEventsParamsOrderBy string

// GetV3ServiceUsageEventsParamsServiceInstanceTypes defines parameters for GetV3ServiceUsageEvents.
type GetV3ServiceUsageEventsParamsServiceInstanceTypes string

// GetV3SidecarsGuidProcessesParams defines parameters for GetV3SidecarsGuidProcesses.
type GetV3SidecarsGuidProcessesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// GetV3SpaceQuotasParams defines parameters for GetV3SpaceQuotas.
type GetV3SpaceQuotasParams struct {
	// Guids Comma-delimited list of space quota guids to filter by
	Guids *string `form:"guids,omitempty" json:"guids,omitempty"`

	// Names Comma-delimited list of space quota names to filter by
	Names *string `form:"names,omitempty" json:"names,omitempty"`

	// OrganizationGuids Comma-delimited list of organization guids to filter by
	OrganizationGuids *string `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`

	// SpaceGuids Comma-delimited list of space guids to filter by
	SpaceGuids *string `form:"space_guids,omitempty" json:"space_guids,omitempty"`

	// LabelSelector Filter by label selector
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *GetV3SpaceQuotasParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// CreatedAts Filter by creation time
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Filter by update time
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`

	// Include Optionally include related resources in the response
	Include *GetV3SpaceQuotasParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetV3SpaceQuotasParamsOrderBy defines parameters for GetV3SpaceQuotas.
type GetV3SpaceQuotasParamsOrderBy string

// GetV3SpaceQuotasParamsInclude defines parameters for GetV3SpaceQuotas.
type GetV3SpaceQuotasParamsInclude string

// GetV3SpaceQuotasGuidParams defines parameters for GetV3SpaceQuotasGuid.
type GetV3SpaceQuotasGuidParams struct {
	// Include Optionally include related resources in the response
	Include *GetV3SpaceQuotasGuidParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetV3SpaceQuotasGuidParamsInclude defines parameters for GetV3SpaceQuotasGuid.
type GetV3SpaceQuotasGuidParamsInclude string

// PostV3SpaceQuotasGuidRelationshipsSpacesJSONBody defines parameters for PostV3SpaceQuotasGuidRelationshipsSpaces.
type PostV3SpaceQuotasGuidRelationshipsSpacesJSONBody struct {
	// Data List of space relationships to apply the quota to
	Data []struct {
		// Guid Space GUID
		Guid openapi_types.UUID `json:"guid"`
	} `json:"data"`
}

// GetV3SpacesParams defines parameters for GetV3Spaces.
type GetV3SpacesParams struct {
	Names             *string                   `form:"names,omitempty" json:"names,omitempty"`
	Guids             *string                   `form:"guids,omitempty" json:"guids,omitempty"`
	OrganizationGuids *string                   `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`
	Page              *int                      `form:"page,omitempty" json:"page,omitempty"`
	PerPage           *int                      `form:"per_page,omitempty" json:"per_page,omitempty"`
	OrderBy           *GetV3SpacesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	LabelSelector     *string                   `form:"label_selector,omitempty" json:"label_selector,omitempty"`
	Include           *GetV3SpacesParamsInclude `form:"include,omitempty" json:"include,omitempty"`
	CreatedAts        *string                   `form:"created_ats,omitempty" json:"created_ats,omitempty"`
	UpdatedAts        *string                   `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3SpacesParamsOrderBy defines parameters for GetV3Spaces.
type GetV3SpacesParamsOrderBy string

// GetV3SpacesParamsInclude defines parameters for GetV3Spaces.
type GetV3SpacesParamsInclude string

// PostV3SpacesJSONBody defines parameters for PostV3Spaces.
type PostV3SpacesJSONBody struct {
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name          string `json:"name"`
	Relationships struct {
		Organization *struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		} `json:"organization,omitempty"`
	} `json:"relationships"`
}

// PatchV3SpacesGuidJSONBody defines parameters for PatchV3SpacesGuid.
type PatchV3SpacesGuidJSONBody struct {
	Metadata *struct {
		Annotations *map[string]interface{} `json:"annotations,omitempty"`
		Labels      *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
	Name *string `json:"name,omitempty"`
}

// GetV3SpacesGuidFeaturesNameParamsName defines parameters for GetV3SpacesGuidFeaturesName.
type GetV3SpacesGuidFeaturesNameParamsName string

// PatchV3SpacesGuidFeaturesNameParamsName defines parameters for PatchV3SpacesGuidFeaturesName.
type PatchV3SpacesGuidFeaturesNameParamsName string

// PatchV3SpacesGuidRelationshipsIsolationSegmentJSONBody defines parameters for PatchV3SpacesGuidRelationshipsIsolationSegment.
type PatchV3SpacesGuidRelationshipsIsolationSegmentJSONBody struct {
	Data *struct {
		Guid *string `json:"guid,omitempty"`
	} `json:"data,omitempty"`
}

// GetV3SpacesGuidRunningSecurityGroupsParams defines parameters for GetV3SpacesGuidRunningSecurityGroups.
type GetV3SpacesGuidRunningSecurityGroupsParams struct {
	// Guids Comma-delimited list of security group guids to filter by
	Guids *string `form:"guids,omitempty" json:"guids,omitempty"`

	// Names Comma-delimited list of security group names to filter by
	Names *string `form:"names,omitempty" json:"names,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *GetV3SpacesGuidRunningSecurityGroupsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// GetV3SpacesGuidRunningSecurityGroupsParamsOrderBy defines parameters for GetV3SpacesGuidRunningSecurityGroups.
type GetV3SpacesGuidRunningSecurityGroupsParamsOrderBy string

// GetV3SpacesGuidStagingSecurityGroupsParams defines parameters for GetV3SpacesGuidStagingSecurityGroups.
type GetV3SpacesGuidStagingSecurityGroupsParams struct {
	// Guids Comma-delimited list of security group guids to filter by
	Guids *string `form:"guids,omitempty" json:"guids,omitempty"`

	// Names Comma-delimited list of security group names to filter by
	Names *string `form:"names,omitempty" json:"names,omitempty"`

	// Page Page to display
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by
	OrderBy *GetV3SpacesGuidStagingSecurityGroupsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// GetV3SpacesGuidStagingSecurityGroupsParamsOrderBy defines parameters for GetV3SpacesGuidStagingSecurityGroups.
type GetV3SpacesGuidStagingSecurityGroupsParamsOrderBy string

// GetV3SpacesGuidUsersParams defines parameters for GetV3SpacesGuidUsers.
type GetV3SpacesGuidUsersParams struct {
	Guids            *string                            `form:"guids,omitempty" json:"guids,omitempty"`
	Usernames        *string                            `form:"usernames,omitempty" json:"usernames,omitempty"`
	PartialUsernames *string                            `form:"partial_usernames,omitempty" json:"partial_usernames,omitempty"`
	Origins          *string                            `form:"origins,omitempty" json:"origins,omitempty"`
	Page             *int                               `form:"page,omitempty" json:"page,omitempty"`
	PerPage          *int                               `form:"per_page,omitempty" json:"per_page,omitempty"`
	OrderBy          *GetV3SpacesGuidUsersParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	LabelSelector    *string                            `form:"label_selector,omitempty" json:"label_selector,omitempty"`
	CreatedAts       *string                            `form:"created_ats,omitempty" json:"created_ats,omitempty"`
	UpdatedAts       *string                            `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3SpacesGuidUsersParamsOrderBy defines parameters for GetV3SpacesGuidUsers.
type GetV3SpacesGuidUsersParamsOrderBy string

// GetV3StacksParams defines parameters for GetV3Stacks.
type GetV3StacksParams struct {
	Names         *string                   `form:"names,omitempty" json:"names,omitempty"`
	Default       *bool                     `form:"default,omitempty" json:"default,omitempty"`
	Page          *int                      `form:"page,omitempty" json:"page,omitempty"`
	PerPage       *int                      `form:"per_page,omitempty" json:"per_page,omitempty"`
	OrderBy       *GetV3StacksParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	LabelSelector *string                   `form:"label_selector,omitempty" json:"label_selector,omitempty"`
	CreatedAts    *string                   `form:"created_ats,omitempty" json:"created_ats,omitempty"`
	UpdatedAts    *string                   `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3StacksParamsOrderBy defines parameters for GetV3Stacks.
type GetV3StacksParamsOrderBy string

// PostV3StacksJSONBody defines parameters for PostV3Stacks.
type PostV3StacksJSONBody struct {
	// Description Description of the stack; must be no longer than 250 characters
	Description *string `json:"description,omitempty"`
	Metadata    *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`

	// Name Name of the stack; must be unique and no longer than 250 characters
	Name string `json:"name"`
}

// PatchV3StacksGuidJSONBody defines parameters for PatchV3StacksGuid.
type PatchV3StacksGuidJSONBody struct {
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// GetV3StacksGuidAppsParams defines parameters for GetV3StacksGuidApps.
type GetV3StacksGuidAppsParams struct {
	Page          *int                              `form:"page,omitempty" json:"page,omitempty"`
	PerPage       *int                              `form:"per_page,omitempty" json:"per_page,omitempty"`
	OrderBy       *GetV3StacksGuidAppsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	LabelSelector *string                           `form:"label_selector,omitempty" json:"label_selector,omitempty"`
	CreatedAts    *string                           `form:"created_ats,omitempty" json:"created_ats,omitempty"`
	UpdatedAts    *string                           `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3StacksGuidAppsParamsOrderBy defines parameters for GetV3StacksGuidApps.
type GetV3StacksGuidAppsParamsOrderBy string

// GetV3TasksParams defines parameters for GetV3Tasks.
type GetV3TasksParams struct {
	Guids             *string                  `form:"guids,omitempty" json:"guids,omitempty"`
	Names             *string                  `form:"names,omitempty" json:"names,omitempty"`
	States            *string                  `form:"states,omitempty" json:"states,omitempty"`
	AppGuids          *string                  `form:"app_guids,omitempty" json:"app_guids,omitempty"`
	SpaceGuids        *string                  `form:"space_guids,omitempty" json:"space_guids,omitempty"`
	OrganizationGuids *string                  `form:"organization_guids,omitempty" json:"organization_guids,omitempty"`
	Page              *int                     `form:"page,omitempty" json:"page,omitempty"`
	PerPage           *int                     `form:"per_page,omitempty" json:"per_page,omitempty"`
	OrderBy           *GetV3TasksParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	LabelSelector     *string                  `form:"label_selector,omitempty" json:"label_selector,omitempty"`
	CreatedAts        *string                  `form:"created_ats,omitempty" json:"created_ats,omitempty"`
	UpdatedAts        *string                  `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3TasksParamsOrderBy defines parameters for GetV3Tasks.
type GetV3TasksParamsOrderBy string

// PatchV3TasksGuidJSONBody defines parameters for PatchV3TasksGuid.
type PatchV3TasksGuidJSONBody struct {
	Metadata *struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		Labels      *map[string]string `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// GetV3UsersParams defines parameters for GetV3Users.
type GetV3UsersParams struct {
	// Guids Comma-delimited list of user guids to filter by
	Guids *[]string `form:"guids,omitempty" json:"guids,omitempty"`

	// Usernames Comma-delimited list of usernames to filter by. Mutually exclusive with partial_usernames
	Usernames *[]string `form:"usernames,omitempty" json:"usernames,omitempty"`

	// PartialUsernames Comma-delimited list of strings to search by. When using this query parameter, all the users that contain the string provided in their username will be returned. Mutually exclusive with usernames
	PartialUsernames *[]string `form:"partial_usernames,omitempty" json:"partial_usernames,omitempty"`

	// Origins Comma-delimited list of user origins (user stores) to filter by, for example, users authenticated by UAA have the origin “uaa”; users authenticated by an LDAP provider have the origin “ldap”; when filtering by origins, usernames must be included
	Origins *[]string `form:"origins,omitempty" json:"origins,omitempty"`

	// Page Page to display; valid values are integers >= 1
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of results per page
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Value to sort by. Defaults to ascending; prepend with - to sort descending
	OrderBy *GetV3UsersParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// LabelSelector A query string containing a list of label selector requirements
	LabelSelector *string `form:"label_selector,omitempty" json:"label_selector,omitempty"`

	// CreatedAts Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed. Also supports filtering with relational operators
	CreatedAts *string `form:"created_ats,omitempty" json:"created_ats,omitempty"`

	// UpdatedAts Timestamp to filter by. When filtering on equality, several comma-delimited timestamps may be passed. Also supports filtering with relational operators
	UpdatedAts *string `form:"updated_ats,omitempty" json:"updated_ats,omitempty"`
}

// GetV3UsersParamsOrderBy defines parameters for GetV3Users.
type GetV3UsersParamsOrderBy string

// PostV3UsersJSONBody defines parameters for PostV3Users.
type PostV3UsersJSONBody struct {
	// Guid Unique identifier for the user. For UAA users this will match the user ID of an existing UAA user’s GUID; in the case of UAA clients, this will match the UAA client ID
	Guid     *string `json:"guid,omitempty"`
	Metadata *struct {
		// Annotations Annotations added to the user
		Annotations *map[string]interface{} `json:"annotations,omitempty"`

		// Labels Labels applied to the user
		Labels *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// PatchV3UsersGuidJSONBody defines parameters for PatchV3UsersGuid.
type PatchV3UsersGuidJSONBody struct {
	Metadata *struct {
		// Annotations Annotations added to the user
		Annotations *map[string]interface{} `json:"annotations,omitempty"`

		// Labels Labels applied to the user
		Labels *map[string]interface{} `json:"labels,omitempty"`
	} `json:"metadata,omitempty"`
}

// CreateAppJSONRequestBody defines body for CreateApp for application/json ContentType.
type CreateAppJSONRequestBody CreateAppJSONBody

// UpdateAppJSONRequestBody defines body for UpdateApp for application/json ContentType.
type UpdateAppJSONRequestBody UpdateAppJSONBody

// UpdateAppEnvironmentVariablesJSONRequestBody defines body for UpdateAppEnvironmentVariables for application/json ContentType.
type UpdateAppEnvironmentVariablesJSONRequestBody UpdateAppEnvironmentVariablesJSONBody

// PatchV3AppsGuidFeaturesNameJSONRequestBody defines body for PatchV3AppsGuidFeaturesName for application/json ContentType.
type PatchV3AppsGuidFeaturesNameJSONRequestBody = AppFeatureUpdate

// PatchV3AppsGuidRelationshipsCurrentDropletJSONRequestBody defines body for PatchV3AppsGuidRelationshipsCurrentDroplet for application/json ContentType.
type PatchV3AppsGuidRelationshipsCurrentDropletJSONRequestBody PatchV3AppsGuidRelationshipsCurrentDropletJSONBody

// PostV3AppsGuidSidecarsJSONRequestBody defines body for PostV3AppsGuidSidecars for application/json ContentType.
type PostV3AppsGuidSidecarsJSONRequestBody = SidecarCreate

// PostV3AppsGuidTasksJSONRequestBody defines body for PostV3AppsGuidTasks for application/json ContentType.
type PostV3AppsGuidTasksJSONRequestBody PostV3AppsGuidTasksJSONBody

// PostV3BuildpacksJSONRequestBody defines body for PostV3Buildpacks for application/json ContentType.
type PostV3BuildpacksJSONRequestBody PostV3BuildpacksJSONBody

// PatchV3BuildpacksGuidJSONRequestBody defines body for PatchV3BuildpacksGuid for application/json ContentType.
type PatchV3BuildpacksGuidJSONRequestBody PatchV3BuildpacksGuidJSONBody

// PostV3BuildpacksGuidUploadJSONRequestBody defines body for PostV3BuildpacksGuidUpload for application/json ContentType.
type PostV3BuildpacksGuidUploadJSONRequestBody PostV3BuildpacksGuidUploadJSONBody

// PostV3BuildpacksGuidUploadMultipartRequestBody defines body for PostV3BuildpacksGuidUpload for multipart/form-data ContentType.
type PostV3BuildpacksGuidUploadMultipartRequestBody PostV3BuildpacksGuidUploadMultipartBody

// PostV3BuildsJSONRequestBody defines body for PostV3Builds for application/json ContentType.
type PostV3BuildsJSONRequestBody PostV3BuildsJSONBody

// PatchV3BuildsGuidJSONRequestBody defines body for PatchV3BuildsGuid for application/json ContentType.
type PatchV3BuildsGuidJSONRequestBody PatchV3BuildsGuidJSONBody

// PostV3DeploymentsJSONRequestBody defines body for PostV3Deployments for application/json ContentType.
type PostV3DeploymentsJSONRequestBody PostV3DeploymentsJSONBody

// PatchV3DeploymentsGuidJSONRequestBody defines body for PatchV3DeploymentsGuid for application/json ContentType.
type PatchV3DeploymentsGuidJSONRequestBody PatchV3DeploymentsGuidJSONBody

// PostV3DomainsJSONRequestBody defines body for PostV3Domains for application/json ContentType.
type PostV3DomainsJSONRequestBody PostV3DomainsJSONBody

// PatchV3DomainsGuidJSONRequestBody defines body for PatchV3DomainsGuid for application/json ContentType.
type PatchV3DomainsGuidJSONRequestBody PatchV3DomainsGuidJSONBody

// PostV3DomainsGuidRelationshipsSharedOrganizationsJSONRequestBody defines body for PostV3DomainsGuidRelationshipsSharedOrganizations for application/json ContentType.
type PostV3DomainsGuidRelationshipsSharedOrganizationsJSONRequestBody PostV3DomainsGuidRelationshipsSharedOrganizationsJSONBody

// PostV3DropletsJSONRequestBody defines body for PostV3Droplets for application/json ContentType.
type PostV3DropletsJSONRequestBody PostV3DropletsJSONBody

// PatchV3DropletsGuidJSONRequestBody defines body for PatchV3DropletsGuid for application/json ContentType.
type PatchV3DropletsGuidJSONRequestBody PatchV3DropletsGuidJSONBody

// PatchV3EnvironmentVariableGroupsNameJSONRequestBody defines body for PatchV3EnvironmentVariableGroupsName for application/json ContentType.
type PatchV3EnvironmentVariableGroupsNameJSONRequestBody = EnvironmentVariableGroupUpdate

// PatchV3FeatureFlagsNameJSONRequestBody defines body for PatchV3FeatureFlagsName for application/json ContentType.
type PatchV3FeatureFlagsNameJSONRequestBody = FeatureFlagUpdate

// PostV3IsolationSegmentsJSONRequestBody defines body for PostV3IsolationSegments for application/json ContentType.
type PostV3IsolationSegmentsJSONRequestBody = IsolationSegment

// PatchV3IsolationSegmentsGuidJSONRequestBody defines body for PatchV3IsolationSegmentsGuid for application/json ContentType.
type PatchV3IsolationSegmentsGuidJSONRequestBody = IsolationSegment

// PostV3IsolationSegmentsGuidRelationshipsOrganizationsJSONRequestBody defines body for PostV3IsolationSegmentsGuidRelationshipsOrganizations for application/json ContentType.
type PostV3IsolationSegmentsGuidRelationshipsOrganizationsJSONRequestBody PostV3IsolationSegmentsGuidRelationshipsOrganizationsJSONBody

// CreateOrganizationQuotaJSONRequestBody defines body for CreateOrganizationQuota for application/json ContentType.
type CreateOrganizationQuotaJSONRequestBody = OrganizationQuotaCreate

// UpdateOrganizationQuotaJSONRequestBody defines body for UpdateOrganizationQuota for application/json ContentType.
type UpdateOrganizationQuotaJSONRequestBody = OrganizationQuotaUpdate

// ApplyOrganizationQuotaToOrganizationsJSONRequestBody defines body for ApplyOrganizationQuotaToOrganizations for application/json ContentType.
type ApplyOrganizationQuotaToOrganizationsJSONRequestBody ApplyOrganizationQuotaToOrganizationsJSONBody

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody CreateOrganizationJSONBody

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody UpdateOrganizationJSONBody

// AssignDefaultIsolationSegmentJSONRequestBody defines body for AssignDefaultIsolationSegment for application/json ContentType.
type AssignDefaultIsolationSegmentJSONRequestBody AssignDefaultIsolationSegmentJSONBody

// PostV3PackagesJSONRequestBody defines body for PostV3Packages for application/json ContentType.
type PostV3PackagesJSONRequestBody PostV3PackagesJSONBody

// PatchV3PackagesGuidJSONRequestBody defines body for PatchV3PackagesGuid for application/json ContentType.
type PatchV3PackagesGuidJSONRequestBody PatchV3PackagesGuidJSONBody

// PostV3PackagesGuidCopyJSONRequestBody defines body for PostV3PackagesGuidCopy for application/json ContentType.
type PostV3PackagesGuidCopyJSONRequestBody PostV3PackagesGuidCopyJSONBody

// PostV3PackagesGuidUploadMultipartRequestBody defines body for PostV3PackagesGuidUpload for multipart/form-data ContentType.
type PostV3PackagesGuidUploadMultipartRequestBody PostV3PackagesGuidUploadMultipartBody

// PatchV3ProcessesGuidJSONRequestBody defines body for PatchV3ProcessesGuid for application/json ContentType.
type PatchV3ProcessesGuidJSONRequestBody PatchV3ProcessesGuidJSONBody

// PostV3ProcessesGuidActionsScaleJSONRequestBody defines body for PostV3ProcessesGuidActionsScale for application/json ContentType.
type PostV3ProcessesGuidActionsScaleJSONRequestBody PostV3ProcessesGuidActionsScaleJSONBody

// PostV3ResourceMatchesJSONRequestBody defines body for PostV3ResourceMatches for application/json ContentType.
type PostV3ResourceMatchesJSONRequestBody = ResourceMatchRequest

// PatchV3RevisionsGuidJSONRequestBody defines body for PatchV3RevisionsGuid for application/json ContentType.
type PatchV3RevisionsGuidJSONRequestBody PatchV3RevisionsGuidJSONBody

// PostV3RolesJSONRequestBody defines body for PostV3Roles for application/json ContentType.
type PostV3RolesJSONRequestBody = RoleCreate

// PostV3RoutesJSONRequestBody defines body for PostV3Routes for application/json ContentType.
type PostV3RoutesJSONRequestBody PostV3RoutesJSONBody

// PatchV3RoutesGuidJSONRequestBody defines body for PatchV3RoutesGuid for application/json ContentType.
type PatchV3RoutesGuidJSONRequestBody PatchV3RoutesGuidJSONBody

// PatchV3RoutesGuidDestinationsJSONRequestBody defines body for PatchV3RoutesGuidDestinations for application/json ContentType.
type PatchV3RoutesGuidDestinationsJSONRequestBody PatchV3RoutesGuidDestinationsJSONBody

// PostV3RoutesGuidDestinationsJSONRequestBody defines body for PostV3RoutesGuidDestinations for application/json ContentType.
type PostV3RoutesGuidDestinationsJSONRequestBody PostV3RoutesGuidDestinationsJSONBody

// PatchV3RoutesGuidRelationshipsSpaceJSONRequestBody defines body for PatchV3RoutesGuidRelationshipsSpace for application/json ContentType.
type PatchV3RoutesGuidRelationshipsSpaceJSONRequestBody PatchV3RoutesGuidRelationshipsSpaceJSONBody

// PostV3RoutesGuidTransferOwnerJSONRequestBody defines body for PostV3RoutesGuidTransferOwner for application/json ContentType.
type PostV3RoutesGuidTransferOwnerJSONRequestBody PostV3RoutesGuidTransferOwnerJSONBody

// PostV3SecurityGroupsJSONRequestBody defines body for PostV3SecurityGroups for application/json ContentType.
type PostV3SecurityGroupsJSONRequestBody = SecurityGroupCreate

// PatchV3SecurityGroupsGuidJSONRequestBody defines body for PatchV3SecurityGroupsGuid for application/json ContentType.
type PatchV3SecurityGroupsGuidJSONRequestBody = SecurityGroupUpdate

// PostV3SecurityGroupsGuidRelationshipsRunningSpacesJSONRequestBody defines body for PostV3SecurityGroupsGuidRelationshipsRunningSpaces for application/json ContentType.
type PostV3SecurityGroupsGuidRelationshipsRunningSpacesJSONRequestBody PostV3SecurityGroupsGuidRelationshipsRunningSpacesJSONBody

// PostV3SecurityGroupsGuidRelationshipsStagingSpacesJSONRequestBody defines body for PostV3SecurityGroupsGuidRelationshipsStagingSpaces for application/json ContentType.
type PostV3SecurityGroupsGuidRelationshipsStagingSpacesJSONRequestBody PostV3SecurityGroupsGuidRelationshipsStagingSpacesJSONBody

// PostV3ServiceBrokersJSONRequestBody defines body for PostV3ServiceBrokers for application/json ContentType.
type PostV3ServiceBrokersJSONRequestBody PostV3ServiceBrokersJSONBody

// PatchV3ServiceBrokersGuidJSONRequestBody defines body for PatchV3ServiceBrokersGuid for application/json ContentType.
type PatchV3ServiceBrokersGuidJSONRequestBody PatchV3ServiceBrokersGuidJSONBody

// PostV3ServiceCredentialBindingsJSONRequestBody defines body for PostV3ServiceCredentialBindings for application/json ContentType.
type PostV3ServiceCredentialBindingsJSONRequestBody PostV3ServiceCredentialBindingsJSONBody

// PatchV3ServiceCredentialBindingsGuidJSONRequestBody defines body for PatchV3ServiceCredentialBindingsGuid for application/json ContentType.
type PatchV3ServiceCredentialBindingsGuidJSONRequestBody PatchV3ServiceCredentialBindingsGuidJSONBody

// PatchV3ServiceInstancesGuidJSONRequestBody defines body for PatchV3ServiceInstancesGuid for application/json ContentType.
type PatchV3ServiceInstancesGuidJSONRequestBody PatchV3ServiceInstancesGuidJSONBody

// PostV3ServiceInstancesGuidRelationshipsSharedSpacesJSONRequestBody defines body for PostV3ServiceInstancesGuidRelationshipsSharedSpaces for application/json ContentType.
type PostV3ServiceInstancesGuidRelationshipsSharedSpacesJSONRequestBody PostV3ServiceInstancesGuidRelationshipsSharedSpacesJSONBody

// PostV3ServiceOfferingsJSONRequestBody defines body for PostV3ServiceOfferings for application/json ContentType.
type PostV3ServiceOfferingsJSONRequestBody = ServiceOfferingCreate

// PatchV3ServiceOfferingsGuidJSONRequestBody defines body for PatchV3ServiceOfferingsGuid for application/json ContentType.
type PatchV3ServiceOfferingsGuidJSONRequestBody = ServiceOfferingUpdate

// PostV3ServicePlansJSONRequestBody defines body for PostV3ServicePlans for application/json ContentType.
type PostV3ServicePlansJSONRequestBody = ServicePlanCreate

// PatchV3ServicePlansGuidJSONRequestBody defines body for PatchV3ServicePlansGuid for application/json ContentType.
type PatchV3ServicePlansGuidJSONRequestBody = ServicePlanUpdate

// PatchV3ServicePlansGuidVisibilityJSONRequestBody defines body for PatchV3ServicePlansGuidVisibility for application/json ContentType.
type PatchV3ServicePlansGuidVisibilityJSONRequestBody = ServicePlanVisibilityUpdate

// PostV3ServicePlansGuidVisibilityJSONRequestBody defines body for PostV3ServicePlansGuidVisibility for application/json ContentType.
type PostV3ServicePlansGuidVisibilityJSONRequestBody = ServicePlanVisibilityApply

// PostV3ServiceRouteBindingsJSONRequestBody defines body for PostV3ServiceRouteBindings for application/json ContentType.
type PostV3ServiceRouteBindingsJSONRequestBody PostV3ServiceRouteBindingsJSONBody

// PatchV3ServiceRouteBindingsGuidJSONRequestBody defines body for PatchV3ServiceRouteBindingsGuid for application/json ContentType.
type PatchV3ServiceRouteBindingsGuidJSONRequestBody PatchV3ServiceRouteBindingsGuidJSONBody

// PatchV3SidecarsGuidJSONRequestBody defines body for PatchV3SidecarsGuid for application/json ContentType.
type PatchV3SidecarsGuidJSONRequestBody = SidecarUpdate

// PostV3SpaceQuotasJSONRequestBody defines body for PostV3SpaceQuotas for application/json ContentType.
type PostV3SpaceQuotasJSONRequestBody = SpaceQuotaCreate

// PatchV3SpaceQuotasGuidJSONRequestBody defines body for PatchV3SpaceQuotasGuid for application/json ContentType.
type PatchV3SpaceQuotasGuidJSONRequestBody = SpaceQuotaUpdate

// PostV3SpaceQuotasGuidRelationshipsSpacesJSONRequestBody defines body for PostV3SpaceQuotasGuidRelationshipsSpaces for application/json ContentType.
type PostV3SpaceQuotasGuidRelationshipsSpacesJSONRequestBody PostV3SpaceQuotasGuidRelationshipsSpacesJSONBody

// PostV3SpacesJSONRequestBody defines body for PostV3Spaces for application/json ContentType.
type PostV3SpacesJSONRequestBody PostV3SpacesJSONBody

// PatchV3SpacesGuidJSONRequestBody defines body for PatchV3SpacesGuid for application/json ContentType.
type PatchV3SpacesGuidJSONRequestBody PatchV3SpacesGuidJSONBody

// PatchV3SpacesGuidFeaturesNameJSONRequestBody defines body for PatchV3SpacesGuidFeaturesName for application/json ContentType.
type PatchV3SpacesGuidFeaturesNameJSONRequestBody = SpaceFeatureUpdate

// PatchV3SpacesGuidRelationshipsIsolationSegmentJSONRequestBody defines body for PatchV3SpacesGuidRelationshipsIsolationSegment for application/json ContentType.
type PatchV3SpacesGuidRelationshipsIsolationSegmentJSONRequestBody PatchV3SpacesGuidRelationshipsIsolationSegmentJSONBody

// PostV3StacksJSONRequestBody defines body for PostV3Stacks for application/json ContentType.
type PostV3StacksJSONRequestBody PostV3StacksJSONBody

// PatchV3StacksGuidJSONRequestBody defines body for PatchV3StacksGuid for application/json ContentType.
type PatchV3StacksGuidJSONRequestBody PatchV3StacksGuidJSONBody

// PatchV3TasksGuidJSONRequestBody defines body for PatchV3TasksGuid for application/json ContentType.
type PatchV3TasksGuidJSONRequestBody PatchV3TasksGuidJSONBody

// PostV3UsersJSONRequestBody defines body for PostV3Users for application/json ContentType.
type PostV3UsersJSONRequestBody PostV3UsersJSONBody

// PatchV3UsersGuidJSONRequestBody defines body for PatchV3UsersGuid for application/json ContentType.
type PatchV3UsersGuidJSONRequestBody PatchV3UsersGuidJSONBody

// AsRoleCreateRelationshipsUserData0 returns the union data inside the RoleCreate_Relationships_User_Data as a RoleCreateRelationshipsUserData0
func (t RoleCreate_Relationships_User_Data) AsRoleCreateRelationshipsUserData0() (RoleCreateRelationshipsUserData0, error) {
	var body RoleCreateRelationshipsUserData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoleCreateRelationshipsUserData0 overwrites any union data inside the RoleCreate_Relationships_User_Data as the provided RoleCreateRelationshipsUserData0
func (t *RoleCreate_Relationships_User_Data) FromRoleCreateRelationshipsUserData0(v RoleCreateRelationshipsUserData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoleCreateRelationshipsUserData0 performs a merge with any union data inside the RoleCreate_Relationships_User_Data, using the provided RoleCreateRelationshipsUserData0
func (t *RoleCreate_Relationships_User_Data) MergeRoleCreateRelationshipsUserData0(v RoleCreateRelationshipsUserData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRoleCreateRelationshipsUserData1 returns the union data inside the RoleCreate_Relationships_User_Data as a RoleCreateRelationshipsUserData1
func (t RoleCreate_Relationships_User_Data) AsRoleCreateRelationshipsUserData1() (RoleCreateRelationshipsUserData1, error) {
	var body RoleCreateRelationshipsUserData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoleCreateRelationshipsUserData1 overwrites any union data inside the RoleCreate_Relationships_User_Data as the provided RoleCreateRelationshipsUserData1
func (t *RoleCreate_Relationships_User_Data) FromRoleCreateRelationshipsUserData1(v RoleCreateRelationshipsUserData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoleCreateRelationshipsUserData1 performs a merge with any union data inside the RoleCreate_Relationships_User_Data, using the provided RoleCreateRelationshipsUserData1
func (t *RoleCreate_Relationships_User_Data) MergeRoleCreateRelationshipsUserData1(v RoleCreateRelationshipsUserData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RoleCreate_Relationships_User_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RoleCreate_Relationships_User_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3 request
	GetV3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3AdminActionsClearBuildpackCache request
	PostV3AdminActionsClearBuildpackCache(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppUsageEvents request
	GetV3AppUsageEvents(ctx context.Context, params *GetV3AppUsageEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseed request
	PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppUsageEventsGuid request
	GetV3AppUsageEventsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApps request
	ListApps(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAppWithBody request with any body
	CreateAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApp(ctx context.Context, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApp request
	DeleteApp(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApp request
	GetApp(ctx context.Context, guid openapi_types.UUID, params *GetAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAppWithBody request with any body
	UpdateAppWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApp(ctx context.Context, guid openapi_types.UUID, body UpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3AppsGuidActionsApplyManifestWithBody request with any body
	PostV3AppsGuidActionsApplyManifestWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClearAppBuildpackCache request
	ClearAppBuildpackCache(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartApp request
	RestartApp(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartApp request
	StartApp(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopApp request
	StopApp(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidBuilds request
	GetV3AppsGuidBuilds(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidBuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidDroplets request
	GetV3AppsGuidDroplets(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidDropletsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppEnvironmentVariables request
	GetAppEnvironmentVariables(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAppEnvironmentVariablesWithBody request with any body
	UpdateAppEnvironmentVariablesWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAppEnvironmentVariables(ctx context.Context, guid openapi_types.UUID, body UpdateAppEnvironmentVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidFeatures request
	GetV3AppsGuidFeatures(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidFeaturesName request
	GetV3AppsGuidFeaturesName(ctx context.Context, guid openapi_types.UUID, name GetV3AppsGuidFeaturesNameParamsName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3AppsGuidFeaturesNameWithBody request with any body
	PatchV3AppsGuidFeaturesNameWithBody(ctx context.Context, guid openapi_types.UUID, name PatchV3AppsGuidFeaturesNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3AppsGuidFeaturesName(ctx context.Context, guid openapi_types.UUID, name PatchV3AppsGuidFeaturesNameParamsName, body PatchV3AppsGuidFeaturesNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidManifest request
	GetV3AppsGuidManifest(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3AppsGuidManifestDiffWithBody request with any body
	PostV3AppsGuidManifestDiffWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidPackages request
	GetV3AppsGuidPackages(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppPermissions request
	GetAppPermissions(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidProcesses request
	GetV3AppsGuidProcesses(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidProcessesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidProcessesType request
	GetV3AppsGuidProcessesType(ctx context.Context, guid openapi_types.UUID, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidRelationshipsCurrentDroplet request
	GetV3AppsGuidRelationshipsCurrentDroplet(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3AppsGuidRelationshipsCurrentDropletWithBody request with any body
	PatchV3AppsGuidRelationshipsCurrentDropletWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3AppsGuidRelationshipsCurrentDroplet(ctx context.Context, guid openapi_types.UUID, body PatchV3AppsGuidRelationshipsCurrentDropletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidRevisions request
	GetV3AppsGuidRevisions(ctx context.Context, guid string, params *GetV3AppsGuidRevisionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidRevisionsDeployed request
	GetV3AppsGuidRevisionsDeployed(ctx context.Context, guid string, params *GetV3AppsGuidRevisionsDeployedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AppsGuidSidecars request
	GetV3AppsGuidSidecars(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidSidecarsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3AppsGuidSidecarsWithBody request with any body
	PostV3AppsGuidSidecarsWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3AppsGuidSidecars(ctx context.Context, guid openapi_types.UUID, body PostV3AppsGuidSidecarsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppSshEnabled request
	GetAppSshEnabled(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3AppsGuidTasksWithBody request with any body
	PostV3AppsGuidTasksWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3AppsGuidTasks(ctx context.Context, guid string, body PostV3AppsGuidTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AuditEvents request
	GetV3AuditEvents(ctx context.Context, params *GetV3AuditEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3AuditEventsGuid request
	GetV3AuditEventsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Buildpacks request
	GetV3Buildpacks(ctx context.Context, params *GetV3BuildpacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3BuildpacksWithBody request with any body
	PostV3BuildpacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3Buildpacks(ctx context.Context, body PostV3BuildpacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3BuildpacksGuid request
	DeleteV3BuildpacksGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3BuildpacksGuid request
	GetV3BuildpacksGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3BuildpacksGuidWithBody request with any body
	PatchV3BuildpacksGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3BuildpacksGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3BuildpacksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3BuildpacksGuidUploadWithBody request with any body
	PostV3BuildpacksGuidUploadWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3BuildpacksGuidUpload(ctx context.Context, guid openapi_types.UUID, body PostV3BuildpacksGuidUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Builds request
	GetV3Builds(ctx context.Context, params *GetV3BuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3BuildsWithBody request with any body
	PostV3BuildsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3Builds(ctx context.Context, body PostV3BuildsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3BuildsGuid request
	GetV3BuildsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3BuildsGuidWithBody request with any body
	PatchV3BuildsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3BuildsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3BuildsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Deployments request
	GetV3Deployments(ctx context.Context, params *GetV3DeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3DeploymentsWithBody request with any body
	PostV3DeploymentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3Deployments(ctx context.Context, body PostV3DeploymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3DeploymentsGuid request
	GetV3DeploymentsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3DeploymentsGuidWithBody request with any body
	PatchV3DeploymentsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3DeploymentsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3DeploymentsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3DeploymentsGuidActionsCancel request
	PostV3DeploymentsGuidActionsCancel(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3DeploymentsGuidActionsContinue request
	PostV3DeploymentsGuidActionsContinue(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Domains request
	GetV3Domains(ctx context.Context, params *GetV3DomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3DomainsWithBody request with any body
	PostV3DomainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3Domains(ctx context.Context, body PostV3DomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3DomainsGuid request
	DeleteV3DomainsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3DomainsGuid request
	GetV3DomainsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3DomainsGuidWithBody request with any body
	PatchV3DomainsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3DomainsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3DomainsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3DomainsGuidRelationshipsSharedOrganizationsWithBody request with any body
	PostV3DomainsGuidRelationshipsSharedOrganizationsWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3DomainsGuidRelationshipsSharedOrganizations(ctx context.Context, guid openapi_types.UUID, body PostV3DomainsGuidRelationshipsSharedOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuid request
	DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuid(ctx context.Context, guid openapi_types.UUID, orgGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Droplets request
	GetV3Droplets(ctx context.Context, params *GetV3DropletsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3DropletsWithBody request with any body
	PostV3DropletsWithBody(ctx context.Context, params *PostV3DropletsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3Droplets(ctx context.Context, params *PostV3DropletsParams, body PostV3DropletsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3DropletsGuid request
	DeleteV3DropletsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3DropletsGuid request
	GetV3DropletsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3DropletsGuidWithBody request with any body
	PatchV3DropletsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3DropletsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3DropletsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3EnvironmentVariableGroupsName request
	GetV3EnvironmentVariableGroupsName(ctx context.Context, name GetV3EnvironmentVariableGroupsNameParamsName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3EnvironmentVariableGroupsNameWithBody request with any body
	PatchV3EnvironmentVariableGroupsNameWithBody(ctx context.Context, name PatchV3EnvironmentVariableGroupsNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3EnvironmentVariableGroupsName(ctx context.Context, name PatchV3EnvironmentVariableGroupsNameParamsName, body PatchV3EnvironmentVariableGroupsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3FeatureFlags request
	GetV3FeatureFlags(ctx context.Context, params *GetV3FeatureFlagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3FeatureFlagsName request
	GetV3FeatureFlagsName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3FeatureFlagsNameWithBody request with any body
	PatchV3FeatureFlagsNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3FeatureFlagsName(ctx context.Context, name string, body PatchV3FeatureFlagsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Info request
	GetV3Info(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3InfoUsageSummary request
	GetV3InfoUsageSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3IsolationSegments request
	GetV3IsolationSegments(ctx context.Context, params *GetV3IsolationSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3IsolationSegmentsWithBody request with any body
	PostV3IsolationSegmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3IsolationSegments(ctx context.Context, body PostV3IsolationSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3IsolationSegmentsGuid request
	DeleteV3IsolationSegmentsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3IsolationSegmentsGuid request
	GetV3IsolationSegmentsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3IsolationSegmentsGuidWithBody request with any body
	PatchV3IsolationSegmentsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3IsolationSegmentsGuid(ctx context.Context, guid string, body PatchV3IsolationSegmentsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3IsolationSegmentsGuidRelationshipsOrganizations request
	GetV3IsolationSegmentsGuidRelationshipsOrganizations(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3IsolationSegmentsGuidRelationshipsOrganizationsWithBody request with any body
	PostV3IsolationSegmentsGuidRelationshipsOrganizationsWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3IsolationSegmentsGuidRelationshipsOrganizations(ctx context.Context, guid string, body PostV3IsolationSegmentsGuidRelationshipsOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuid request
	DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuid(ctx context.Context, guid string, orgGuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3IsolationSegmentsGuidRelationshipsSpaces request
	GetV3IsolationSegmentsGuidRelationshipsSpaces(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Jobs request
	GetV3Jobs(ctx context.Context, params *GetV3JobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3JobsGuid request
	GetV3JobsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationQuotas request
	ListOrganizationQuotas(ctx context.Context, params *ListOrganizationQuotasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationQuotaWithBody request with any body
	CreateOrganizationQuotaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationQuota(ctx context.Context, body CreateOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationQuota request
	DeleteOrganizationQuota(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationQuota request
	GetOrganizationQuota(ctx context.Context, guid openapi_types.UUID, params *GetOrganizationQuotaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationQuotaWithBody request with any body
	UpdateOrganizationQuotaWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationQuota(ctx context.Context, guid openapi_types.UUID, body UpdateOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplyOrganizationQuotaToOrganizationsWithBody request with any body
	ApplyOrganizationQuotaToOrganizationsWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplyOrganizationQuotaToOrganizations(ctx context.Context, guid openapi_types.UUID, body ApplyOrganizationQuotaToOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizations request
	ListOrganizations(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationWithBody request with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganization request
	DeleteOrganization(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationWithBody request with any body
	UpdateOrganizationWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganization(ctx context.Context, guid string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultDomain request
	GetDefaultDomain(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultIsolationSegment request
	GetDefaultIsolationSegment(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignDefaultIsolationSegmentWithBody request with any body
	AssignDefaultIsolationSegmentWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignDefaultIsolationSegment(ctx context.Context, guid string, body AssignDefaultIsolationSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsageSummary request
	GetUsageSummary(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsersForOrganization request
	ListUsersForOrganization(ctx context.Context, guid string, params *ListUsersForOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Packages request
	GetV3Packages(ctx context.Context, params *GetV3PackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3PackagesWithBody request with any body
	PostV3PackagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3Packages(ctx context.Context, body PostV3PackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3PackagesGuid request
	DeleteV3PackagesGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3PackagesGuid request
	GetV3PackagesGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3PackagesGuidWithBody request with any body
	PatchV3PackagesGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3PackagesGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3PackagesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3PackagesGuidCopyWithBody request with any body
	PostV3PackagesGuidCopyWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3PackagesGuidCopy(ctx context.Context, guid openapi_types.UUID, body PostV3PackagesGuidCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3PackagesGuidDownload request
	GetV3PackagesGuidDownload(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3PackagesGuidDroplets request
	GetV3PackagesGuidDroplets(ctx context.Context, guid openapi_types.UUID, params *GetV3PackagesGuidDropletsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3PackagesGuidUploadWithBody request with any body
	PostV3PackagesGuidUploadWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Processes request
	GetV3Processes(ctx context.Context, params *GetV3ProcessesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ProcessesGuid request
	GetV3ProcessesGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3ProcessesGuidWithBody request with any body
	PatchV3ProcessesGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3ProcessesGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3ProcessesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3ProcessesGuidActionsScaleWithBody request with any body
	PostV3ProcessesGuidActionsScaleWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3ProcessesGuidActionsScale(ctx context.Context, guid openapi_types.UUID, body PostV3ProcessesGuidActionsScaleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3ProcessesGuidInstancesIndex request
	DeleteV3ProcessesGuidInstancesIndex(ctx context.Context, guid openapi_types.UUID, index int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ProcessesGuidSidecars request
	GetV3ProcessesGuidSidecars(ctx context.Context, guid openapi_types.UUID, params *GetV3ProcessesGuidSidecarsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ProcessesGuidStats request
	GetV3ProcessesGuidStats(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3ResourceMatchesWithBody request with any body
	PostV3ResourceMatchesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3ResourceMatches(ctx context.Context, body PostV3ResourceMatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3RevisionsGuid request
	GetV3RevisionsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3RevisionsGuidWithBody request with any body
	PatchV3RevisionsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3RevisionsGuid(ctx context.Context, guid string, body PatchV3RevisionsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3RevisionsGuidEnvironmentVariables request
	GetV3RevisionsGuidEnvironmentVariables(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Roles request
	GetV3Roles(ctx context.Context, params *GetV3RolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3RolesWithBody request with any body
	PostV3RolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3Roles(ctx context.Context, body PostV3RolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3RolesGuid request
	DeleteV3RolesGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3RolesGuid request
	GetV3RolesGuid(ctx context.Context, guid openapi_types.UUID, params *GetV3RolesGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Routes request
	GetV3Routes(ctx context.Context, params *GetV3RoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3RoutesWithBody request with any body
	PostV3RoutesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3Routes(ctx context.Context, body PostV3RoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3RoutesGuid request
	DeleteV3RoutesGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3RoutesGuid request
	GetV3RoutesGuid(ctx context.Context, guid openapi_types.UUID, params *GetV3RoutesGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3RoutesGuidWithBody request with any body
	PatchV3RoutesGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3RoutesGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3RoutesGuidDestinations request
	GetV3RoutesGuidDestinations(ctx context.Context, guid openapi_types.UUID, params *GetV3RoutesGuidDestinationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3RoutesGuidDestinationsWithBody request with any body
	PatchV3RoutesGuidDestinationsWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3RoutesGuidDestinations(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3RoutesGuidDestinationsWithBody request with any body
	PostV3RoutesGuidDestinationsWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3RoutesGuidDestinations(ctx context.Context, guid openapi_types.UUID, body PostV3RoutesGuidDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3RoutesGuidDestinationsDestinationGuid request
	DeleteV3RoutesGuidDestinationsDestinationGuid(ctx context.Context, guid openapi_types.UUID, destinationGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3RoutesGuidRelationshipsSharedSpaces request
	GetV3RoutesGuidRelationshipsSharedSpaces(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3RoutesGuidRelationshipsSpaceWithBody request with any body
	PatchV3RoutesGuidRelationshipsSpaceWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3RoutesGuidRelationshipsSpace(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidRelationshipsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3RoutesGuidTransferOwnerWithBody request with any body
	PostV3RoutesGuidTransferOwnerWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3RoutesGuidTransferOwner(ctx context.Context, guid openapi_types.UUID, body PostV3RoutesGuidTransferOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SecurityGroups request
	GetV3SecurityGroups(ctx context.Context, params *GetV3SecurityGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3SecurityGroupsWithBody request with any body
	PostV3SecurityGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3SecurityGroups(ctx context.Context, body PostV3SecurityGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3SecurityGroupsGuid request
	DeleteV3SecurityGroupsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SecurityGroupsGuid request
	GetV3SecurityGroupsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3SecurityGroupsGuidWithBody request with any body
	PatchV3SecurityGroupsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3SecurityGroupsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3SecurityGroupsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3SecurityGroupsGuidRelationshipsRunningSpacesWithBody request with any body
	PostV3SecurityGroupsGuidRelationshipsRunningSpacesWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3SecurityGroupsGuidRelationshipsRunningSpaces(ctx context.Context, guid openapi_types.UUID, body PostV3SecurityGroupsGuidRelationshipsRunningSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuid request
	DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuid(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3SecurityGroupsGuidRelationshipsStagingSpacesWithBody request with any body
	PostV3SecurityGroupsGuidRelationshipsStagingSpacesWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3SecurityGroupsGuidRelationshipsStagingSpaces(ctx context.Context, guid openapi_types.UUID, body PostV3SecurityGroupsGuidRelationshipsStagingSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuid request
	DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuid(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceBrokers request
	GetV3ServiceBrokers(ctx context.Context, params *GetV3ServiceBrokersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3ServiceBrokersWithBody request with any body
	PostV3ServiceBrokersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3ServiceBrokers(ctx context.Context, body PostV3ServiceBrokersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3ServiceBrokersGuid request
	DeleteV3ServiceBrokersGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceBrokersGuid request
	GetV3ServiceBrokersGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3ServiceBrokersGuidWithBody request with any body
	PatchV3ServiceBrokersGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3ServiceBrokersGuid(ctx context.Context, guid string, body PatchV3ServiceBrokersGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3ServiceBrokersGuidCatalog request
	PostV3ServiceBrokersGuidCatalog(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceBrokersGuidJobsSynchronization request
	GetV3ServiceBrokersGuidJobsSynchronization(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3ServiceCredentialBindingsWithBody request with any body
	PostV3ServiceCredentialBindingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3ServiceCredentialBindings(ctx context.Context, body PostV3ServiceCredentialBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3ServiceCredentialBindingsGuid request
	DeleteV3ServiceCredentialBindingsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceCredentialBindingsGuid request
	GetV3ServiceCredentialBindingsGuid(ctx context.Context, guid string, params *GetV3ServiceCredentialBindingsGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3ServiceCredentialBindingsGuidWithBody request with any body
	PatchV3ServiceCredentialBindingsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3ServiceCredentialBindingsGuid(ctx context.Context, guid string, body PatchV3ServiceCredentialBindingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceCredentialBindingsGuidDetails request
	GetV3ServiceCredentialBindingsGuidDetails(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceCredentialBindingsGuidParameters request
	GetV3ServiceCredentialBindingsGuidParameters(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceInstances request
	GetV3ServiceInstances(ctx context.Context, params *GetV3ServiceInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3ServiceInstancesGuid request
	DeleteV3ServiceInstancesGuid(ctx context.Context, guid string, params *DeleteV3ServiceInstancesGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3ServiceInstancesGuidWithBody request with any body
	PatchV3ServiceInstancesGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3ServiceInstancesGuid(ctx context.Context, guid string, body PatchV3ServiceInstancesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceInstancesGuidCredentials request
	GetV3ServiceInstancesGuidCredentials(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceInstancesGuidRelationshipsSharedSpaces request
	GetV3ServiceInstancesGuidRelationshipsSharedSpaces(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3ServiceInstancesGuidRelationshipsSharedSpacesWithBody request with any body
	PostV3ServiceInstancesGuidRelationshipsSharedSpacesWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3ServiceInstancesGuidRelationshipsSharedSpaces(ctx context.Context, guid string, body PostV3ServiceInstancesGuidRelationshipsSharedSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummary request
	GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummary(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuid request
	DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuid(ctx context.Context, guid string, spaceGuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceOfferings request
	GetV3ServiceOfferings(ctx context.Context, params *GetV3ServiceOfferingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3ServiceOfferingsWithBody request with any body
	PostV3ServiceOfferingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3ServiceOfferings(ctx context.Context, body PostV3ServiceOfferingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3ServiceOfferingsGuid request
	DeleteV3ServiceOfferingsGuid(ctx context.Context, guid string, params *DeleteV3ServiceOfferingsGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceOfferingsGuid request
	GetV3ServiceOfferingsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3ServiceOfferingsGuidWithBody request with any body
	PatchV3ServiceOfferingsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3ServiceOfferingsGuid(ctx context.Context, guid string, body PatchV3ServiceOfferingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServicePlans request
	GetV3ServicePlans(ctx context.Context, params *GetV3ServicePlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3ServicePlansWithBody request with any body
	PostV3ServicePlansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3ServicePlans(ctx context.Context, body PostV3ServicePlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3ServicePlansGuid request
	DeleteV3ServicePlansGuid(ctx context.Context, guid string, params *DeleteV3ServicePlansGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServicePlansGuid request
	GetV3ServicePlansGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3ServicePlansGuidWithBody request with any body
	PatchV3ServicePlansGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3ServicePlansGuid(ctx context.Context, guid string, body PatchV3ServicePlansGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServicePlansGuidVisibility request
	GetV3ServicePlansGuidVisibility(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3ServicePlansGuidVisibilityWithBody request with any body
	PatchV3ServicePlansGuidVisibilityWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3ServicePlansGuidVisibility(ctx context.Context, guid openapi_types.UUID, body PatchV3ServicePlansGuidVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3ServicePlansGuidVisibilityWithBody request with any body
	PostV3ServicePlansGuidVisibilityWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3ServicePlansGuidVisibility(ctx context.Context, guid openapi_types.UUID, body PostV3ServicePlansGuidVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3ServicePlansGuidVisibilityOrganizationGuid request
	DeleteV3ServicePlansGuidVisibilityOrganizationGuid(ctx context.Context, guid openapi_types.UUID, organizationGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceRouteBindings request
	GetV3ServiceRouteBindings(ctx context.Context, params *GetV3ServiceRouteBindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3ServiceRouteBindingsWithBody request with any body
	PostV3ServiceRouteBindingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3ServiceRouteBindings(ctx context.Context, body PostV3ServiceRouteBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3ServiceRouteBindingsGuid request
	DeleteV3ServiceRouteBindingsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceRouteBindingsGuid request
	GetV3ServiceRouteBindingsGuid(ctx context.Context, guid string, params *GetV3ServiceRouteBindingsGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3ServiceRouteBindingsGuidWithBody request with any body
	PatchV3ServiceRouteBindingsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3ServiceRouteBindingsGuid(ctx context.Context, guid string, body PatchV3ServiceRouteBindingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceRouteBindingsGuidParameters request
	GetV3ServiceRouteBindingsGuidParameters(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceUsageEvents request
	GetV3ServiceUsageEvents(ctx context.Context, params *GetV3ServiceUsageEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3ServiceUsageEvents request
	PostV3ServiceUsageEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3ServiceUsageEventsGuid request
	GetV3ServiceUsageEventsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3SidecarsGuid request
	DeleteV3SidecarsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SidecarsGuid request
	GetV3SidecarsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3SidecarsGuidWithBody request with any body
	PatchV3SidecarsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3SidecarsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3SidecarsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SidecarsGuidProcesses request
	GetV3SidecarsGuidProcesses(ctx context.Context, guid openapi_types.UUID, params *GetV3SidecarsGuidProcessesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SpaceQuotas request
	GetV3SpaceQuotas(ctx context.Context, params *GetV3SpaceQuotasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3SpaceQuotasWithBody request with any body
	PostV3SpaceQuotasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3SpaceQuotas(ctx context.Context, body PostV3SpaceQuotasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3SpaceQuotasGuid request
	DeleteV3SpaceQuotasGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SpaceQuotasGuid request
	GetV3SpaceQuotasGuid(ctx context.Context, guid openapi_types.UUID, params *GetV3SpaceQuotasGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3SpaceQuotasGuidWithBody request with any body
	PatchV3SpaceQuotasGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3SpaceQuotasGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3SpaceQuotasGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3SpaceQuotasGuidRelationshipsSpacesWithBody request with any body
	PostV3SpaceQuotasGuidRelationshipsSpacesWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3SpaceQuotasGuidRelationshipsSpaces(ctx context.Context, guid openapi_types.UUID, body PostV3SpaceQuotasGuidRelationshipsSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuid request
	DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuid(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Spaces request
	GetV3Spaces(ctx context.Context, params *GetV3SpacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3SpacesWithBody request with any body
	PostV3SpacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3Spaces(ctx context.Context, body PostV3SpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3SpacesGuid request
	DeleteV3SpacesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SpacesGuid request
	GetV3SpacesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3SpacesGuidWithBody request with any body
	PatchV3SpacesGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3SpacesGuid(ctx context.Context, guid string, body PatchV3SpacesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SpacesGuidFeatures request
	GetV3SpacesGuidFeatures(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SpacesGuidFeaturesName request
	GetV3SpacesGuidFeaturesName(ctx context.Context, guid openapi_types.UUID, name GetV3SpacesGuidFeaturesNameParamsName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3SpacesGuidFeaturesNameWithBody request with any body
	PatchV3SpacesGuidFeaturesNameWithBody(ctx context.Context, guid openapi_types.UUID, name PatchV3SpacesGuidFeaturesNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3SpacesGuidFeaturesName(ctx context.Context, guid openapi_types.UUID, name PatchV3SpacesGuidFeaturesNameParamsName, body PatchV3SpacesGuidFeaturesNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3SpacesGuidManifestWithBody request with any body
	PostV3SpacesGuidManifestWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3SpacesGuidManifestDiffWithBody request with any body
	PostV3SpacesGuidManifestDiffWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SpacesGuidRelationshipsIsolationSegment request
	GetV3SpacesGuidRelationshipsIsolationSegment(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3SpacesGuidRelationshipsIsolationSegmentWithBody request with any body
	PatchV3SpacesGuidRelationshipsIsolationSegmentWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3SpacesGuidRelationshipsIsolationSegment(ctx context.Context, guid string, body PatchV3SpacesGuidRelationshipsIsolationSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SpacesGuidRunningSecurityGroups request
	GetV3SpacesGuidRunningSecurityGroups(ctx context.Context, guid openapi_types.UUID, params *GetV3SpacesGuidRunningSecurityGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SpacesGuidStagingSecurityGroups request
	GetV3SpacesGuidStagingSecurityGroups(ctx context.Context, guid openapi_types.UUID, params *GetV3SpacesGuidStagingSecurityGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3SpacesGuidUsers request
	GetV3SpacesGuidUsers(ctx context.Context, guid string, params *GetV3SpacesGuidUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Stacks request
	GetV3Stacks(ctx context.Context, params *GetV3StacksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3StacksWithBody request with any body
	PostV3StacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3Stacks(ctx context.Context, body PostV3StacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3StacksGuid request
	DeleteV3StacksGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3StacksGuid request
	GetV3StacksGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3StacksGuidWithBody request with any body
	PatchV3StacksGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3StacksGuid(ctx context.Context, guid string, body PatchV3StacksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3StacksGuidApps request
	GetV3StacksGuidApps(ctx context.Context, guid string, params *GetV3StacksGuidAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Tasks request
	GetV3Tasks(ctx context.Context, params *GetV3TasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3TasksGuid request
	GetV3TasksGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3TasksGuidWithBody request with any body
	PatchV3TasksGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3TasksGuid(ctx context.Context, guid string, body PatchV3TasksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3TasksGuid request
	PostV3TasksGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3Users request
	GetV3Users(ctx context.Context, params *GetV3UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3UsersWithBody request with any body
	PostV3UsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3Users(ctx context.Context, body PostV3UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV3UsersGuid request
	DeleteV3UsersGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3UsersGuid request
	GetV3UsersGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV3UsersGuidWithBody request with any body
	PatchV3UsersGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV3UsersGuid(ctx context.Context, guid string, body PatchV3UsersGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3AdminActionsClearBuildpackCache(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3AdminActionsClearBuildpackCacheRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppUsageEvents(ctx context.Context, params *GetV3AppUsageEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppUsageEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppUsageEventsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppUsageEventsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApps(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApp(ctx context.Context, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApp(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApp(ctx context.Context, guid openapi_types.UUID, params *GetAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApp(ctx context.Context, guid openapi_types.UUID, body UpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3AppsGuidActionsApplyManifestWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3AppsGuidActionsApplyManifestRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClearAppBuildpackCache(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClearAppBuildpackCacheRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartApp(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartAppRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartApp(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartAppRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopApp(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopAppRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidBuilds(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidBuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidBuildsRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidDroplets(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidDropletsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidDropletsRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppEnvironmentVariables(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppEnvironmentVariablesRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppEnvironmentVariablesWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppEnvironmentVariablesRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppEnvironmentVariables(ctx context.Context, guid openapi_types.UUID, body UpdateAppEnvironmentVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppEnvironmentVariablesRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidFeatures(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidFeaturesRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidFeaturesName(ctx context.Context, guid openapi_types.UUID, name GetV3AppsGuidFeaturesNameParamsName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidFeaturesNameRequest(c.Server, guid, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3AppsGuidFeaturesNameWithBody(ctx context.Context, guid openapi_types.UUID, name PatchV3AppsGuidFeaturesNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3AppsGuidFeaturesNameRequestWithBody(c.Server, guid, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3AppsGuidFeaturesName(ctx context.Context, guid openapi_types.UUID, name PatchV3AppsGuidFeaturesNameParamsName, body PatchV3AppsGuidFeaturesNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3AppsGuidFeaturesNameRequest(c.Server, guid, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidManifest(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidManifestRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3AppsGuidManifestDiffWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3AppsGuidManifestDiffRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidPackages(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidPackagesRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppPermissions(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppPermissionsRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidProcesses(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidProcessesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidProcessesRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidProcessesType(ctx context.Context, guid openapi_types.UUID, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidProcessesTypeRequest(c.Server, guid, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidRelationshipsCurrentDroplet(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidRelationshipsCurrentDropletRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3AppsGuidRelationshipsCurrentDropletWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3AppsGuidRelationshipsCurrentDropletRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3AppsGuidRelationshipsCurrentDroplet(ctx context.Context, guid openapi_types.UUID, body PatchV3AppsGuidRelationshipsCurrentDropletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3AppsGuidRelationshipsCurrentDropletRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidRevisions(ctx context.Context, guid string, params *GetV3AppsGuidRevisionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidRevisionsRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidRevisionsDeployed(ctx context.Context, guid string, params *GetV3AppsGuidRevisionsDeployedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidRevisionsDeployedRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AppsGuidSidecars(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidSidecarsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AppsGuidSidecarsRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3AppsGuidSidecarsWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3AppsGuidSidecarsRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3AppsGuidSidecars(ctx context.Context, guid openapi_types.UUID, body PostV3AppsGuidSidecarsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3AppsGuidSidecarsRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppSshEnabled(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppSshEnabledRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3AppsGuidTasksWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3AppsGuidTasksRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3AppsGuidTasks(ctx context.Context, guid string, body PostV3AppsGuidTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3AppsGuidTasksRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AuditEvents(ctx context.Context, params *GetV3AuditEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AuditEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3AuditEventsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3AuditEventsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Buildpacks(ctx context.Context, params *GetV3BuildpacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3BuildpacksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3BuildpacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3BuildpacksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3Buildpacks(ctx context.Context, body PostV3BuildpacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3BuildpacksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3BuildpacksGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3BuildpacksGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3BuildpacksGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3BuildpacksGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3BuildpacksGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3BuildpacksGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3BuildpacksGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3BuildpacksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3BuildpacksGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3BuildpacksGuidUploadWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3BuildpacksGuidUploadRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3BuildpacksGuidUpload(ctx context.Context, guid openapi_types.UUID, body PostV3BuildpacksGuidUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3BuildpacksGuidUploadRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Builds(ctx context.Context, params *GetV3BuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3BuildsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3BuildsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3BuildsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3Builds(ctx context.Context, body PostV3BuildsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3BuildsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3BuildsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3BuildsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3BuildsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3BuildsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3BuildsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3BuildsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3BuildsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Deployments(ctx context.Context, params *GetV3DeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3DeploymentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3DeploymentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3DeploymentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3Deployments(ctx context.Context, body PostV3DeploymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3DeploymentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3DeploymentsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3DeploymentsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3DeploymentsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3DeploymentsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3DeploymentsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3DeploymentsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3DeploymentsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3DeploymentsGuidActionsCancel(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3DeploymentsGuidActionsCancelRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3DeploymentsGuidActionsContinue(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3DeploymentsGuidActionsContinueRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Domains(ctx context.Context, params *GetV3DomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3DomainsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3DomainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3DomainsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3Domains(ctx context.Context, body PostV3DomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3DomainsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3DomainsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3DomainsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3DomainsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3DomainsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3DomainsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3DomainsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3DomainsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3DomainsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3DomainsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3DomainsGuidRelationshipsSharedOrganizationsWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3DomainsGuidRelationshipsSharedOrganizationsRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3DomainsGuidRelationshipsSharedOrganizations(ctx context.Context, guid openapi_types.UUID, body PostV3DomainsGuidRelationshipsSharedOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3DomainsGuidRelationshipsSharedOrganizationsRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuid(ctx context.Context, guid openapi_types.UUID, orgGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidRequest(c.Server, guid, orgGuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Droplets(ctx context.Context, params *GetV3DropletsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3DropletsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3DropletsWithBody(ctx context.Context, params *PostV3DropletsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3DropletsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3Droplets(ctx context.Context, params *PostV3DropletsParams, body PostV3DropletsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3DropletsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3DropletsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3DropletsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3DropletsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3DropletsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3DropletsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3DropletsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3DropletsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3DropletsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3DropletsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3EnvironmentVariableGroupsName(ctx context.Context, name GetV3EnvironmentVariableGroupsNameParamsName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3EnvironmentVariableGroupsNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3EnvironmentVariableGroupsNameWithBody(ctx context.Context, name PatchV3EnvironmentVariableGroupsNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3EnvironmentVariableGroupsNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3EnvironmentVariableGroupsName(ctx context.Context, name PatchV3EnvironmentVariableGroupsNameParamsName, body PatchV3EnvironmentVariableGroupsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3EnvironmentVariableGroupsNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3FeatureFlags(ctx context.Context, params *GetV3FeatureFlagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3FeatureFlagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3FeatureFlagsName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3FeatureFlagsNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3FeatureFlagsNameWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3FeatureFlagsNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3FeatureFlagsName(ctx context.Context, name string, body PatchV3FeatureFlagsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3FeatureFlagsNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Info(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3InfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3InfoUsageSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3InfoUsageSummaryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3IsolationSegments(ctx context.Context, params *GetV3IsolationSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3IsolationSegmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3IsolationSegmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3IsolationSegmentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3IsolationSegments(ctx context.Context, body PostV3IsolationSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3IsolationSegmentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3IsolationSegmentsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3IsolationSegmentsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3IsolationSegmentsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3IsolationSegmentsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3IsolationSegmentsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3IsolationSegmentsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3IsolationSegmentsGuid(ctx context.Context, guid string, body PatchV3IsolationSegmentsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3IsolationSegmentsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3IsolationSegmentsGuidRelationshipsOrganizations(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3IsolationSegmentsGuidRelationshipsOrganizationsRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3IsolationSegmentsGuidRelationshipsOrganizationsWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3IsolationSegmentsGuidRelationshipsOrganizationsRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3IsolationSegmentsGuidRelationshipsOrganizations(ctx context.Context, guid string, body PostV3IsolationSegmentsGuidRelationshipsOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3IsolationSegmentsGuidRelationshipsOrganizationsRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuid(ctx context.Context, guid string, orgGuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidRequest(c.Server, guid, orgGuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3IsolationSegmentsGuidRelationshipsSpaces(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3IsolationSegmentsGuidRelationshipsSpacesRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Jobs(ctx context.Context, params *GetV3JobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3JobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3JobsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3JobsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationQuotas(ctx context.Context, params *ListOrganizationQuotasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationQuotasRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationQuotaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationQuotaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationQuota(ctx context.Context, body CreateOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationQuotaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationQuota(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationQuotaRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationQuota(ctx context.Context, guid openapi_types.UUID, params *GetOrganizationQuotaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationQuotaRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationQuotaWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationQuotaRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationQuota(ctx context.Context, guid openapi_types.UUID, body UpdateOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationQuotaRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyOrganizationQuotaToOrganizationsWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyOrganizationQuotaToOrganizationsRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyOrganizationQuotaToOrganizations(ctx context.Context, guid openapi_types.UUID, body ApplyOrganizationQuotaToOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyOrganizationQuotaToOrganizationsRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizations(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganization(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganization(ctx context.Context, guid string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultDomain(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultDomainRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultIsolationSegment(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultIsolationSegmentRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignDefaultIsolationSegmentWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignDefaultIsolationSegmentRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignDefaultIsolationSegment(ctx context.Context, guid string, body AssignDefaultIsolationSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignDefaultIsolationSegmentRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsageSummary(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsageSummaryRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsersForOrganization(ctx context.Context, guid string, params *ListUsersForOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersForOrganizationRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Packages(ctx context.Context, params *GetV3PackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3PackagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3PackagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3PackagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3Packages(ctx context.Context, body PostV3PackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3PackagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3PackagesGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3PackagesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3PackagesGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3PackagesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3PackagesGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3PackagesGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3PackagesGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3PackagesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3PackagesGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3PackagesGuidCopyWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3PackagesGuidCopyRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3PackagesGuidCopy(ctx context.Context, guid openapi_types.UUID, body PostV3PackagesGuidCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3PackagesGuidCopyRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3PackagesGuidDownload(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3PackagesGuidDownloadRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3PackagesGuidDroplets(ctx context.Context, guid openapi_types.UUID, params *GetV3PackagesGuidDropletsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3PackagesGuidDropletsRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3PackagesGuidUploadWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3PackagesGuidUploadRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Processes(ctx context.Context, params *GetV3ProcessesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ProcessesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ProcessesGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ProcessesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ProcessesGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ProcessesGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ProcessesGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3ProcessesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ProcessesGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ProcessesGuidActionsScaleWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ProcessesGuidActionsScaleRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ProcessesGuidActionsScale(ctx context.Context, guid openapi_types.UUID, body PostV3ProcessesGuidActionsScaleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ProcessesGuidActionsScaleRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3ProcessesGuidInstancesIndex(ctx context.Context, guid openapi_types.UUID, index int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3ProcessesGuidInstancesIndexRequest(c.Server, guid, index)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ProcessesGuidSidecars(ctx context.Context, guid openapi_types.UUID, params *GetV3ProcessesGuidSidecarsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ProcessesGuidSidecarsRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ProcessesGuidStats(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ProcessesGuidStatsRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ResourceMatchesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ResourceMatchesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ResourceMatches(ctx context.Context, body PostV3ResourceMatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ResourceMatchesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3RevisionsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3RevisionsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3RevisionsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3RevisionsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3RevisionsGuid(ctx context.Context, guid string, body PatchV3RevisionsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3RevisionsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3RevisionsGuidEnvironmentVariables(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3RevisionsGuidEnvironmentVariablesRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Roles(ctx context.Context, params *GetV3RolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3RolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3RolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3RolesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3Roles(ctx context.Context, body PostV3RolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3RolesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3RolesGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3RolesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3RolesGuid(ctx context.Context, guid openapi_types.UUID, params *GetV3RolesGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3RolesGuidRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Routes(ctx context.Context, params *GetV3RoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3RoutesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3RoutesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3RoutesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3Routes(ctx context.Context, body PostV3RoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3RoutesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3RoutesGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3RoutesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3RoutesGuid(ctx context.Context, guid openapi_types.UUID, params *GetV3RoutesGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3RoutesGuidRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3RoutesGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3RoutesGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3RoutesGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3RoutesGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3RoutesGuidDestinations(ctx context.Context, guid openapi_types.UUID, params *GetV3RoutesGuidDestinationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3RoutesGuidDestinationsRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3RoutesGuidDestinationsWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3RoutesGuidDestinationsRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3RoutesGuidDestinations(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3RoutesGuidDestinationsRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3RoutesGuidDestinationsWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3RoutesGuidDestinationsRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3RoutesGuidDestinations(ctx context.Context, guid openapi_types.UUID, body PostV3RoutesGuidDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3RoutesGuidDestinationsRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3RoutesGuidDestinationsDestinationGuid(ctx context.Context, guid openapi_types.UUID, destinationGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3RoutesGuidDestinationsDestinationGuidRequest(c.Server, guid, destinationGuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3RoutesGuidRelationshipsSharedSpaces(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3RoutesGuidRelationshipsSharedSpacesRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3RoutesGuidRelationshipsSpaceWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3RoutesGuidRelationshipsSpaceRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3RoutesGuidRelationshipsSpace(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidRelationshipsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3RoutesGuidRelationshipsSpaceRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3RoutesGuidTransferOwnerWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3RoutesGuidTransferOwnerRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3RoutesGuidTransferOwner(ctx context.Context, guid openapi_types.UUID, body PostV3RoutesGuidTransferOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3RoutesGuidTransferOwnerRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SecurityGroups(ctx context.Context, params *GetV3SecurityGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SecurityGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SecurityGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SecurityGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SecurityGroups(ctx context.Context, body PostV3SecurityGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SecurityGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3SecurityGroupsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3SecurityGroupsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SecurityGroupsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SecurityGroupsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SecurityGroupsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SecurityGroupsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SecurityGroupsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3SecurityGroupsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SecurityGroupsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SecurityGroupsGuidRelationshipsRunningSpacesWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SecurityGroupsGuidRelationshipsRunningSpacesRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SecurityGroupsGuidRelationshipsRunningSpaces(ctx context.Context, guid openapi_types.UUID, body PostV3SecurityGroupsGuidRelationshipsRunningSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SecurityGroupsGuidRelationshipsRunningSpacesRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuid(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidRequest(c.Server, guid, spaceGuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SecurityGroupsGuidRelationshipsStagingSpacesWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SecurityGroupsGuidRelationshipsStagingSpacesRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SecurityGroupsGuidRelationshipsStagingSpaces(ctx context.Context, guid openapi_types.UUID, body PostV3SecurityGroupsGuidRelationshipsStagingSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SecurityGroupsGuidRelationshipsStagingSpacesRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuid(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidRequest(c.Server, guid, spaceGuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceBrokers(ctx context.Context, params *GetV3ServiceBrokersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceBrokersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceBrokersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceBrokersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceBrokers(ctx context.Context, body PostV3ServiceBrokersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceBrokersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3ServiceBrokersGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3ServiceBrokersGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceBrokersGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceBrokersGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServiceBrokersGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServiceBrokersGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServiceBrokersGuid(ctx context.Context, guid string, body PatchV3ServiceBrokersGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServiceBrokersGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceBrokersGuidCatalog(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceBrokersGuidCatalogRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceBrokersGuidJobsSynchronization(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceBrokersGuidJobsSynchronizationRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceCredentialBindingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceCredentialBindingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceCredentialBindings(ctx context.Context, body PostV3ServiceCredentialBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceCredentialBindingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3ServiceCredentialBindingsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3ServiceCredentialBindingsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceCredentialBindingsGuid(ctx context.Context, guid string, params *GetV3ServiceCredentialBindingsGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceCredentialBindingsGuidRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServiceCredentialBindingsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServiceCredentialBindingsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServiceCredentialBindingsGuid(ctx context.Context, guid string, body PatchV3ServiceCredentialBindingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServiceCredentialBindingsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceCredentialBindingsGuidDetails(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceCredentialBindingsGuidDetailsRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceCredentialBindingsGuidParameters(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceCredentialBindingsGuidParametersRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceInstances(ctx context.Context, params *GetV3ServiceInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3ServiceInstancesGuid(ctx context.Context, guid string, params *DeleteV3ServiceInstancesGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3ServiceInstancesGuidRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServiceInstancesGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServiceInstancesGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServiceInstancesGuid(ctx context.Context, guid string, body PatchV3ServiceInstancesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServiceInstancesGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceInstancesGuidCredentials(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceInstancesGuidCredentialsRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceInstancesGuidRelationshipsSharedSpaces(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceInstancesGuidRelationshipsSharedSpacesRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceInstancesGuidRelationshipsSharedSpacesWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceInstancesGuidRelationshipsSharedSpacesRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceInstancesGuidRelationshipsSharedSpaces(ctx context.Context, guid string, body PostV3ServiceInstancesGuidRelationshipsSharedSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceInstancesGuidRelationshipsSharedSpacesRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummary(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuid(ctx context.Context, guid string, spaceGuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidRequest(c.Server, guid, spaceGuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceOfferings(ctx context.Context, params *GetV3ServiceOfferingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceOfferingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceOfferingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceOfferingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceOfferings(ctx context.Context, body PostV3ServiceOfferingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceOfferingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3ServiceOfferingsGuid(ctx context.Context, guid string, params *DeleteV3ServiceOfferingsGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3ServiceOfferingsGuidRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceOfferingsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceOfferingsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServiceOfferingsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServiceOfferingsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServiceOfferingsGuid(ctx context.Context, guid string, body PatchV3ServiceOfferingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServiceOfferingsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServicePlans(ctx context.Context, params *GetV3ServicePlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServicePlansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServicePlansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServicePlansRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServicePlans(ctx context.Context, body PostV3ServicePlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServicePlansRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3ServicePlansGuid(ctx context.Context, guid string, params *DeleteV3ServicePlansGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3ServicePlansGuidRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServicePlansGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServicePlansGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServicePlansGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServicePlansGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServicePlansGuid(ctx context.Context, guid string, body PatchV3ServicePlansGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServicePlansGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServicePlansGuidVisibility(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServicePlansGuidVisibilityRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServicePlansGuidVisibilityWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServicePlansGuidVisibilityRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServicePlansGuidVisibility(ctx context.Context, guid openapi_types.UUID, body PatchV3ServicePlansGuidVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServicePlansGuidVisibilityRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServicePlansGuidVisibilityWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServicePlansGuidVisibilityRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServicePlansGuidVisibility(ctx context.Context, guid openapi_types.UUID, body PostV3ServicePlansGuidVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServicePlansGuidVisibilityRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3ServicePlansGuidVisibilityOrganizationGuid(ctx context.Context, guid openapi_types.UUID, organizationGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3ServicePlansGuidVisibilityOrganizationGuidRequest(c.Server, guid, organizationGuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceRouteBindings(ctx context.Context, params *GetV3ServiceRouteBindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceRouteBindingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceRouteBindingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceRouteBindingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceRouteBindings(ctx context.Context, body PostV3ServiceRouteBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceRouteBindingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3ServiceRouteBindingsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3ServiceRouteBindingsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceRouteBindingsGuid(ctx context.Context, guid string, params *GetV3ServiceRouteBindingsGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceRouteBindingsGuidRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServiceRouteBindingsGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServiceRouteBindingsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3ServiceRouteBindingsGuid(ctx context.Context, guid string, body PatchV3ServiceRouteBindingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3ServiceRouteBindingsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceRouteBindingsGuidParameters(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceRouteBindingsGuidParametersRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceUsageEvents(ctx context.Context, params *GetV3ServiceUsageEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceUsageEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3ServiceUsageEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3ServiceUsageEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3ServiceUsageEventsGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3ServiceUsageEventsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3SidecarsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3SidecarsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SidecarsGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SidecarsGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SidecarsGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SidecarsGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SidecarsGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3SidecarsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SidecarsGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SidecarsGuidProcesses(ctx context.Context, guid openapi_types.UUID, params *GetV3SidecarsGuidProcessesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SidecarsGuidProcessesRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SpaceQuotas(ctx context.Context, params *GetV3SpaceQuotasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SpaceQuotasRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SpaceQuotasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SpaceQuotasRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SpaceQuotas(ctx context.Context, body PostV3SpaceQuotasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SpaceQuotasRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3SpaceQuotasGuid(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3SpaceQuotasGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SpaceQuotasGuid(ctx context.Context, guid openapi_types.UUID, params *GetV3SpaceQuotasGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SpaceQuotasGuidRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SpaceQuotasGuidWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SpaceQuotasGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SpaceQuotasGuid(ctx context.Context, guid openapi_types.UUID, body PatchV3SpaceQuotasGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SpaceQuotasGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SpaceQuotasGuidRelationshipsSpacesWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SpaceQuotasGuidRelationshipsSpacesRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SpaceQuotasGuidRelationshipsSpaces(ctx context.Context, guid openapi_types.UUID, body PostV3SpaceQuotasGuidRelationshipsSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SpaceQuotasGuidRelationshipsSpacesRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuid(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidRequest(c.Server, guid, spaceGuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Spaces(ctx context.Context, params *GetV3SpacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SpacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SpacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SpacesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3Spaces(ctx context.Context, body PostV3SpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SpacesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3SpacesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3SpacesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SpacesGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SpacesGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SpacesGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SpacesGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SpacesGuid(ctx context.Context, guid string, body PatchV3SpacesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SpacesGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SpacesGuidFeatures(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SpacesGuidFeaturesRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SpacesGuidFeaturesName(ctx context.Context, guid openapi_types.UUID, name GetV3SpacesGuidFeaturesNameParamsName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SpacesGuidFeaturesNameRequest(c.Server, guid, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SpacesGuidFeaturesNameWithBody(ctx context.Context, guid openapi_types.UUID, name PatchV3SpacesGuidFeaturesNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SpacesGuidFeaturesNameRequestWithBody(c.Server, guid, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SpacesGuidFeaturesName(ctx context.Context, guid openapi_types.UUID, name PatchV3SpacesGuidFeaturesNameParamsName, body PatchV3SpacesGuidFeaturesNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SpacesGuidFeaturesNameRequest(c.Server, guid, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SpacesGuidManifestWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SpacesGuidManifestRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3SpacesGuidManifestDiffWithBody(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3SpacesGuidManifestDiffRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SpacesGuidRelationshipsIsolationSegment(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SpacesGuidRelationshipsIsolationSegmentRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SpacesGuidRelationshipsIsolationSegmentWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SpacesGuidRelationshipsIsolationSegmentRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3SpacesGuidRelationshipsIsolationSegment(ctx context.Context, guid string, body PatchV3SpacesGuidRelationshipsIsolationSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3SpacesGuidRelationshipsIsolationSegmentRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SpacesGuidRunningSecurityGroups(ctx context.Context, guid openapi_types.UUID, params *GetV3SpacesGuidRunningSecurityGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SpacesGuidRunningSecurityGroupsRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SpacesGuidStagingSecurityGroups(ctx context.Context, guid openapi_types.UUID, params *GetV3SpacesGuidStagingSecurityGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SpacesGuidStagingSecurityGroupsRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3SpacesGuidUsers(ctx context.Context, guid string, params *GetV3SpacesGuidUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3SpacesGuidUsersRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Stacks(ctx context.Context, params *GetV3StacksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3StacksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3StacksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3StacksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3Stacks(ctx context.Context, body PostV3StacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3StacksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3StacksGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3StacksGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3StacksGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3StacksGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3StacksGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3StacksGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3StacksGuid(ctx context.Context, guid string, body PatchV3StacksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3StacksGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3StacksGuidApps(ctx context.Context, guid string, params *GetV3StacksGuidAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3StacksGuidAppsRequest(c.Server, guid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Tasks(ctx context.Context, params *GetV3TasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3TasksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3TasksGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3TasksGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3TasksGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3TasksGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3TasksGuid(ctx context.Context, guid string, body PatchV3TasksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3TasksGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3TasksGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3TasksGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3Users(ctx context.Context, params *GetV3UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3UsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3UsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3UsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3Users(ctx context.Context, body PostV3UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3UsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV3UsersGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV3UsersGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3UsersGuid(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3UsersGuidRequest(c.Server, guid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3UsersGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3UsersGuidRequestWithBody(c.Server, guid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV3UsersGuid(ctx context.Context, guid string, body PatchV3UsersGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV3UsersGuidRequest(c.Server, guid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3Request generates requests for GetV3
func NewGetV3Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3AdminActionsClearBuildpackCacheRequest generates requests for PostV3AdminActionsClearBuildpackCache
func NewPostV3AdminActionsClearBuildpackCacheRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/admin/actions/clear_buildpack_cache")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3AppUsageEventsRequest generates requests for GetV3AppUsageEvents
func NewGetV3AppUsageEventsRequest(server string, params *GetV3AppUsageEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/app_usage_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AfterGuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after_guid", runtime.ParamLocationQuery, *params.AfterGuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedRequest generates requests for PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseed
func NewPostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/app_usage_events/actions/destructively_purge_all_and_reseed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3AppUsageEventsGuidRequest generates requests for GetV3AppUsageEventsGuid
func NewGetV3AppUsageEventsGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/app_usage_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAppsRequest generates requests for ListApps
func NewListAppsRequest(server string, params *ListAppsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stacks != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stacks", runtime.ParamLocationQuery, *params.Stacks); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LifecycleType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifecycle_type", runtime.ParamLocationQuery, *params.LifecycleType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAppRequest calls the generic CreateApp builder with application/json body
func NewCreateAppRequest(server string, body CreateAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAppRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAppRequestWithBody generates requests for CreateApp with any type of body
func NewCreateAppRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAppRequest generates requests for DeleteApp
func NewDeleteAppRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppRequest generates requests for GetApp
func NewGetAppRequest(server string, guid openapi_types.UUID, params *GetAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAppRequest calls the generic UpdateApp builder with application/json body
func NewUpdateAppRequest(server string, guid openapi_types.UUID, body UpdateAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAppRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewUpdateAppRequestWithBody generates requests for UpdateApp with any type of body
func NewUpdateAppRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3AppsGuidActionsApplyManifestRequestWithBody generates requests for PostV3AppsGuidActionsApplyManifest with any type of body
func NewPostV3AppsGuidActionsApplyManifestRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/actions/apply_manifest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClearAppBuildpackCacheRequest generates requests for ClearAppBuildpackCache
func NewClearAppBuildpackCacheRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/actions/clear_buildpack_cache", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestartAppRequest generates requests for RestartApp
func NewRestartAppRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/actions/restart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartAppRequest generates requests for StartApp
func NewStartAppRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/actions/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopAppRequest generates requests for StopApp
func NewStopAppRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/actions/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3AppsGuidBuildsRequest generates requests for GetV3AppsGuidBuilds
func NewGetV3AppsGuidBuildsRequest(server string, guid openapi_types.UUID, params *GetV3AppsGuidBuildsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/builds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3AppsGuidDropletsRequest generates requests for GetV3AppsGuidDroplets
func NewGetV3AppsGuidDropletsRequest(server string, guid openapi_types.UUID, params *GetV3AppsGuidDropletsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/droplets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Current != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "current", runtime.ParamLocationQuery, *params.Current); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppEnvironmentVariablesRequest generates requests for GetAppEnvironmentVariables
func NewGetAppEnvironmentVariablesRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/environment_variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAppEnvironmentVariablesRequest calls the generic UpdateAppEnvironmentVariables builder with application/json body
func NewUpdateAppEnvironmentVariablesRequest(server string, guid openapi_types.UUID, body UpdateAppEnvironmentVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAppEnvironmentVariablesRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewUpdateAppEnvironmentVariablesRequestWithBody generates requests for UpdateAppEnvironmentVariables with any type of body
func NewUpdateAppEnvironmentVariablesRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/environment_variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3AppsGuidFeaturesRequest generates requests for GetV3AppsGuidFeatures
func NewGetV3AppsGuidFeaturesRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/features", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3AppsGuidFeaturesNameRequest generates requests for GetV3AppsGuidFeaturesName
func NewGetV3AppsGuidFeaturesNameRequest(server string, guid openapi_types.UUID, name GetV3AppsGuidFeaturesNameParamsName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/features/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3AppsGuidFeaturesNameRequest calls the generic PatchV3AppsGuidFeaturesName builder with application/json body
func NewPatchV3AppsGuidFeaturesNameRequest(server string, guid openapi_types.UUID, name PatchV3AppsGuidFeaturesNameParamsName, body PatchV3AppsGuidFeaturesNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3AppsGuidFeaturesNameRequestWithBody(server, guid, name, "application/json", bodyReader)
}

// NewPatchV3AppsGuidFeaturesNameRequestWithBody generates requests for PatchV3AppsGuidFeaturesName with any type of body
func NewPatchV3AppsGuidFeaturesNameRequestWithBody(server string, guid openapi_types.UUID, name PatchV3AppsGuidFeaturesNameParamsName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/features/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3AppsGuidManifestRequest generates requests for GetV3AppsGuidManifest
func NewGetV3AppsGuidManifestRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/manifest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3AppsGuidManifestDiffRequestWithBody generates requests for PostV3AppsGuidManifestDiff with any type of body
func NewPostV3AppsGuidManifestDiffRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/manifest_diff", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3AppsGuidPackagesRequest generates requests for GetV3AppsGuidPackages
func NewGetV3AppsGuidPackagesRequest(server string, guid openapi_types.UUID, params *GetV3AppsGuidPackagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/packages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Types != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppPermissionsRequest generates requests for GetAppPermissions
func NewGetAppPermissionsRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3AppsGuidProcessesRequest generates requests for GetV3AppsGuidProcesses
func NewGetV3AppsGuidProcessesRequest(server string, guid openapi_types.UUID, params *GetV3AppsGuidProcessesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/processes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Types != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3AppsGuidProcessesTypeRequest generates requests for GetV3AppsGuidProcessesType
func NewGetV3AppsGuidProcessesTypeRequest(server string, guid openapi_types.UUID, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/processes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3AppsGuidRelationshipsCurrentDropletRequest generates requests for GetV3AppsGuidRelationshipsCurrentDroplet
func NewGetV3AppsGuidRelationshipsCurrentDropletRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/relationships/current_droplet", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3AppsGuidRelationshipsCurrentDropletRequest calls the generic PatchV3AppsGuidRelationshipsCurrentDroplet builder with application/json body
func NewPatchV3AppsGuidRelationshipsCurrentDropletRequest(server string, guid openapi_types.UUID, body PatchV3AppsGuidRelationshipsCurrentDropletJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3AppsGuidRelationshipsCurrentDropletRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3AppsGuidRelationshipsCurrentDropletRequestWithBody generates requests for PatchV3AppsGuidRelationshipsCurrentDroplet with any type of body
func NewPatchV3AppsGuidRelationshipsCurrentDropletRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/relationships/current_droplet", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3AppsGuidRevisionsRequest generates requests for GetV3AppsGuidRevisions
func NewGetV3AppsGuidRevisionsRequest(server string, guid string, params *GetV3AppsGuidRevisionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/revisions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Versions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "versions", runtime.ParamLocationQuery, *params.Versions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3AppsGuidRevisionsDeployedRequest generates requests for GetV3AppsGuidRevisionsDeployed
func NewGetV3AppsGuidRevisionsDeployedRequest(server string, guid string, params *GetV3AppsGuidRevisionsDeployedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/revisions/deployed", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3AppsGuidSidecarsRequest generates requests for GetV3AppsGuidSidecars
func NewGetV3AppsGuidSidecarsRequest(server string, guid openapi_types.UUID, params *GetV3AppsGuidSidecarsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/sidecars", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3AppsGuidSidecarsRequest calls the generic PostV3AppsGuidSidecars builder with application/json body
func NewPostV3AppsGuidSidecarsRequest(server string, guid openapi_types.UUID, body PostV3AppsGuidSidecarsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3AppsGuidSidecarsRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3AppsGuidSidecarsRequestWithBody generates requests for PostV3AppsGuidSidecars with any type of body
func NewPostV3AppsGuidSidecarsRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/sidecars", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAppSshEnabledRequest generates requests for GetAppSshEnabled
func NewGetAppSshEnabledRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/ssh_enabled", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3AppsGuidTasksRequest calls the generic PostV3AppsGuidTasks builder with application/json body
func NewPostV3AppsGuidTasksRequest(server string, guid string, body PostV3AppsGuidTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3AppsGuidTasksRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3AppsGuidTasksRequestWithBody generates requests for PostV3AppsGuidTasks with any type of body
func NewPostV3AppsGuidTasksRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/apps/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3AuditEventsRequest generates requests for GetV3AuditEvents
func NewGetV3AuditEventsRequest(server string, params *GetV3AuditEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/audit_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Types != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_guids", runtime.ParamLocationQuery, *params.TargetGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3AuditEventsGuidRequest generates requests for GetV3AuditEventsGuid
func NewGetV3AuditEventsGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/audit_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3BuildpacksRequest generates requests for GetV3Buildpacks
func NewGetV3BuildpacksRequest(server string, params *GetV3BuildpacksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/buildpacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Stacks != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stacks", runtime.ParamLocationQuery, *params.Stacks); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3BuildpacksRequest calls the generic PostV3Buildpacks builder with application/json body
func NewPostV3BuildpacksRequest(server string, body PostV3BuildpacksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3BuildpacksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3BuildpacksRequestWithBody generates requests for PostV3Buildpacks with any type of body
func NewPostV3BuildpacksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/buildpacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3BuildpacksGuidRequest generates requests for DeleteV3BuildpacksGuid
func NewDeleteV3BuildpacksGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/buildpacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3BuildpacksGuidRequest generates requests for GetV3BuildpacksGuid
func NewGetV3BuildpacksGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/buildpacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3BuildpacksGuidRequest calls the generic PatchV3BuildpacksGuid builder with application/json body
func NewPatchV3BuildpacksGuidRequest(server string, guid openapi_types.UUID, body PatchV3BuildpacksGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3BuildpacksGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3BuildpacksGuidRequestWithBody generates requests for PatchV3BuildpacksGuid with any type of body
func NewPatchV3BuildpacksGuidRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/buildpacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3BuildpacksGuidUploadRequest calls the generic PostV3BuildpacksGuidUpload builder with application/json body
func NewPostV3BuildpacksGuidUploadRequest(server string, guid openapi_types.UUID, body PostV3BuildpacksGuidUploadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3BuildpacksGuidUploadRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3BuildpacksGuidUploadRequestWithBody generates requests for PostV3BuildpacksGuidUpload with any type of body
func NewPostV3BuildpacksGuidUploadRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/buildpacks/%s/upload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3BuildsRequest generates requests for GetV3Builds
func NewGetV3BuildsRequest(server string, params *GetV3BuildsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/builds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_guids", runtime.ParamLocationQuery, *params.AppGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_guids", runtime.ParamLocationQuery, *params.PackageGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3BuildsRequest calls the generic PostV3Builds builder with application/json body
func NewPostV3BuildsRequest(server string, body PostV3BuildsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3BuildsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3BuildsRequestWithBody generates requests for PostV3Builds with any type of body
func NewPostV3BuildsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/builds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3BuildsGuidRequest generates requests for GetV3BuildsGuid
func NewGetV3BuildsGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/builds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3BuildsGuidRequest calls the generic PatchV3BuildsGuid builder with application/json body
func NewPatchV3BuildsGuidRequest(server string, guid openapi_types.UUID, body PatchV3BuildsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3BuildsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3BuildsGuidRequestWithBody generates requests for PatchV3BuildsGuid with any type of body
func NewPatchV3BuildsGuidRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/builds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3DeploymentsRequest generates requests for GetV3Deployments
func NewGetV3DeploymentsRequest(server string, params *GetV3DeploymentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/deployments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_guids", runtime.ParamLocationQuery, *params.AppGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusReasons != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status_reasons", runtime.ParamLocationQuery, *params.StatusReasons); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusValues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status_values", runtime.ParamLocationQuery, *params.StatusValues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3DeploymentsRequest calls the generic PostV3Deployments builder with application/json body
func NewPostV3DeploymentsRequest(server string, body PostV3DeploymentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3DeploymentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3DeploymentsRequestWithBody generates requests for PostV3Deployments with any type of body
func NewPostV3DeploymentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/deployments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3DeploymentsGuidRequest generates requests for GetV3DeploymentsGuid
func NewGetV3DeploymentsGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/deployments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3DeploymentsGuidRequest calls the generic PatchV3DeploymentsGuid builder with application/json body
func NewPatchV3DeploymentsGuidRequest(server string, guid openapi_types.UUID, body PatchV3DeploymentsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3DeploymentsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3DeploymentsGuidRequestWithBody generates requests for PatchV3DeploymentsGuid with any type of body
func NewPatchV3DeploymentsGuidRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/deployments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3DeploymentsGuidActionsCancelRequest generates requests for PostV3DeploymentsGuidActionsCancel
func NewPostV3DeploymentsGuidActionsCancelRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/deployments/%s/actions/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3DeploymentsGuidActionsContinueRequest generates requests for PostV3DeploymentsGuidActionsContinue
func NewPostV3DeploymentsGuidActionsContinueRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/deployments/%s/actions/continue", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3DomainsRequest generates requests for GetV3Domains
func NewGetV3DomainsRequest(server string, params *GetV3DomainsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/domains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3DomainsRequest calls the generic PostV3Domains builder with application/json body
func NewPostV3DomainsRequest(server string, body PostV3DomainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3DomainsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3DomainsRequestWithBody generates requests for PostV3Domains with any type of body
func NewPostV3DomainsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/domains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3DomainsGuidRequest generates requests for DeleteV3DomainsGuid
func NewDeleteV3DomainsGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/domains/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3DomainsGuidRequest generates requests for GetV3DomainsGuid
func NewGetV3DomainsGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/domains/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3DomainsGuidRequest calls the generic PatchV3DomainsGuid builder with application/json body
func NewPatchV3DomainsGuidRequest(server string, guid openapi_types.UUID, body PatchV3DomainsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3DomainsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3DomainsGuidRequestWithBody generates requests for PatchV3DomainsGuid with any type of body
func NewPatchV3DomainsGuidRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/domains/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3DomainsGuidRelationshipsSharedOrganizationsRequest calls the generic PostV3DomainsGuidRelationshipsSharedOrganizations builder with application/json body
func NewPostV3DomainsGuidRelationshipsSharedOrganizationsRequest(server string, guid openapi_types.UUID, body PostV3DomainsGuidRelationshipsSharedOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3DomainsGuidRelationshipsSharedOrganizationsRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3DomainsGuidRelationshipsSharedOrganizationsRequestWithBody generates requests for PostV3DomainsGuidRelationshipsSharedOrganizations with any type of body
func NewPostV3DomainsGuidRelationshipsSharedOrganizationsRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/domains/%s/relationships/shared_organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidRequest generates requests for DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuid
func NewDeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidRequest(server string, guid openapi_types.UUID, orgGuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "org_guid", runtime.ParamLocationPath, orgGuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/domains/%s/relationships/shared_organizations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3DropletsRequest generates requests for GetV3Droplets
func NewGetV3DropletsRequest(server string, params *GetV3DropletsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/droplets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_guids", runtime.ParamLocationQuery, *params.AppGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3DropletsRequest calls the generic PostV3Droplets builder with application/json body
func NewPostV3DropletsRequest(server string, params *PostV3DropletsParams, body PostV3DropletsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3DropletsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV3DropletsRequestWithBody generates requests for PostV3Droplets with any type of body
func NewPostV3DropletsRequestWithBody(server string, params *PostV3DropletsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/droplets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SourceGuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_guid", runtime.ParamLocationQuery, *params.SourceGuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3DropletsGuidRequest generates requests for DeleteV3DropletsGuid
func NewDeleteV3DropletsGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/droplets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3DropletsGuidRequest generates requests for GetV3DropletsGuid
func NewGetV3DropletsGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/droplets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3DropletsGuidRequest calls the generic PatchV3DropletsGuid builder with application/json body
func NewPatchV3DropletsGuidRequest(server string, guid openapi_types.UUID, body PatchV3DropletsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3DropletsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3DropletsGuidRequestWithBody generates requests for PatchV3DropletsGuid with any type of body
func NewPatchV3DropletsGuidRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/droplets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3EnvironmentVariableGroupsNameRequest generates requests for GetV3EnvironmentVariableGroupsName
func NewGetV3EnvironmentVariableGroupsNameRequest(server string, name GetV3EnvironmentVariableGroupsNameParamsName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/environment_variable_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3EnvironmentVariableGroupsNameRequest calls the generic PatchV3EnvironmentVariableGroupsName builder with application/json body
func NewPatchV3EnvironmentVariableGroupsNameRequest(server string, name PatchV3EnvironmentVariableGroupsNameParamsName, body PatchV3EnvironmentVariableGroupsNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3EnvironmentVariableGroupsNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPatchV3EnvironmentVariableGroupsNameRequestWithBody generates requests for PatchV3EnvironmentVariableGroupsName with any type of body
func NewPatchV3EnvironmentVariableGroupsNameRequestWithBody(server string, name PatchV3EnvironmentVariableGroupsNameParamsName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/environment_variable_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3FeatureFlagsRequest generates requests for GetV3FeatureFlags
func NewGetV3FeatureFlagsRequest(server string, params *GetV3FeatureFlagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/feature_flags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3FeatureFlagsNameRequest generates requests for GetV3FeatureFlagsName
func NewGetV3FeatureFlagsNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/feature_flags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3FeatureFlagsNameRequest calls the generic PatchV3FeatureFlagsName builder with application/json body
func NewPatchV3FeatureFlagsNameRequest(server string, name string, body PatchV3FeatureFlagsNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3FeatureFlagsNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPatchV3FeatureFlagsNameRequestWithBody generates requests for PatchV3FeatureFlagsName with any type of body
func NewPatchV3FeatureFlagsNameRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/feature_flags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3InfoRequest generates requests for GetV3Info
func NewGetV3InfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3InfoUsageSummaryRequest generates requests for GetV3InfoUsageSummary
func NewGetV3InfoUsageSummaryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/info/usage_summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3IsolationSegmentsRequest generates requests for GetV3IsolationSegments
func NewGetV3IsolationSegmentsRequest(server string, params *GetV3IsolationSegmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/isolation_segments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3IsolationSegmentsRequest calls the generic PostV3IsolationSegments builder with application/json body
func NewPostV3IsolationSegmentsRequest(server string, body PostV3IsolationSegmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3IsolationSegmentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3IsolationSegmentsRequestWithBody generates requests for PostV3IsolationSegments with any type of body
func NewPostV3IsolationSegmentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/isolation_segments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3IsolationSegmentsGuidRequest generates requests for DeleteV3IsolationSegmentsGuid
func NewDeleteV3IsolationSegmentsGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/isolation_segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3IsolationSegmentsGuidRequest generates requests for GetV3IsolationSegmentsGuid
func NewGetV3IsolationSegmentsGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/isolation_segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3IsolationSegmentsGuidRequest calls the generic PatchV3IsolationSegmentsGuid builder with application/json body
func NewPatchV3IsolationSegmentsGuidRequest(server string, guid string, body PatchV3IsolationSegmentsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3IsolationSegmentsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3IsolationSegmentsGuidRequestWithBody generates requests for PatchV3IsolationSegmentsGuid with any type of body
func NewPatchV3IsolationSegmentsGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/isolation_segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3IsolationSegmentsGuidRelationshipsOrganizationsRequest generates requests for GetV3IsolationSegmentsGuidRelationshipsOrganizations
func NewGetV3IsolationSegmentsGuidRelationshipsOrganizationsRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/isolation_segments/%s/relationships/organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3IsolationSegmentsGuidRelationshipsOrganizationsRequest calls the generic PostV3IsolationSegmentsGuidRelationshipsOrganizations builder with application/json body
func NewPostV3IsolationSegmentsGuidRelationshipsOrganizationsRequest(server string, guid string, body PostV3IsolationSegmentsGuidRelationshipsOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3IsolationSegmentsGuidRelationshipsOrganizationsRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3IsolationSegmentsGuidRelationshipsOrganizationsRequestWithBody generates requests for PostV3IsolationSegmentsGuidRelationshipsOrganizations with any type of body
func NewPostV3IsolationSegmentsGuidRelationshipsOrganizationsRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/isolation_segments/%s/relationships/organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidRequest generates requests for DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuid
func NewDeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidRequest(server string, guid string, orgGuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "org_guid", runtime.ParamLocationPath, orgGuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/isolation_segments/%s/relationships/organizations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3IsolationSegmentsGuidRelationshipsSpacesRequest generates requests for GetV3IsolationSegmentsGuidRelationshipsSpaces
func NewGetV3IsolationSegmentsGuidRelationshipsSpacesRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/isolation_segments/%s/relationships/spaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3JobsRequest generates requests for GetV3Jobs
func NewGetV3JobsRequest(server string, params *GetV3JobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3JobsGuidRequest generates requests for GetV3JobsGuid
func NewGetV3JobsGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationQuotasRequest generates requests for ListOrganizationQuotas
func NewListOrganizationQuotasRequest(server string, params *ListOrganizationQuotasParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organization_quotas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationQuotaRequest calls the generic CreateOrganizationQuota builder with application/json body
func NewCreateOrganizationQuotaRequest(server string, body CreateOrganizationQuotaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationQuotaRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationQuotaRequestWithBody generates requests for CreateOrganizationQuota with any type of body
func NewCreateOrganizationQuotaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organization_quotas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationQuotaRequest generates requests for DeleteOrganizationQuota
func NewDeleteOrganizationQuotaRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organization_quotas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationQuotaRequest generates requests for GetOrganizationQuota
func NewGetOrganizationQuotaRequest(server string, guid openapi_types.UUID, params *GetOrganizationQuotaParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organization_quotas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationQuotaRequest calls the generic UpdateOrganizationQuota builder with application/json body
func NewUpdateOrganizationQuotaRequest(server string, guid openapi_types.UUID, body UpdateOrganizationQuotaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationQuotaRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewUpdateOrganizationQuotaRequestWithBody generates requests for UpdateOrganizationQuota with any type of body
func NewUpdateOrganizationQuotaRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organization_quotas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplyOrganizationQuotaToOrganizationsRequest calls the generic ApplyOrganizationQuotaToOrganizations builder with application/json body
func NewApplyOrganizationQuotaToOrganizationsRequest(server string, guid openapi_types.UUID, body ApplyOrganizationQuotaToOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplyOrganizationQuotaToOrganizationsRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewApplyOrganizationQuotaToOrganizationsRequestWithBody generates requests for ApplyOrganizationQuotaToOrganizations with any type of body
func NewApplyOrganizationQuotaToOrganizationsRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organization_quotas/%s/relationships/organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganizationsRequest generates requests for ListOrganizations
func NewListOrganizationsRequest(server string, params *ListOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationRequest generates requests for DeleteOrganization
func NewDeleteOrganizationRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationRequest calls the generic UpdateOrganization builder with application/json body
func NewUpdateOrganizationRequest(server string, guid string, body UpdateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewUpdateOrganizationRequestWithBody generates requests for UpdateOrganization with any type of body
func NewUpdateOrganizationRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDefaultDomainRequest generates requests for GetDefaultDomain
func NewGetDefaultDomainRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/domains/default", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDefaultIsolationSegmentRequest generates requests for GetDefaultIsolationSegment
func NewGetDefaultIsolationSegmentRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/relationships/default_isolation_segment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignDefaultIsolationSegmentRequest calls the generic AssignDefaultIsolationSegment builder with application/json body
func NewAssignDefaultIsolationSegmentRequest(server string, guid string, body AssignDefaultIsolationSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignDefaultIsolationSegmentRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewAssignDefaultIsolationSegmentRequestWithBody generates requests for AssignDefaultIsolationSegment with any type of body
func NewAssignDefaultIsolationSegmentRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/relationships/default_isolation_segment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsageSummaryRequest generates requests for GetUsageSummary
func NewGetUsageSummaryRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/usage_summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsersForOrganizationRequest generates requests for ListUsersForOrganization
func NewListUsersForOrganizationRequest(server string, guid string, params *ListUsersForOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Usernames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "usernames", runtime.ParamLocationQuery, *params.Usernames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartialUsernames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "partial_usernames", runtime.ParamLocationQuery, *params.PartialUsernames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Origins != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "origins", runtime.ParamLocationQuery, *params.Origins); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3PackagesRequest generates requests for GetV3Packages
func NewGetV3PackagesRequest(server string, params *GetV3PackagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/packages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Types != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_guids", runtime.ParamLocationQuery, *params.AppGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3PackagesRequest calls the generic PostV3Packages builder with application/json body
func NewPostV3PackagesRequest(server string, body PostV3PackagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3PackagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3PackagesRequestWithBody generates requests for PostV3Packages with any type of body
func NewPostV3PackagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/packages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3PackagesGuidRequest generates requests for DeleteV3PackagesGuid
func NewDeleteV3PackagesGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/packages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3PackagesGuidRequest generates requests for GetV3PackagesGuid
func NewGetV3PackagesGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/packages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3PackagesGuidRequest calls the generic PatchV3PackagesGuid builder with application/json body
func NewPatchV3PackagesGuidRequest(server string, guid openapi_types.UUID, body PatchV3PackagesGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3PackagesGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3PackagesGuidRequestWithBody generates requests for PatchV3PackagesGuid with any type of body
func NewPatchV3PackagesGuidRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/packages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3PackagesGuidCopyRequest calls the generic PostV3PackagesGuidCopy builder with application/json body
func NewPostV3PackagesGuidCopyRequest(server string, guid openapi_types.UUID, body PostV3PackagesGuidCopyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3PackagesGuidCopyRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3PackagesGuidCopyRequestWithBody generates requests for PostV3PackagesGuidCopy with any type of body
func NewPostV3PackagesGuidCopyRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/packages/%s/copy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3PackagesGuidDownloadRequest generates requests for GetV3PackagesGuidDownload
func NewGetV3PackagesGuidDownloadRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/packages/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3PackagesGuidDropletsRequest generates requests for GetV3PackagesGuidDroplets
func NewGetV3PackagesGuidDropletsRequest(server string, guid openapi_types.UUID, params *GetV3PackagesGuidDropletsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/packages/%s/droplets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3PackagesGuidUploadRequestWithBody generates requests for PostV3PackagesGuidUpload with any type of body
func NewPostV3PackagesGuidUploadRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/packages/%s/upload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3ProcessesRequest generates requests for GetV3Processes
func NewGetV3ProcessesRequest(server string, params *GetV3ProcessesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/processes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Types != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_guids", runtime.ParamLocationQuery, *params.AppGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ProcessesGuidRequest generates requests for GetV3ProcessesGuid
func NewGetV3ProcessesGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/processes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3ProcessesGuidRequest calls the generic PatchV3ProcessesGuid builder with application/json body
func NewPatchV3ProcessesGuidRequest(server string, guid openapi_types.UUID, body PatchV3ProcessesGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3ProcessesGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3ProcessesGuidRequestWithBody generates requests for PatchV3ProcessesGuid with any type of body
func NewPatchV3ProcessesGuidRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/processes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3ProcessesGuidActionsScaleRequest calls the generic PostV3ProcessesGuidActionsScale builder with application/json body
func NewPostV3ProcessesGuidActionsScaleRequest(server string, guid openapi_types.UUID, body PostV3ProcessesGuidActionsScaleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3ProcessesGuidActionsScaleRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3ProcessesGuidActionsScaleRequestWithBody generates requests for PostV3ProcessesGuidActionsScale with any type of body
func NewPostV3ProcessesGuidActionsScaleRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/processes/%s/actions/scale", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3ProcessesGuidInstancesIndexRequest generates requests for DeleteV3ProcessesGuidInstancesIndex
func NewDeleteV3ProcessesGuidInstancesIndexRequest(server string, guid openapi_types.UUID, index int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/processes/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ProcessesGuidSidecarsRequest generates requests for GetV3ProcessesGuidSidecars
func NewGetV3ProcessesGuidSidecarsRequest(server string, guid openapi_types.UUID, params *GetV3ProcessesGuidSidecarsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/processes/%s/sidecars", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ProcessesGuidStatsRequest generates requests for GetV3ProcessesGuidStats
func NewGetV3ProcessesGuidStatsRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/processes/%s/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3ResourceMatchesRequest calls the generic PostV3ResourceMatches builder with application/json body
func NewPostV3ResourceMatchesRequest(server string, body PostV3ResourceMatchesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3ResourceMatchesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3ResourceMatchesRequestWithBody generates requests for PostV3ResourceMatches with any type of body
func NewPostV3ResourceMatchesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/resource_matches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3RevisionsGuidRequest generates requests for GetV3RevisionsGuid
func NewGetV3RevisionsGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/revisions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3RevisionsGuidRequest calls the generic PatchV3RevisionsGuid builder with application/json body
func NewPatchV3RevisionsGuidRequest(server string, guid string, body PatchV3RevisionsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3RevisionsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3RevisionsGuidRequestWithBody generates requests for PatchV3RevisionsGuid with any type of body
func NewPatchV3RevisionsGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/revisions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3RevisionsGuidEnvironmentVariablesRequest generates requests for GetV3RevisionsGuidEnvironmentVariables
func NewGetV3RevisionsGuidEnvironmentVariablesRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/revisions/%s/environment_variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3RolesRequest generates requests for GetV3Roles
func NewGetV3RolesRequest(server string, params *GetV3RolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Types != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_guids", runtime.ParamLocationQuery, *params.UserGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3RolesRequest calls the generic PostV3Roles builder with application/json body
func NewPostV3RolesRequest(server string, body PostV3RolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3RolesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3RolesRequestWithBody generates requests for PostV3Roles with any type of body
func NewPostV3RolesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3RolesGuidRequest generates requests for DeleteV3RolesGuid
func NewDeleteV3RolesGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3RolesGuidRequest generates requests for GetV3RolesGuid
func NewGetV3RolesGuidRequest(server string, guid openapi_types.UUID, params *GetV3RolesGuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3RoutesRequest generates requests for GetV3Routes
func NewGetV3RoutesRequest(server string, params *GetV3RoutesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_guids", runtime.ParamLocationQuery, *params.AppGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_guids", runtime.ParamLocationQuery, *params.DomainGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hosts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hosts", runtime.ParamLocationQuery, *params.Hosts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Paths != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "paths", runtime.ParamLocationQuery, *params.Paths); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ports != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ports", runtime.ParamLocationQuery, *params.Ports); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceInstanceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_instance_guids", runtime.ParamLocationQuery, *params.ServiceInstanceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3RoutesRequest calls the generic PostV3Routes builder with application/json body
func NewPostV3RoutesRequest(server string, body PostV3RoutesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3RoutesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3RoutesRequestWithBody generates requests for PostV3Routes with any type of body
func NewPostV3RoutesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3RoutesGuidRequest generates requests for DeleteV3RoutesGuid
func NewDeleteV3RoutesGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3RoutesGuidRequest generates requests for GetV3RoutesGuid
func NewGetV3RoutesGuidRequest(server string, guid openapi_types.UUID, params *GetV3RoutesGuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3RoutesGuidRequest calls the generic PatchV3RoutesGuid builder with application/json body
func NewPatchV3RoutesGuidRequest(server string, guid openapi_types.UUID, body PatchV3RoutesGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3RoutesGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3RoutesGuidRequestWithBody generates requests for PatchV3RoutesGuid with any type of body
func NewPatchV3RoutesGuidRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3RoutesGuidDestinationsRequest generates requests for GetV3RoutesGuidDestinations
func NewGetV3RoutesGuidDestinationsRequest(server string, guid openapi_types.UUID, params *GetV3RoutesGuidDestinationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes/%s/destinations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_guids", runtime.ParamLocationQuery, *params.AppGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3RoutesGuidDestinationsRequest calls the generic PatchV3RoutesGuidDestinations builder with application/json body
func NewPatchV3RoutesGuidDestinationsRequest(server string, guid openapi_types.UUID, body PatchV3RoutesGuidDestinationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3RoutesGuidDestinationsRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3RoutesGuidDestinationsRequestWithBody generates requests for PatchV3RoutesGuidDestinations with any type of body
func NewPatchV3RoutesGuidDestinationsRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes/%s/destinations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3RoutesGuidDestinationsRequest calls the generic PostV3RoutesGuidDestinations builder with application/json body
func NewPostV3RoutesGuidDestinationsRequest(server string, guid openapi_types.UUID, body PostV3RoutesGuidDestinationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3RoutesGuidDestinationsRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3RoutesGuidDestinationsRequestWithBody generates requests for PostV3RoutesGuidDestinations with any type of body
func NewPostV3RoutesGuidDestinationsRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes/%s/destinations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3RoutesGuidDestinationsDestinationGuidRequest generates requests for DeleteV3RoutesGuidDestinationsDestinationGuid
func NewDeleteV3RoutesGuidDestinationsDestinationGuidRequest(server string, guid openapi_types.UUID, destinationGuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "destination_guid", runtime.ParamLocationPath, destinationGuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes/%s/destinations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3RoutesGuidRelationshipsSharedSpacesRequest generates requests for GetV3RoutesGuidRelationshipsSharedSpaces
func NewGetV3RoutesGuidRelationshipsSharedSpacesRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes/%s/relationships/shared_spaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3RoutesGuidRelationshipsSpaceRequest calls the generic PatchV3RoutesGuidRelationshipsSpace builder with application/json body
func NewPatchV3RoutesGuidRelationshipsSpaceRequest(server string, guid openapi_types.UUID, body PatchV3RoutesGuidRelationshipsSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3RoutesGuidRelationshipsSpaceRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3RoutesGuidRelationshipsSpaceRequestWithBody generates requests for PatchV3RoutesGuidRelationshipsSpace with any type of body
func NewPatchV3RoutesGuidRelationshipsSpaceRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes/%s/relationships/space", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3RoutesGuidTransferOwnerRequest calls the generic PostV3RoutesGuidTransferOwner builder with application/json body
func NewPostV3RoutesGuidTransferOwnerRequest(server string, guid openapi_types.UUID, body PostV3RoutesGuidTransferOwnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3RoutesGuidTransferOwnerRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3RoutesGuidTransferOwnerRequestWithBody generates requests for PostV3RoutesGuidTransferOwner with any type of body
func NewPostV3RoutesGuidTransferOwnerRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/routes/%s/transfer_owner", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3SecurityGroupsRequest generates requests for GetV3SecurityGroups
func NewGetV3SecurityGroupsRequest(server string, params *GetV3SecurityGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/security_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GloballyEnabledRunning != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "globally_enabled_running", runtime.ParamLocationQuery, *params.GloballyEnabledRunning); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GloballyEnabledStaging != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "globally_enabled_staging", runtime.ParamLocationQuery, *params.GloballyEnabledStaging); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RunningSpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "running_space_guids", runtime.ParamLocationQuery, *params.RunningSpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StagingSpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "staging_space_guids", runtime.ParamLocationQuery, *params.StagingSpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3SecurityGroupsRequest calls the generic PostV3SecurityGroups builder with application/json body
func NewPostV3SecurityGroupsRequest(server string, body PostV3SecurityGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3SecurityGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3SecurityGroupsRequestWithBody generates requests for PostV3SecurityGroups with any type of body
func NewPostV3SecurityGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/security_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3SecurityGroupsGuidRequest generates requests for DeleteV3SecurityGroupsGuid
func NewDeleteV3SecurityGroupsGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/security_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3SecurityGroupsGuidRequest generates requests for GetV3SecurityGroupsGuid
func NewGetV3SecurityGroupsGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/security_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3SecurityGroupsGuidRequest calls the generic PatchV3SecurityGroupsGuid builder with application/json body
func NewPatchV3SecurityGroupsGuidRequest(server string, guid openapi_types.UUID, body PatchV3SecurityGroupsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3SecurityGroupsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3SecurityGroupsGuidRequestWithBody generates requests for PatchV3SecurityGroupsGuid with any type of body
func NewPatchV3SecurityGroupsGuidRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/security_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3SecurityGroupsGuidRelationshipsRunningSpacesRequest calls the generic PostV3SecurityGroupsGuidRelationshipsRunningSpaces builder with application/json body
func NewPostV3SecurityGroupsGuidRelationshipsRunningSpacesRequest(server string, guid openapi_types.UUID, body PostV3SecurityGroupsGuidRelationshipsRunningSpacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3SecurityGroupsGuidRelationshipsRunningSpacesRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3SecurityGroupsGuidRelationshipsRunningSpacesRequestWithBody generates requests for PostV3SecurityGroupsGuidRelationshipsRunningSpaces with any type of body
func NewPostV3SecurityGroupsGuidRelationshipsRunningSpacesRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/security_groups/%s/relationships/running_spaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidRequest generates requests for DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuid
func NewDeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidRequest(server string, guid openapi_types.UUID, spaceGuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "space_guid", runtime.ParamLocationPath, spaceGuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/security_groups/%s/relationships/running_spaces/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3SecurityGroupsGuidRelationshipsStagingSpacesRequest calls the generic PostV3SecurityGroupsGuidRelationshipsStagingSpaces builder with application/json body
func NewPostV3SecurityGroupsGuidRelationshipsStagingSpacesRequest(server string, guid openapi_types.UUID, body PostV3SecurityGroupsGuidRelationshipsStagingSpacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3SecurityGroupsGuidRelationshipsStagingSpacesRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3SecurityGroupsGuidRelationshipsStagingSpacesRequestWithBody generates requests for PostV3SecurityGroupsGuidRelationshipsStagingSpaces with any type of body
func NewPostV3SecurityGroupsGuidRelationshipsStagingSpacesRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/security_groups/%s/relationships/staging_spaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidRequest generates requests for DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuid
func NewDeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidRequest(server string, guid openapi_types.UUID, spaceGuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "space_guid", runtime.ParamLocationPath, spaceGuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/security_groups/%s/relationships/staging_spaces/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceBrokersRequest generates requests for GetV3ServiceBrokers
func NewGetV3ServiceBrokersRequest(server string, params *GetV3ServiceBrokersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_brokers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3ServiceBrokersRequest calls the generic PostV3ServiceBrokers builder with application/json body
func NewPostV3ServiceBrokersRequest(server string, body PostV3ServiceBrokersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3ServiceBrokersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3ServiceBrokersRequestWithBody generates requests for PostV3ServiceBrokers with any type of body
func NewPostV3ServiceBrokersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_brokers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3ServiceBrokersGuidRequest generates requests for DeleteV3ServiceBrokersGuid
func NewDeleteV3ServiceBrokersGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_brokers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceBrokersGuidRequest generates requests for GetV3ServiceBrokersGuid
func NewGetV3ServiceBrokersGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_brokers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3ServiceBrokersGuidRequest calls the generic PatchV3ServiceBrokersGuid builder with application/json body
func NewPatchV3ServiceBrokersGuidRequest(server string, guid string, body PatchV3ServiceBrokersGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3ServiceBrokersGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3ServiceBrokersGuidRequestWithBody generates requests for PatchV3ServiceBrokersGuid with any type of body
func NewPatchV3ServiceBrokersGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_brokers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3ServiceBrokersGuidCatalogRequest generates requests for PostV3ServiceBrokersGuidCatalog
func NewPostV3ServiceBrokersGuidCatalogRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_brokers/%s/catalog", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceBrokersGuidJobsSynchronizationRequest generates requests for GetV3ServiceBrokersGuidJobsSynchronization
func NewGetV3ServiceBrokersGuidJobsSynchronizationRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_brokers/%s/jobs/synchronization", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3ServiceCredentialBindingsRequest calls the generic PostV3ServiceCredentialBindings builder with application/json body
func NewPostV3ServiceCredentialBindingsRequest(server string, body PostV3ServiceCredentialBindingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3ServiceCredentialBindingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3ServiceCredentialBindingsRequestWithBody generates requests for PostV3ServiceCredentialBindings with any type of body
func NewPostV3ServiceCredentialBindingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_credential_bindings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3ServiceCredentialBindingsGuidRequest generates requests for DeleteV3ServiceCredentialBindingsGuid
func NewDeleteV3ServiceCredentialBindingsGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_credential_bindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceCredentialBindingsGuidRequest generates requests for GetV3ServiceCredentialBindingsGuid
func NewGetV3ServiceCredentialBindingsGuidRequest(server string, guid string, params *GetV3ServiceCredentialBindingsGuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_credential_bindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3ServiceCredentialBindingsGuidRequest calls the generic PatchV3ServiceCredentialBindingsGuid builder with application/json body
func NewPatchV3ServiceCredentialBindingsGuidRequest(server string, guid string, body PatchV3ServiceCredentialBindingsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3ServiceCredentialBindingsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3ServiceCredentialBindingsGuidRequestWithBody generates requests for PatchV3ServiceCredentialBindingsGuid with any type of body
func NewPatchV3ServiceCredentialBindingsGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_credential_bindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3ServiceCredentialBindingsGuidDetailsRequest generates requests for GetV3ServiceCredentialBindingsGuidDetails
func NewGetV3ServiceCredentialBindingsGuidDetailsRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_credential_bindings/%s/details", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceCredentialBindingsGuidParametersRequest generates requests for GetV3ServiceCredentialBindingsGuidParameters
func NewGetV3ServiceCredentialBindingsGuidParametersRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_credential_bindings/%s/parameters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceInstancesRequest generates requests for GetV3ServiceInstances
func NewGetV3ServiceInstancesRequest(server string, params *GetV3ServiceInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServicePlanGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_plan_guids", runtime.ParamLocationQuery, *params.ServicePlanGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServicePlanNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_plan_names", runtime.ParamLocationQuery, *params.ServicePlanNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV3ServiceInstancesGuidRequest generates requests for DeleteV3ServiceInstancesGuid
func NewDeleteV3ServiceInstancesGuidRequest(server string, guid string, params *DeleteV3ServiceInstancesGuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Purge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge", runtime.ParamLocationQuery, *params.Purge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3ServiceInstancesGuidRequest calls the generic PatchV3ServiceInstancesGuid builder with application/json body
func NewPatchV3ServiceInstancesGuidRequest(server string, guid string, body PatchV3ServiceInstancesGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3ServiceInstancesGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3ServiceInstancesGuidRequestWithBody generates requests for PatchV3ServiceInstancesGuid with any type of body
func NewPatchV3ServiceInstancesGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3ServiceInstancesGuidCredentialsRequest generates requests for GetV3ServiceInstancesGuidCredentials
func NewGetV3ServiceInstancesGuidCredentialsRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_instances/%s/credentials", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceInstancesGuidRelationshipsSharedSpacesRequest generates requests for GetV3ServiceInstancesGuidRelationshipsSharedSpaces
func NewGetV3ServiceInstancesGuidRelationshipsSharedSpacesRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_instances/%s/relationships/shared_spaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3ServiceInstancesGuidRelationshipsSharedSpacesRequest calls the generic PostV3ServiceInstancesGuidRelationshipsSharedSpaces builder with application/json body
func NewPostV3ServiceInstancesGuidRelationshipsSharedSpacesRequest(server string, guid string, body PostV3ServiceInstancesGuidRelationshipsSharedSpacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3ServiceInstancesGuidRelationshipsSharedSpacesRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3ServiceInstancesGuidRelationshipsSharedSpacesRequestWithBody generates requests for PostV3ServiceInstancesGuidRelationshipsSharedSpaces with any type of body
func NewPostV3ServiceInstancesGuidRelationshipsSharedSpacesRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_instances/%s/relationships/shared_spaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryRequest generates requests for GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummary
func NewGetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_instances/%s/relationships/shared_spaces/usage_summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidRequest generates requests for DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuid
func NewDeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidRequest(server string, guid string, spaceGuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "space_guid", runtime.ParamLocationPath, spaceGuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_instances/%s/relationships/shared_spaces/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceOfferingsRequest generates requests for GetV3ServiceOfferings
func NewGetV3ServiceOfferingsRequest(server string, params *GetV3ServiceOfferingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_offerings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Available != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "available", runtime.ParamLocationQuery, *params.Available); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceBrokerGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_broker_guids", runtime.ParamLocationQuery, *params.ServiceBrokerGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceBrokerNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_broker_names", runtime.ParamLocationQuery, *params.ServiceBrokerNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3ServiceOfferingsRequest calls the generic PostV3ServiceOfferings builder with application/json body
func NewPostV3ServiceOfferingsRequest(server string, body PostV3ServiceOfferingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3ServiceOfferingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3ServiceOfferingsRequestWithBody generates requests for PostV3ServiceOfferings with any type of body
func NewPostV3ServiceOfferingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_offerings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3ServiceOfferingsGuidRequest generates requests for DeleteV3ServiceOfferingsGuid
func NewDeleteV3ServiceOfferingsGuidRequest(server string, guid string, params *DeleteV3ServiceOfferingsGuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_offerings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Purge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge", runtime.ParamLocationQuery, *params.Purge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceOfferingsGuidRequest generates requests for GetV3ServiceOfferingsGuid
func NewGetV3ServiceOfferingsGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_offerings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3ServiceOfferingsGuidRequest calls the generic PatchV3ServiceOfferingsGuid builder with application/json body
func NewPatchV3ServiceOfferingsGuidRequest(server string, guid string, body PatchV3ServiceOfferingsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3ServiceOfferingsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3ServiceOfferingsGuidRequestWithBody generates requests for PatchV3ServiceOfferingsGuid with any type of body
func NewPatchV3ServiceOfferingsGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_offerings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3ServicePlansRequest generates requests for GetV3ServicePlans
func NewGetV3ServicePlansRequest(server string, params *GetV3ServicePlansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Available != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "available", runtime.ParamLocationQuery, *params.Available); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BrokerCatalogIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "broker_catalog_ids", runtime.ParamLocationQuery, *params.BrokerCatalogIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceBrokerGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_broker_guids", runtime.ParamLocationQuery, *params.ServiceBrokerGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceBrokerNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_broker_names", runtime.ParamLocationQuery, *params.ServiceBrokerNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceOfferingGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_offering_guids", runtime.ParamLocationQuery, *params.ServiceOfferingGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceOfferingNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_offering_names", runtime.ParamLocationQuery, *params.ServiceOfferingNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceInstanceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_instance_guids", runtime.ParamLocationQuery, *params.ServiceInstanceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3ServicePlansRequest calls the generic PostV3ServicePlans builder with application/json body
func NewPostV3ServicePlansRequest(server string, body PostV3ServicePlansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3ServicePlansRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3ServicePlansRequestWithBody generates requests for PostV3ServicePlans with any type of body
func NewPostV3ServicePlansRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3ServicePlansGuidRequest generates requests for DeleteV3ServicePlansGuid
func NewDeleteV3ServicePlansGuidRequest(server string, guid string, params *DeleteV3ServicePlansGuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Purge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge", runtime.ParamLocationQuery, *params.Purge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServicePlansGuidRequest generates requests for GetV3ServicePlansGuid
func NewGetV3ServicePlansGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3ServicePlansGuidRequest calls the generic PatchV3ServicePlansGuid builder with application/json body
func NewPatchV3ServicePlansGuidRequest(server string, guid string, body PatchV3ServicePlansGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3ServicePlansGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3ServicePlansGuidRequestWithBody generates requests for PatchV3ServicePlansGuid with any type of body
func NewPatchV3ServicePlansGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3ServicePlansGuidVisibilityRequest generates requests for GetV3ServicePlansGuidVisibility
func NewGetV3ServicePlansGuidVisibilityRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_plans/%s/visibility", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3ServicePlansGuidVisibilityRequest calls the generic PatchV3ServicePlansGuidVisibility builder with application/json body
func NewPatchV3ServicePlansGuidVisibilityRequest(server string, guid openapi_types.UUID, body PatchV3ServicePlansGuidVisibilityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3ServicePlansGuidVisibilityRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3ServicePlansGuidVisibilityRequestWithBody generates requests for PatchV3ServicePlansGuidVisibility with any type of body
func NewPatchV3ServicePlansGuidVisibilityRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_plans/%s/visibility", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3ServicePlansGuidVisibilityRequest calls the generic PostV3ServicePlansGuidVisibility builder with application/json body
func NewPostV3ServicePlansGuidVisibilityRequest(server string, guid openapi_types.UUID, body PostV3ServicePlansGuidVisibilityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3ServicePlansGuidVisibilityRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3ServicePlansGuidVisibilityRequestWithBody generates requests for PostV3ServicePlansGuidVisibility with any type of body
func NewPostV3ServicePlansGuidVisibilityRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_plans/%s/visibility", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3ServicePlansGuidVisibilityOrganizationGuidRequest generates requests for DeleteV3ServicePlansGuidVisibilityOrganizationGuid
func NewDeleteV3ServicePlansGuidVisibilityOrganizationGuidRequest(server string, guid openapi_types.UUID, organizationGuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "organization_guid", runtime.ParamLocationPath, organizationGuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_plans/%s/visibility/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceRouteBindingsRequest generates requests for GetV3ServiceRouteBindings
func NewGetV3ServiceRouteBindingsRequest(server string, params *GetV3ServiceRouteBindingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_route_bindings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RouteGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "route_guids", runtime.ParamLocationQuery, *params.RouteGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceInstanceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "service_instance_guids", runtime.ParamLocationQuery, *params.ServiceInstanceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceInstanceNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "service_instance_names", runtime.ParamLocationQuery, *params.ServiceInstanceNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3ServiceRouteBindingsRequest calls the generic PostV3ServiceRouteBindings builder with application/json body
func NewPostV3ServiceRouteBindingsRequest(server string, body PostV3ServiceRouteBindingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3ServiceRouteBindingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3ServiceRouteBindingsRequestWithBody generates requests for PostV3ServiceRouteBindings with any type of body
func NewPostV3ServiceRouteBindingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_route_bindings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3ServiceRouteBindingsGuidRequest generates requests for DeleteV3ServiceRouteBindingsGuid
func NewDeleteV3ServiceRouteBindingsGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_route_bindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceRouteBindingsGuidRequest generates requests for GetV3ServiceRouteBindingsGuid
func NewGetV3ServiceRouteBindingsGuidRequest(server string, guid string, params *GetV3ServiceRouteBindingsGuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_route_bindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3ServiceRouteBindingsGuidRequest calls the generic PatchV3ServiceRouteBindingsGuid builder with application/json body
func NewPatchV3ServiceRouteBindingsGuidRequest(server string, guid string, body PatchV3ServiceRouteBindingsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3ServiceRouteBindingsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3ServiceRouteBindingsGuidRequestWithBody generates requests for PatchV3ServiceRouteBindingsGuid with any type of body
func NewPatchV3ServiceRouteBindingsGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_route_bindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3ServiceRouteBindingsGuidParametersRequest generates requests for GetV3ServiceRouteBindingsGuidParameters
func NewGetV3ServiceRouteBindingsGuidParametersRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_route_bindings/%s/parameters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceUsageEventsRequest generates requests for GetV3ServiceUsageEvents
func NewGetV3ServiceUsageEventsRequest(server string, params *GetV3ServiceUsageEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_usage_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AfterGuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after_guid", runtime.ParamLocationQuery, *params.AfterGuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceInstanceTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "service_instance_types", runtime.ParamLocationQuery, *params.ServiceInstanceTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceOfferingGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "service_offering_guids", runtime.ParamLocationQuery, *params.ServiceOfferingGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3ServiceUsageEventsRequest generates requests for PostV3ServiceUsageEvents
func NewPostV3ServiceUsageEventsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_usage_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3ServiceUsageEventsGuidRequest generates requests for GetV3ServiceUsageEventsGuid
func NewGetV3ServiceUsageEventsGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/service_usage_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV3SidecarsGuidRequest generates requests for DeleteV3SidecarsGuid
func NewDeleteV3SidecarsGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/sidecars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3SidecarsGuidRequest generates requests for GetV3SidecarsGuid
func NewGetV3SidecarsGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/sidecars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3SidecarsGuidRequest calls the generic PatchV3SidecarsGuid builder with application/json body
func NewPatchV3SidecarsGuidRequest(server string, guid openapi_types.UUID, body PatchV3SidecarsGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3SidecarsGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3SidecarsGuidRequestWithBody generates requests for PatchV3SidecarsGuid with any type of body
func NewPatchV3SidecarsGuidRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/sidecars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3SidecarsGuidProcessesRequest generates requests for GetV3SidecarsGuidProcesses
func NewGetV3SidecarsGuidProcessesRequest(server string, guid openapi_types.UUID, params *GetV3SidecarsGuidProcessesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/sidecars/%s/processes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3SpaceQuotasRequest generates requests for GetV3SpaceQuotas
func NewGetV3SpaceQuotasRequest(server string, params *GetV3SpaceQuotasParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/space_quotas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3SpaceQuotasRequest calls the generic PostV3SpaceQuotas builder with application/json body
func NewPostV3SpaceQuotasRequest(server string, body PostV3SpaceQuotasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3SpaceQuotasRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3SpaceQuotasRequestWithBody generates requests for PostV3SpaceQuotas with any type of body
func NewPostV3SpaceQuotasRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/space_quotas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3SpaceQuotasGuidRequest generates requests for DeleteV3SpaceQuotasGuid
func NewDeleteV3SpaceQuotasGuidRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/space_quotas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3SpaceQuotasGuidRequest generates requests for GetV3SpaceQuotasGuid
func NewGetV3SpaceQuotasGuidRequest(server string, guid openapi_types.UUID, params *GetV3SpaceQuotasGuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/space_quotas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3SpaceQuotasGuidRequest calls the generic PatchV3SpaceQuotasGuid builder with application/json body
func NewPatchV3SpaceQuotasGuidRequest(server string, guid openapi_types.UUID, body PatchV3SpaceQuotasGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3SpaceQuotasGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3SpaceQuotasGuidRequestWithBody generates requests for PatchV3SpaceQuotasGuid with any type of body
func NewPatchV3SpaceQuotasGuidRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/space_quotas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3SpaceQuotasGuidRelationshipsSpacesRequest calls the generic PostV3SpaceQuotasGuidRelationshipsSpaces builder with application/json body
func NewPostV3SpaceQuotasGuidRelationshipsSpacesRequest(server string, guid openapi_types.UUID, body PostV3SpaceQuotasGuidRelationshipsSpacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3SpaceQuotasGuidRelationshipsSpacesRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPostV3SpaceQuotasGuidRelationshipsSpacesRequestWithBody generates requests for PostV3SpaceQuotasGuidRelationshipsSpaces with any type of body
func NewPostV3SpaceQuotasGuidRelationshipsSpacesRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/space_quotas/%s/relationships/spaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidRequest generates requests for DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuid
func NewDeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidRequest(server string, guid openapi_types.UUID, spaceGuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "space_guid", runtime.ParamLocationPath, spaceGuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/space_quotas/%s/relationships/spaces/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3SpacesRequest generates requests for GetV3Spaces
func NewGetV3SpacesRequest(server string, params *GetV3SpacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3SpacesRequest calls the generic PostV3Spaces builder with application/json body
func NewPostV3SpacesRequest(server string, body PostV3SpacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3SpacesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3SpacesRequestWithBody generates requests for PostV3Spaces with any type of body
func NewPostV3SpacesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3SpacesGuidRequest generates requests for DeleteV3SpacesGuid
func NewDeleteV3SpacesGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3SpacesGuidRequest generates requests for GetV3SpacesGuid
func NewGetV3SpacesGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3SpacesGuidRequest calls the generic PatchV3SpacesGuid builder with application/json body
func NewPatchV3SpacesGuidRequest(server string, guid string, body PatchV3SpacesGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3SpacesGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3SpacesGuidRequestWithBody generates requests for PatchV3SpacesGuid with any type of body
func NewPatchV3SpacesGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3SpacesGuidFeaturesRequest generates requests for GetV3SpacesGuidFeatures
func NewGetV3SpacesGuidFeaturesRequest(server string, guid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s/features", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3SpacesGuidFeaturesNameRequest generates requests for GetV3SpacesGuidFeaturesName
func NewGetV3SpacesGuidFeaturesNameRequest(server string, guid openapi_types.UUID, name GetV3SpacesGuidFeaturesNameParamsName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s/features/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3SpacesGuidFeaturesNameRequest calls the generic PatchV3SpacesGuidFeaturesName builder with application/json body
func NewPatchV3SpacesGuidFeaturesNameRequest(server string, guid openapi_types.UUID, name PatchV3SpacesGuidFeaturesNameParamsName, body PatchV3SpacesGuidFeaturesNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3SpacesGuidFeaturesNameRequestWithBody(server, guid, name, "application/json", bodyReader)
}

// NewPatchV3SpacesGuidFeaturesNameRequestWithBody generates requests for PatchV3SpacesGuidFeaturesName with any type of body
func NewPatchV3SpacesGuidFeaturesNameRequestWithBody(server string, guid openapi_types.UUID, name PatchV3SpacesGuidFeaturesNameParamsName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s/features/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3SpacesGuidManifestRequestWithBody generates requests for PostV3SpacesGuidManifest with any type of body
func NewPostV3SpacesGuidManifestRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s/manifest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3SpacesGuidManifestDiffRequestWithBody generates requests for PostV3SpacesGuidManifestDiff with any type of body
func NewPostV3SpacesGuidManifestDiffRequestWithBody(server string, guid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s/manifest_diff", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3SpacesGuidRelationshipsIsolationSegmentRequest generates requests for GetV3SpacesGuidRelationshipsIsolationSegment
func NewGetV3SpacesGuidRelationshipsIsolationSegmentRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s/relationships/isolation_segment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3SpacesGuidRelationshipsIsolationSegmentRequest calls the generic PatchV3SpacesGuidRelationshipsIsolationSegment builder with application/json body
func NewPatchV3SpacesGuidRelationshipsIsolationSegmentRequest(server string, guid string, body PatchV3SpacesGuidRelationshipsIsolationSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3SpacesGuidRelationshipsIsolationSegmentRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3SpacesGuidRelationshipsIsolationSegmentRequestWithBody generates requests for PatchV3SpacesGuidRelationshipsIsolationSegment with any type of body
func NewPatchV3SpacesGuidRelationshipsIsolationSegmentRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s/relationships/isolation_segment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3SpacesGuidRunningSecurityGroupsRequest generates requests for GetV3SpacesGuidRunningSecurityGroups
func NewGetV3SpacesGuidRunningSecurityGroupsRequest(server string, guid openapi_types.UUID, params *GetV3SpacesGuidRunningSecurityGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s/running_security_groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3SpacesGuidStagingSecurityGroupsRequest generates requests for GetV3SpacesGuidStagingSecurityGroups
func NewGetV3SpacesGuidStagingSecurityGroupsRequest(server string, guid openapi_types.UUID, params *GetV3SpacesGuidStagingSecurityGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s/staging_security_groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3SpacesGuidUsersRequest generates requests for GetV3SpacesGuidUsers
func NewGetV3SpacesGuidUsersRequest(server string, guid string, params *GetV3SpacesGuidUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/spaces/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Usernames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "usernames", runtime.ParamLocationQuery, *params.Usernames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartialUsernames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "partial_usernames", runtime.ParamLocationQuery, *params.PartialUsernames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Origins != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "origins", runtime.ParamLocationQuery, *params.Origins); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3StacksRequest generates requests for GetV3Stacks
func NewGetV3StacksRequest(server string, params *GetV3StacksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Default != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default", runtime.ParamLocationQuery, *params.Default); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3StacksRequest calls the generic PostV3Stacks builder with application/json body
func NewPostV3StacksRequest(server string, body PostV3StacksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3StacksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3StacksRequestWithBody generates requests for PostV3Stacks with any type of body
func NewPostV3StacksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3StacksGuidRequest generates requests for DeleteV3StacksGuid
func NewDeleteV3StacksGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3StacksGuidRequest generates requests for GetV3StacksGuid
func NewGetV3StacksGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3StacksGuidRequest calls the generic PatchV3StacksGuid builder with application/json body
func NewPatchV3StacksGuidRequest(server string, guid string, body PatchV3StacksGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3StacksGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3StacksGuidRequestWithBody generates requests for PatchV3StacksGuid with any type of body
func NewPatchV3StacksGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3StacksGuidAppsRequest generates requests for GetV3StacksGuidApps
func NewGetV3StacksGuidAppsRequest(server string, guid string, params *GetV3StacksGuidAppsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/stacks/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3TasksRequest generates requests for GetV3Tasks
func NewGetV3TasksRequest(server string, params *GetV3TasksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Names != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_guids", runtime.ParamLocationQuery, *params.AppGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SpaceGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_guids", runtime.ParamLocationQuery, *params.SpaceGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationGuids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization_guids", runtime.ParamLocationQuery, *params.OrganizationGuids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3TasksGuidRequest generates requests for GetV3TasksGuid
func NewGetV3TasksGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3TasksGuidRequest calls the generic PatchV3TasksGuid builder with application/json body
func NewPatchV3TasksGuidRequest(server string, guid string, body PatchV3TasksGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3TasksGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3TasksGuidRequestWithBody generates requests for PatchV3TasksGuid with any type of body
func NewPatchV3TasksGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV3TasksGuidRequest generates requests for PostV3TasksGuid
func NewPostV3TasksGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3UsersRequest generates requests for GetV3Users
func NewGetV3UsersRequest(server string, params *GetV3UsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Guids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "guids", runtime.ParamLocationQuery, *params.Guids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Usernames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "usernames", runtime.ParamLocationQuery, *params.Usernames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PartialUsernames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "partial_usernames", runtime.ParamLocationQuery, *params.PartialUsernames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Origins != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "origins", runtime.ParamLocationQuery, *params.Origins); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LabelSelector != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label_selector", runtime.ParamLocationQuery, *params.LabelSelector); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_ats", runtime.ParamLocationQuery, *params.CreatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_ats", runtime.ParamLocationQuery, *params.UpdatedAts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3UsersRequest calls the generic PostV3Users builder with application/json body
func NewPostV3UsersRequest(server string, body PostV3UsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3UsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3UsersRequestWithBody generates requests for PostV3Users with any type of body
func NewPostV3UsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV3UsersGuidRequest generates requests for DeleteV3UsersGuid
func NewDeleteV3UsersGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV3UsersGuidRequest generates requests for GetV3UsersGuid
func NewGetV3UsersGuidRequest(server string, guid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV3UsersGuidRequest calls the generic PatchV3UsersGuid builder with application/json body
func NewPatchV3UsersGuidRequest(server string, guid string, body PatchV3UsersGuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV3UsersGuidRequestWithBody(server, guid, "application/json", bodyReader)
}

// NewPatchV3UsersGuidRequestWithBody generates requests for PatchV3UsersGuid with any type of body
func NewPatchV3UsersGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWithResponse request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// GetV3WithResponse request
	GetV3WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV3Response, error)

	// PostV3AdminActionsClearBuildpackCacheWithResponse request
	PostV3AdminActionsClearBuildpackCacheWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV3AdminActionsClearBuildpackCacheResponse, error)

	// GetV3AppUsageEventsWithResponse request
	GetV3AppUsageEventsWithResponse(ctx context.Context, params *GetV3AppUsageEventsParams, reqEditors ...RequestEditorFn) (*GetV3AppUsageEventsResponse, error)

	// PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedWithResponse request
	PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedResponse, error)

	// GetV3AppUsageEventsGuidWithResponse request
	GetV3AppUsageEventsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3AppUsageEventsGuidResponse, error)

	// ListAppsWithResponse request
	ListAppsWithResponse(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*ListAppsResponse, error)

	// CreateAppWithBodyWithResponse request with any body
	CreateAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppResponse, error)

	CreateAppWithResponse(ctx context.Context, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppResponse, error)

	// DeleteAppWithResponse request
	DeleteAppWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAppResponse, error)

	// GetAppWithResponse request
	GetAppWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetAppParams, reqEditors ...RequestEditorFn) (*GetAppResponse, error)

	// UpdateAppWithBodyWithResponse request with any body
	UpdateAppWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppResponse, error)

	UpdateAppWithResponse(ctx context.Context, guid openapi_types.UUID, body UpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppResponse, error)

	// PostV3AppsGuidActionsApplyManifestWithBodyWithResponse request with any body
	PostV3AppsGuidActionsApplyManifestWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3AppsGuidActionsApplyManifestResponse, error)

	// ClearAppBuildpackCacheWithResponse request
	ClearAppBuildpackCacheWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ClearAppBuildpackCacheResponse, error)

	// RestartAppWithResponse request
	RestartAppWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*RestartAppResponse, error)

	// StartAppWithResponse request
	StartAppWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*StartAppResponse, error)

	// StopAppWithResponse request
	StopAppWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*StopAppResponse, error)

	// GetV3AppsGuidBuildsWithResponse request
	GetV3AppsGuidBuildsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidBuildsParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidBuildsResponse, error)

	// GetV3AppsGuidDropletsWithResponse request
	GetV3AppsGuidDropletsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidDropletsParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidDropletsResponse, error)

	// GetAppEnvironmentVariablesWithResponse request
	GetAppEnvironmentVariablesWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAppEnvironmentVariablesResponse, error)

	// UpdateAppEnvironmentVariablesWithBodyWithResponse request with any body
	UpdateAppEnvironmentVariablesWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppEnvironmentVariablesResponse, error)

	UpdateAppEnvironmentVariablesWithResponse(ctx context.Context, guid openapi_types.UUID, body UpdateAppEnvironmentVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppEnvironmentVariablesResponse, error)

	// GetV3AppsGuidFeaturesWithResponse request
	GetV3AppsGuidFeaturesWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3AppsGuidFeaturesResponse, error)

	// GetV3AppsGuidFeaturesNameWithResponse request
	GetV3AppsGuidFeaturesNameWithResponse(ctx context.Context, guid openapi_types.UUID, name GetV3AppsGuidFeaturesNameParamsName, reqEditors ...RequestEditorFn) (*GetV3AppsGuidFeaturesNameResponse, error)

	// PatchV3AppsGuidFeaturesNameWithBodyWithResponse request with any body
	PatchV3AppsGuidFeaturesNameWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, name PatchV3AppsGuidFeaturesNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3AppsGuidFeaturesNameResponse, error)

	PatchV3AppsGuidFeaturesNameWithResponse(ctx context.Context, guid openapi_types.UUID, name PatchV3AppsGuidFeaturesNameParamsName, body PatchV3AppsGuidFeaturesNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3AppsGuidFeaturesNameResponse, error)

	// GetV3AppsGuidManifestWithResponse request
	GetV3AppsGuidManifestWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3AppsGuidManifestResponse, error)

	// PostV3AppsGuidManifestDiffWithBodyWithResponse request with any body
	PostV3AppsGuidManifestDiffWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3AppsGuidManifestDiffResponse, error)

	// GetV3AppsGuidPackagesWithResponse request
	GetV3AppsGuidPackagesWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidPackagesParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidPackagesResponse, error)

	// GetAppPermissionsWithResponse request
	GetAppPermissionsWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAppPermissionsResponse, error)

	// GetV3AppsGuidProcessesWithResponse request
	GetV3AppsGuidProcessesWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidProcessesParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidProcessesResponse, error)

	// GetV3AppsGuidProcessesTypeWithResponse request
	GetV3AppsGuidProcessesTypeWithResponse(ctx context.Context, guid openapi_types.UUID, pType string, reqEditors ...RequestEditorFn) (*GetV3AppsGuidProcessesTypeResponse, error)

	// GetV3AppsGuidRelationshipsCurrentDropletWithResponse request
	GetV3AppsGuidRelationshipsCurrentDropletWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3AppsGuidRelationshipsCurrentDropletResponse, error)

	// PatchV3AppsGuidRelationshipsCurrentDropletWithBodyWithResponse request with any body
	PatchV3AppsGuidRelationshipsCurrentDropletWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3AppsGuidRelationshipsCurrentDropletResponse, error)

	PatchV3AppsGuidRelationshipsCurrentDropletWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3AppsGuidRelationshipsCurrentDropletJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3AppsGuidRelationshipsCurrentDropletResponse, error)

	// GetV3AppsGuidRevisionsWithResponse request
	GetV3AppsGuidRevisionsWithResponse(ctx context.Context, guid string, params *GetV3AppsGuidRevisionsParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidRevisionsResponse, error)

	// GetV3AppsGuidRevisionsDeployedWithResponse request
	GetV3AppsGuidRevisionsDeployedWithResponse(ctx context.Context, guid string, params *GetV3AppsGuidRevisionsDeployedParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidRevisionsDeployedResponse, error)

	// GetV3AppsGuidSidecarsWithResponse request
	GetV3AppsGuidSidecarsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidSidecarsParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidSidecarsResponse, error)

	// PostV3AppsGuidSidecarsWithBodyWithResponse request with any body
	PostV3AppsGuidSidecarsWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3AppsGuidSidecarsResponse, error)

	PostV3AppsGuidSidecarsWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3AppsGuidSidecarsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3AppsGuidSidecarsResponse, error)

	// GetAppSshEnabledWithResponse request
	GetAppSshEnabledWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAppSshEnabledResponse, error)

	// PostV3AppsGuidTasksWithBodyWithResponse request with any body
	PostV3AppsGuidTasksWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3AppsGuidTasksResponse, error)

	PostV3AppsGuidTasksWithResponse(ctx context.Context, guid string, body PostV3AppsGuidTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3AppsGuidTasksResponse, error)

	// GetV3AuditEventsWithResponse request
	GetV3AuditEventsWithResponse(ctx context.Context, params *GetV3AuditEventsParams, reqEditors ...RequestEditorFn) (*GetV3AuditEventsResponse, error)

	// GetV3AuditEventsGuidWithResponse request
	GetV3AuditEventsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3AuditEventsGuidResponse, error)

	// GetV3BuildpacksWithResponse request
	GetV3BuildpacksWithResponse(ctx context.Context, params *GetV3BuildpacksParams, reqEditors ...RequestEditorFn) (*GetV3BuildpacksResponse, error)

	// PostV3BuildpacksWithBodyWithResponse request with any body
	PostV3BuildpacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3BuildpacksResponse, error)

	PostV3BuildpacksWithResponse(ctx context.Context, body PostV3BuildpacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3BuildpacksResponse, error)

	// DeleteV3BuildpacksGuidWithResponse request
	DeleteV3BuildpacksGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3BuildpacksGuidResponse, error)

	// GetV3BuildpacksGuidWithResponse request
	GetV3BuildpacksGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3BuildpacksGuidResponse, error)

	// PatchV3BuildpacksGuidWithBodyWithResponse request with any body
	PatchV3BuildpacksGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3BuildpacksGuidResponse, error)

	PatchV3BuildpacksGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3BuildpacksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3BuildpacksGuidResponse, error)

	// PostV3BuildpacksGuidUploadWithBodyWithResponse request with any body
	PostV3BuildpacksGuidUploadWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3BuildpacksGuidUploadResponse, error)

	PostV3BuildpacksGuidUploadWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3BuildpacksGuidUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3BuildpacksGuidUploadResponse, error)

	// GetV3BuildsWithResponse request
	GetV3BuildsWithResponse(ctx context.Context, params *GetV3BuildsParams, reqEditors ...RequestEditorFn) (*GetV3BuildsResponse, error)

	// PostV3BuildsWithBodyWithResponse request with any body
	PostV3BuildsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3BuildsResponse, error)

	PostV3BuildsWithResponse(ctx context.Context, body PostV3BuildsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3BuildsResponse, error)

	// GetV3BuildsGuidWithResponse request
	GetV3BuildsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3BuildsGuidResponse, error)

	// PatchV3BuildsGuidWithBodyWithResponse request with any body
	PatchV3BuildsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3BuildsGuidResponse, error)

	PatchV3BuildsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3BuildsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3BuildsGuidResponse, error)

	// GetV3DeploymentsWithResponse request
	GetV3DeploymentsWithResponse(ctx context.Context, params *GetV3DeploymentsParams, reqEditors ...RequestEditorFn) (*GetV3DeploymentsResponse, error)

	// PostV3DeploymentsWithBodyWithResponse request with any body
	PostV3DeploymentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3DeploymentsResponse, error)

	PostV3DeploymentsWithResponse(ctx context.Context, body PostV3DeploymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3DeploymentsResponse, error)

	// GetV3DeploymentsGuidWithResponse request
	GetV3DeploymentsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3DeploymentsGuidResponse, error)

	// PatchV3DeploymentsGuidWithBodyWithResponse request with any body
	PatchV3DeploymentsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3DeploymentsGuidResponse, error)

	PatchV3DeploymentsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3DeploymentsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3DeploymentsGuidResponse, error)

	// PostV3DeploymentsGuidActionsCancelWithResponse request
	PostV3DeploymentsGuidActionsCancelWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostV3DeploymentsGuidActionsCancelResponse, error)

	// PostV3DeploymentsGuidActionsContinueWithResponse request
	PostV3DeploymentsGuidActionsContinueWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostV3DeploymentsGuidActionsContinueResponse, error)

	// GetV3DomainsWithResponse request
	GetV3DomainsWithResponse(ctx context.Context, params *GetV3DomainsParams, reqEditors ...RequestEditorFn) (*GetV3DomainsResponse, error)

	// PostV3DomainsWithBodyWithResponse request with any body
	PostV3DomainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3DomainsResponse, error)

	PostV3DomainsWithResponse(ctx context.Context, body PostV3DomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3DomainsResponse, error)

	// DeleteV3DomainsGuidWithResponse request
	DeleteV3DomainsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3DomainsGuidResponse, error)

	// GetV3DomainsGuidWithResponse request
	GetV3DomainsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3DomainsGuidResponse, error)

	// PatchV3DomainsGuidWithBodyWithResponse request with any body
	PatchV3DomainsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3DomainsGuidResponse, error)

	PatchV3DomainsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3DomainsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3DomainsGuidResponse, error)

	// PostV3DomainsGuidRelationshipsSharedOrganizationsWithBodyWithResponse request with any body
	PostV3DomainsGuidRelationshipsSharedOrganizationsWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3DomainsGuidRelationshipsSharedOrganizationsResponse, error)

	PostV3DomainsGuidRelationshipsSharedOrganizationsWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3DomainsGuidRelationshipsSharedOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3DomainsGuidRelationshipsSharedOrganizationsResponse, error)

	// DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidWithResponse request
	DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidWithResponse(ctx context.Context, guid openapi_types.UUID, orgGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidResponse, error)

	// GetV3DropletsWithResponse request
	GetV3DropletsWithResponse(ctx context.Context, params *GetV3DropletsParams, reqEditors ...RequestEditorFn) (*GetV3DropletsResponse, error)

	// PostV3DropletsWithBodyWithResponse request with any body
	PostV3DropletsWithBodyWithResponse(ctx context.Context, params *PostV3DropletsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3DropletsResponse, error)

	PostV3DropletsWithResponse(ctx context.Context, params *PostV3DropletsParams, body PostV3DropletsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3DropletsResponse, error)

	// DeleteV3DropletsGuidWithResponse request
	DeleteV3DropletsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3DropletsGuidResponse, error)

	// GetV3DropletsGuidWithResponse request
	GetV3DropletsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3DropletsGuidResponse, error)

	// PatchV3DropletsGuidWithBodyWithResponse request with any body
	PatchV3DropletsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3DropletsGuidResponse, error)

	PatchV3DropletsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3DropletsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3DropletsGuidResponse, error)

	// GetV3EnvironmentVariableGroupsNameWithResponse request
	GetV3EnvironmentVariableGroupsNameWithResponse(ctx context.Context, name GetV3EnvironmentVariableGroupsNameParamsName, reqEditors ...RequestEditorFn) (*GetV3EnvironmentVariableGroupsNameResponse, error)

	// PatchV3EnvironmentVariableGroupsNameWithBodyWithResponse request with any body
	PatchV3EnvironmentVariableGroupsNameWithBodyWithResponse(ctx context.Context, name PatchV3EnvironmentVariableGroupsNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3EnvironmentVariableGroupsNameResponse, error)

	PatchV3EnvironmentVariableGroupsNameWithResponse(ctx context.Context, name PatchV3EnvironmentVariableGroupsNameParamsName, body PatchV3EnvironmentVariableGroupsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3EnvironmentVariableGroupsNameResponse, error)

	// GetV3FeatureFlagsWithResponse request
	GetV3FeatureFlagsWithResponse(ctx context.Context, params *GetV3FeatureFlagsParams, reqEditors ...RequestEditorFn) (*GetV3FeatureFlagsResponse, error)

	// GetV3FeatureFlagsNameWithResponse request
	GetV3FeatureFlagsNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetV3FeatureFlagsNameResponse, error)

	// PatchV3FeatureFlagsNameWithBodyWithResponse request with any body
	PatchV3FeatureFlagsNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3FeatureFlagsNameResponse, error)

	PatchV3FeatureFlagsNameWithResponse(ctx context.Context, name string, body PatchV3FeatureFlagsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3FeatureFlagsNameResponse, error)

	// GetV3InfoWithResponse request
	GetV3InfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV3InfoResponse, error)

	// GetV3InfoUsageSummaryWithResponse request
	GetV3InfoUsageSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV3InfoUsageSummaryResponse, error)

	// GetV3IsolationSegmentsWithResponse request
	GetV3IsolationSegmentsWithResponse(ctx context.Context, params *GetV3IsolationSegmentsParams, reqEditors ...RequestEditorFn) (*GetV3IsolationSegmentsResponse, error)

	// PostV3IsolationSegmentsWithBodyWithResponse request with any body
	PostV3IsolationSegmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3IsolationSegmentsResponse, error)

	PostV3IsolationSegmentsWithResponse(ctx context.Context, body PostV3IsolationSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3IsolationSegmentsResponse, error)

	// DeleteV3IsolationSegmentsGuidWithResponse request
	DeleteV3IsolationSegmentsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3IsolationSegmentsGuidResponse, error)

	// GetV3IsolationSegmentsGuidWithResponse request
	GetV3IsolationSegmentsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3IsolationSegmentsGuidResponse, error)

	// PatchV3IsolationSegmentsGuidWithBodyWithResponse request with any body
	PatchV3IsolationSegmentsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3IsolationSegmentsGuidResponse, error)

	PatchV3IsolationSegmentsGuidWithResponse(ctx context.Context, guid string, body PatchV3IsolationSegmentsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3IsolationSegmentsGuidResponse, error)

	// GetV3IsolationSegmentsGuidRelationshipsOrganizationsWithResponse request
	GetV3IsolationSegmentsGuidRelationshipsOrganizationsWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3IsolationSegmentsGuidRelationshipsOrganizationsResponse, error)

	// PostV3IsolationSegmentsGuidRelationshipsOrganizationsWithBodyWithResponse request with any body
	PostV3IsolationSegmentsGuidRelationshipsOrganizationsWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse, error)

	PostV3IsolationSegmentsGuidRelationshipsOrganizationsWithResponse(ctx context.Context, guid string, body PostV3IsolationSegmentsGuidRelationshipsOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse, error)

	// DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidWithResponse request
	DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidWithResponse(ctx context.Context, guid string, orgGuid string, reqEditors ...RequestEditorFn) (*DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidResponse, error)

	// GetV3IsolationSegmentsGuidRelationshipsSpacesWithResponse request
	GetV3IsolationSegmentsGuidRelationshipsSpacesWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3IsolationSegmentsGuidRelationshipsSpacesResponse, error)

	// GetV3JobsWithResponse request
	GetV3JobsWithResponse(ctx context.Context, params *GetV3JobsParams, reqEditors ...RequestEditorFn) (*GetV3JobsResponse, error)

	// GetV3JobsGuidWithResponse request
	GetV3JobsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3JobsGuidResponse, error)

	// ListOrganizationQuotasWithResponse request
	ListOrganizationQuotasWithResponse(ctx context.Context, params *ListOrganizationQuotasParams, reqEditors ...RequestEditorFn) (*ListOrganizationQuotasResponse, error)

	// CreateOrganizationQuotaWithBodyWithResponse request with any body
	CreateOrganizationQuotaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationQuotaResponse, error)

	CreateOrganizationQuotaWithResponse(ctx context.Context, body CreateOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationQuotaResponse, error)

	// DeleteOrganizationQuotaWithResponse request
	DeleteOrganizationQuotaWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteOrganizationQuotaResponse, error)

	// GetOrganizationQuotaWithResponse request
	GetOrganizationQuotaWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetOrganizationQuotaParams, reqEditors ...RequestEditorFn) (*GetOrganizationQuotaResponse, error)

	// UpdateOrganizationQuotaWithBodyWithResponse request with any body
	UpdateOrganizationQuotaWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationQuotaResponse, error)

	UpdateOrganizationQuotaWithResponse(ctx context.Context, guid openapi_types.UUID, body UpdateOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationQuotaResponse, error)

	// ApplyOrganizationQuotaToOrganizationsWithBodyWithResponse request with any body
	ApplyOrganizationQuotaToOrganizationsWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyOrganizationQuotaToOrganizationsResponse, error)

	ApplyOrganizationQuotaToOrganizationsWithResponse(ctx context.Context, guid openapi_types.UUID, body ApplyOrganizationQuotaToOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyOrganizationQuotaToOrganizationsResponse, error)

	// ListOrganizationsWithResponse request
	ListOrganizationsWithResponse(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error)

	// CreateOrganizationWithBodyWithResponse request with any body
	CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	// DeleteOrganizationWithResponse request
	DeleteOrganizationWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error)

	// GetOrganizationWithResponse request
	GetOrganizationWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error)

	// UpdateOrganizationWithBodyWithResponse request with any body
	UpdateOrganizationWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	UpdateOrganizationWithResponse(ctx context.Context, guid string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	// GetDefaultDomainWithResponse request
	GetDefaultDomainWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetDefaultDomainResponse, error)

	// GetDefaultIsolationSegmentWithResponse request
	GetDefaultIsolationSegmentWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetDefaultIsolationSegmentResponse, error)

	// AssignDefaultIsolationSegmentWithBodyWithResponse request with any body
	AssignDefaultIsolationSegmentWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignDefaultIsolationSegmentResponse, error)

	AssignDefaultIsolationSegmentWithResponse(ctx context.Context, guid string, body AssignDefaultIsolationSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignDefaultIsolationSegmentResponse, error)

	// GetUsageSummaryWithResponse request
	GetUsageSummaryWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetUsageSummaryResponse, error)

	// ListUsersForOrganizationWithResponse request
	ListUsersForOrganizationWithResponse(ctx context.Context, guid string, params *ListUsersForOrganizationParams, reqEditors ...RequestEditorFn) (*ListUsersForOrganizationResponse, error)

	// GetV3PackagesWithResponse request
	GetV3PackagesWithResponse(ctx context.Context, params *GetV3PackagesParams, reqEditors ...RequestEditorFn) (*GetV3PackagesResponse, error)

	// PostV3PackagesWithBodyWithResponse request with any body
	PostV3PackagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3PackagesResponse, error)

	PostV3PackagesWithResponse(ctx context.Context, body PostV3PackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3PackagesResponse, error)

	// DeleteV3PackagesGuidWithResponse request
	DeleteV3PackagesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3PackagesGuidResponse, error)

	// GetV3PackagesGuidWithResponse request
	GetV3PackagesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3PackagesGuidResponse, error)

	// PatchV3PackagesGuidWithBodyWithResponse request with any body
	PatchV3PackagesGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3PackagesGuidResponse, error)

	PatchV3PackagesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3PackagesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3PackagesGuidResponse, error)

	// PostV3PackagesGuidCopyWithBodyWithResponse request with any body
	PostV3PackagesGuidCopyWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3PackagesGuidCopyResponse, error)

	PostV3PackagesGuidCopyWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3PackagesGuidCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3PackagesGuidCopyResponse, error)

	// GetV3PackagesGuidDownloadWithResponse request
	GetV3PackagesGuidDownloadWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3PackagesGuidDownloadResponse, error)

	// GetV3PackagesGuidDropletsWithResponse request
	GetV3PackagesGuidDropletsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3PackagesGuidDropletsParams, reqEditors ...RequestEditorFn) (*GetV3PackagesGuidDropletsResponse, error)

	// PostV3PackagesGuidUploadWithBodyWithResponse request with any body
	PostV3PackagesGuidUploadWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3PackagesGuidUploadResponse, error)

	// GetV3ProcessesWithResponse request
	GetV3ProcessesWithResponse(ctx context.Context, params *GetV3ProcessesParams, reqEditors ...RequestEditorFn) (*GetV3ProcessesResponse, error)

	// GetV3ProcessesGuidWithResponse request
	GetV3ProcessesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3ProcessesGuidResponse, error)

	// PatchV3ProcessesGuidWithBodyWithResponse request with any body
	PatchV3ProcessesGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ProcessesGuidResponse, error)

	PatchV3ProcessesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3ProcessesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ProcessesGuidResponse, error)

	// PostV3ProcessesGuidActionsScaleWithBodyWithResponse request with any body
	PostV3ProcessesGuidActionsScaleWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ProcessesGuidActionsScaleResponse, error)

	PostV3ProcessesGuidActionsScaleWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3ProcessesGuidActionsScaleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ProcessesGuidActionsScaleResponse, error)

	// DeleteV3ProcessesGuidInstancesIndexWithResponse request
	DeleteV3ProcessesGuidInstancesIndexWithResponse(ctx context.Context, guid openapi_types.UUID, index int, reqEditors ...RequestEditorFn) (*DeleteV3ProcessesGuidInstancesIndexResponse, error)

	// GetV3ProcessesGuidSidecarsWithResponse request
	GetV3ProcessesGuidSidecarsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3ProcessesGuidSidecarsParams, reqEditors ...RequestEditorFn) (*GetV3ProcessesGuidSidecarsResponse, error)

	// GetV3ProcessesGuidStatsWithResponse request
	GetV3ProcessesGuidStatsWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3ProcessesGuidStatsResponse, error)

	// PostV3ResourceMatchesWithBodyWithResponse request with any body
	PostV3ResourceMatchesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ResourceMatchesResponse, error)

	PostV3ResourceMatchesWithResponse(ctx context.Context, body PostV3ResourceMatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ResourceMatchesResponse, error)

	// GetV3RevisionsGuidWithResponse request
	GetV3RevisionsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3RevisionsGuidResponse, error)

	// PatchV3RevisionsGuidWithBodyWithResponse request with any body
	PatchV3RevisionsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3RevisionsGuidResponse, error)

	PatchV3RevisionsGuidWithResponse(ctx context.Context, guid string, body PatchV3RevisionsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3RevisionsGuidResponse, error)

	// GetV3RevisionsGuidEnvironmentVariablesWithResponse request
	GetV3RevisionsGuidEnvironmentVariablesWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3RevisionsGuidEnvironmentVariablesResponse, error)

	// GetV3RolesWithResponse request
	GetV3RolesWithResponse(ctx context.Context, params *GetV3RolesParams, reqEditors ...RequestEditorFn) (*GetV3RolesResponse, error)

	// PostV3RolesWithBodyWithResponse request with any body
	PostV3RolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3RolesResponse, error)

	PostV3RolesWithResponse(ctx context.Context, body PostV3RolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3RolesResponse, error)

	// DeleteV3RolesGuidWithResponse request
	DeleteV3RolesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3RolesGuidResponse, error)

	// GetV3RolesGuidWithResponse request
	GetV3RolesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3RolesGuidParams, reqEditors ...RequestEditorFn) (*GetV3RolesGuidResponse, error)

	// GetV3RoutesWithResponse request
	GetV3RoutesWithResponse(ctx context.Context, params *GetV3RoutesParams, reqEditors ...RequestEditorFn) (*GetV3RoutesResponse, error)

	// PostV3RoutesWithBodyWithResponse request with any body
	PostV3RoutesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3RoutesResponse, error)

	PostV3RoutesWithResponse(ctx context.Context, body PostV3RoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3RoutesResponse, error)

	// DeleteV3RoutesGuidWithResponse request
	DeleteV3RoutesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3RoutesGuidResponse, error)

	// GetV3RoutesGuidWithResponse request
	GetV3RoutesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3RoutesGuidParams, reqEditors ...RequestEditorFn) (*GetV3RoutesGuidResponse, error)

	// PatchV3RoutesGuidWithBodyWithResponse request with any body
	PatchV3RoutesGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidResponse, error)

	PatchV3RoutesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidResponse, error)

	// GetV3RoutesGuidDestinationsWithResponse request
	GetV3RoutesGuidDestinationsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3RoutesGuidDestinationsParams, reqEditors ...RequestEditorFn) (*GetV3RoutesGuidDestinationsResponse, error)

	// PatchV3RoutesGuidDestinationsWithBodyWithResponse request with any body
	PatchV3RoutesGuidDestinationsWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidDestinationsResponse, error)

	PatchV3RoutesGuidDestinationsWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidDestinationsResponse, error)

	// PostV3RoutesGuidDestinationsWithBodyWithResponse request with any body
	PostV3RoutesGuidDestinationsWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3RoutesGuidDestinationsResponse, error)

	PostV3RoutesGuidDestinationsWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3RoutesGuidDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3RoutesGuidDestinationsResponse, error)

	// DeleteV3RoutesGuidDestinationsDestinationGuidWithResponse request
	DeleteV3RoutesGuidDestinationsDestinationGuidWithResponse(ctx context.Context, guid openapi_types.UUID, destinationGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3RoutesGuidDestinationsDestinationGuidResponse, error)

	// GetV3RoutesGuidRelationshipsSharedSpacesWithResponse request
	GetV3RoutesGuidRelationshipsSharedSpacesWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3RoutesGuidRelationshipsSharedSpacesResponse, error)

	// PatchV3RoutesGuidRelationshipsSpaceWithBodyWithResponse request with any body
	PatchV3RoutesGuidRelationshipsSpaceWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidRelationshipsSpaceResponse, error)

	PatchV3RoutesGuidRelationshipsSpaceWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidRelationshipsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidRelationshipsSpaceResponse, error)

	// PostV3RoutesGuidTransferOwnerWithBodyWithResponse request with any body
	PostV3RoutesGuidTransferOwnerWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3RoutesGuidTransferOwnerResponse, error)

	PostV3RoutesGuidTransferOwnerWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3RoutesGuidTransferOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3RoutesGuidTransferOwnerResponse, error)

	// GetV3SecurityGroupsWithResponse request
	GetV3SecurityGroupsWithResponse(ctx context.Context, params *GetV3SecurityGroupsParams, reqEditors ...RequestEditorFn) (*GetV3SecurityGroupsResponse, error)

	// PostV3SecurityGroupsWithBodyWithResponse request with any body
	PostV3SecurityGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsResponse, error)

	PostV3SecurityGroupsWithResponse(ctx context.Context, body PostV3SecurityGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsResponse, error)

	// DeleteV3SecurityGroupsGuidWithResponse request
	DeleteV3SecurityGroupsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SecurityGroupsGuidResponse, error)

	// GetV3SecurityGroupsGuidWithResponse request
	GetV3SecurityGroupsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3SecurityGroupsGuidResponse, error)

	// PatchV3SecurityGroupsGuidWithBodyWithResponse request with any body
	PatchV3SecurityGroupsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SecurityGroupsGuidResponse, error)

	PatchV3SecurityGroupsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3SecurityGroupsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SecurityGroupsGuidResponse, error)

	// PostV3SecurityGroupsGuidRelationshipsRunningSpacesWithBodyWithResponse request with any body
	PostV3SecurityGroupsGuidRelationshipsRunningSpacesWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse, error)

	PostV3SecurityGroupsGuidRelationshipsRunningSpacesWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3SecurityGroupsGuidRelationshipsRunningSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse, error)

	// DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidWithResponse request
	DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidWithResponse(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidResponse, error)

	// PostV3SecurityGroupsGuidRelationshipsStagingSpacesWithBodyWithResponse request with any body
	PostV3SecurityGroupsGuidRelationshipsStagingSpacesWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse, error)

	PostV3SecurityGroupsGuidRelationshipsStagingSpacesWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3SecurityGroupsGuidRelationshipsStagingSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse, error)

	// DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidWithResponse request
	DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidWithResponse(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidResponse, error)

	// GetV3ServiceBrokersWithResponse request
	GetV3ServiceBrokersWithResponse(ctx context.Context, params *GetV3ServiceBrokersParams, reqEditors ...RequestEditorFn) (*GetV3ServiceBrokersResponse, error)

	// PostV3ServiceBrokersWithBodyWithResponse request with any body
	PostV3ServiceBrokersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServiceBrokersResponse, error)

	PostV3ServiceBrokersWithResponse(ctx context.Context, body PostV3ServiceBrokersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServiceBrokersResponse, error)

	// DeleteV3ServiceBrokersGuidWithResponse request
	DeleteV3ServiceBrokersGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3ServiceBrokersGuidResponse, error)

	// GetV3ServiceBrokersGuidWithResponse request
	GetV3ServiceBrokersGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceBrokersGuidResponse, error)

	// PatchV3ServiceBrokersGuidWithBodyWithResponse request with any body
	PatchV3ServiceBrokersGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServiceBrokersGuidResponse, error)

	PatchV3ServiceBrokersGuidWithResponse(ctx context.Context, guid string, body PatchV3ServiceBrokersGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServiceBrokersGuidResponse, error)

	// PostV3ServiceBrokersGuidCatalogWithResponse request
	PostV3ServiceBrokersGuidCatalogWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*PostV3ServiceBrokersGuidCatalogResponse, error)

	// GetV3ServiceBrokersGuidJobsSynchronizationWithResponse request
	GetV3ServiceBrokersGuidJobsSynchronizationWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceBrokersGuidJobsSynchronizationResponse, error)

	// PostV3ServiceCredentialBindingsWithBodyWithResponse request with any body
	PostV3ServiceCredentialBindingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServiceCredentialBindingsResponse, error)

	PostV3ServiceCredentialBindingsWithResponse(ctx context.Context, body PostV3ServiceCredentialBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServiceCredentialBindingsResponse, error)

	// DeleteV3ServiceCredentialBindingsGuidWithResponse request
	DeleteV3ServiceCredentialBindingsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3ServiceCredentialBindingsGuidResponse, error)

	// GetV3ServiceCredentialBindingsGuidWithResponse request
	GetV3ServiceCredentialBindingsGuidWithResponse(ctx context.Context, guid string, params *GetV3ServiceCredentialBindingsGuidParams, reqEditors ...RequestEditorFn) (*GetV3ServiceCredentialBindingsGuidResponse, error)

	// PatchV3ServiceCredentialBindingsGuidWithBodyWithResponse request with any body
	PatchV3ServiceCredentialBindingsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServiceCredentialBindingsGuidResponse, error)

	PatchV3ServiceCredentialBindingsGuidWithResponse(ctx context.Context, guid string, body PatchV3ServiceCredentialBindingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServiceCredentialBindingsGuidResponse, error)

	// GetV3ServiceCredentialBindingsGuidDetailsWithResponse request
	GetV3ServiceCredentialBindingsGuidDetailsWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceCredentialBindingsGuidDetailsResponse, error)

	// GetV3ServiceCredentialBindingsGuidParametersWithResponse request
	GetV3ServiceCredentialBindingsGuidParametersWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceCredentialBindingsGuidParametersResponse, error)

	// GetV3ServiceInstancesWithResponse request
	GetV3ServiceInstancesWithResponse(ctx context.Context, params *GetV3ServiceInstancesParams, reqEditors ...RequestEditorFn) (*GetV3ServiceInstancesResponse, error)

	// DeleteV3ServiceInstancesGuidWithResponse request
	DeleteV3ServiceInstancesGuidWithResponse(ctx context.Context, guid string, params *DeleteV3ServiceInstancesGuidParams, reqEditors ...RequestEditorFn) (*DeleteV3ServiceInstancesGuidResponse, error)

	// PatchV3ServiceInstancesGuidWithBodyWithResponse request with any body
	PatchV3ServiceInstancesGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServiceInstancesGuidResponse, error)

	PatchV3ServiceInstancesGuidWithResponse(ctx context.Context, guid string, body PatchV3ServiceInstancesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServiceInstancesGuidResponse, error)

	// GetV3ServiceInstancesGuidCredentialsWithResponse request
	GetV3ServiceInstancesGuidCredentialsWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceInstancesGuidCredentialsResponse, error)

	// GetV3ServiceInstancesGuidRelationshipsSharedSpacesWithResponse request
	GetV3ServiceInstancesGuidRelationshipsSharedSpacesWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceInstancesGuidRelationshipsSharedSpacesResponse, error)

	// PostV3ServiceInstancesGuidRelationshipsSharedSpacesWithBodyWithResponse request with any body
	PostV3ServiceInstancesGuidRelationshipsSharedSpacesWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse, error)

	PostV3ServiceInstancesGuidRelationshipsSharedSpacesWithResponse(ctx context.Context, guid string, body PostV3ServiceInstancesGuidRelationshipsSharedSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse, error)

	// GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryWithResponse request
	GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryResponse, error)

	// DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidWithResponse request
	DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidWithResponse(ctx context.Context, guid string, spaceGuid string, reqEditors ...RequestEditorFn) (*DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidResponse, error)

	// GetV3ServiceOfferingsWithResponse request
	GetV3ServiceOfferingsWithResponse(ctx context.Context, params *GetV3ServiceOfferingsParams, reqEditors ...RequestEditorFn) (*GetV3ServiceOfferingsResponse, error)

	// PostV3ServiceOfferingsWithBodyWithResponse request with any body
	PostV3ServiceOfferingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServiceOfferingsResponse, error)

	PostV3ServiceOfferingsWithResponse(ctx context.Context, body PostV3ServiceOfferingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServiceOfferingsResponse, error)

	// DeleteV3ServiceOfferingsGuidWithResponse request
	DeleteV3ServiceOfferingsGuidWithResponse(ctx context.Context, guid string, params *DeleteV3ServiceOfferingsGuidParams, reqEditors ...RequestEditorFn) (*DeleteV3ServiceOfferingsGuidResponse, error)

	// GetV3ServiceOfferingsGuidWithResponse request
	GetV3ServiceOfferingsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceOfferingsGuidResponse, error)

	// PatchV3ServiceOfferingsGuidWithBodyWithResponse request with any body
	PatchV3ServiceOfferingsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServiceOfferingsGuidResponse, error)

	PatchV3ServiceOfferingsGuidWithResponse(ctx context.Context, guid string, body PatchV3ServiceOfferingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServiceOfferingsGuidResponse, error)

	// GetV3ServicePlansWithResponse request
	GetV3ServicePlansWithResponse(ctx context.Context, params *GetV3ServicePlansParams, reqEditors ...RequestEditorFn) (*GetV3ServicePlansResponse, error)

	// PostV3ServicePlansWithBodyWithResponse request with any body
	PostV3ServicePlansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServicePlansResponse, error)

	PostV3ServicePlansWithResponse(ctx context.Context, body PostV3ServicePlansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServicePlansResponse, error)

	// DeleteV3ServicePlansGuidWithResponse request
	DeleteV3ServicePlansGuidWithResponse(ctx context.Context, guid string, params *DeleteV3ServicePlansGuidParams, reqEditors ...RequestEditorFn) (*DeleteV3ServicePlansGuidResponse, error)

	// GetV3ServicePlansGuidWithResponse request
	GetV3ServicePlansGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServicePlansGuidResponse, error)

	// PatchV3ServicePlansGuidWithBodyWithResponse request with any body
	PatchV3ServicePlansGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServicePlansGuidResponse, error)

	PatchV3ServicePlansGuidWithResponse(ctx context.Context, guid string, body PatchV3ServicePlansGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServicePlansGuidResponse, error)

	// GetV3ServicePlansGuidVisibilityWithResponse request
	GetV3ServicePlansGuidVisibilityWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3ServicePlansGuidVisibilityResponse, error)

	// PatchV3ServicePlansGuidVisibilityWithBodyWithResponse request with any body
	PatchV3ServicePlansGuidVisibilityWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServicePlansGuidVisibilityResponse, error)

	PatchV3ServicePlansGuidVisibilityWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3ServicePlansGuidVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServicePlansGuidVisibilityResponse, error)

	// PostV3ServicePlansGuidVisibilityWithBodyWithResponse request with any body
	PostV3ServicePlansGuidVisibilityWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServicePlansGuidVisibilityResponse, error)

	PostV3ServicePlansGuidVisibilityWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3ServicePlansGuidVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServicePlansGuidVisibilityResponse, error)

	// DeleteV3ServicePlansGuidVisibilityOrganizationGuidWithResponse request
	DeleteV3ServicePlansGuidVisibilityOrganizationGuidWithResponse(ctx context.Context, guid openapi_types.UUID, organizationGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3ServicePlansGuidVisibilityOrganizationGuidResponse, error)

	// GetV3ServiceRouteBindingsWithResponse request
	GetV3ServiceRouteBindingsWithResponse(ctx context.Context, params *GetV3ServiceRouteBindingsParams, reqEditors ...RequestEditorFn) (*GetV3ServiceRouteBindingsResponse, error)

	// PostV3ServiceRouteBindingsWithBodyWithResponse request with any body
	PostV3ServiceRouteBindingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServiceRouteBindingsResponse, error)

	PostV3ServiceRouteBindingsWithResponse(ctx context.Context, body PostV3ServiceRouteBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServiceRouteBindingsResponse, error)

	// DeleteV3ServiceRouteBindingsGuidWithResponse request
	DeleteV3ServiceRouteBindingsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3ServiceRouteBindingsGuidResponse, error)

	// GetV3ServiceRouteBindingsGuidWithResponse request
	GetV3ServiceRouteBindingsGuidWithResponse(ctx context.Context, guid string, params *GetV3ServiceRouteBindingsGuidParams, reqEditors ...RequestEditorFn) (*GetV3ServiceRouteBindingsGuidResponse, error)

	// PatchV3ServiceRouteBindingsGuidWithBodyWithResponse request with any body
	PatchV3ServiceRouteBindingsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServiceRouteBindingsGuidResponse, error)

	PatchV3ServiceRouteBindingsGuidWithResponse(ctx context.Context, guid string, body PatchV3ServiceRouteBindingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServiceRouteBindingsGuidResponse, error)

	// GetV3ServiceRouteBindingsGuidParametersWithResponse request
	GetV3ServiceRouteBindingsGuidParametersWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceRouteBindingsGuidParametersResponse, error)

	// GetV3ServiceUsageEventsWithResponse request
	GetV3ServiceUsageEventsWithResponse(ctx context.Context, params *GetV3ServiceUsageEventsParams, reqEditors ...RequestEditorFn) (*GetV3ServiceUsageEventsResponse, error)

	// PostV3ServiceUsageEventsWithResponse request
	PostV3ServiceUsageEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV3ServiceUsageEventsResponse, error)

	// GetV3ServiceUsageEventsGuidWithResponse request
	GetV3ServiceUsageEventsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceUsageEventsGuidResponse, error)

	// DeleteV3SidecarsGuidWithResponse request
	DeleteV3SidecarsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SidecarsGuidResponse, error)

	// GetV3SidecarsGuidWithResponse request
	GetV3SidecarsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3SidecarsGuidResponse, error)

	// PatchV3SidecarsGuidWithBodyWithResponse request with any body
	PatchV3SidecarsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SidecarsGuidResponse, error)

	PatchV3SidecarsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3SidecarsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SidecarsGuidResponse, error)

	// GetV3SidecarsGuidProcessesWithResponse request
	GetV3SidecarsGuidProcessesWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3SidecarsGuidProcessesParams, reqEditors ...RequestEditorFn) (*GetV3SidecarsGuidProcessesResponse, error)

	// GetV3SpaceQuotasWithResponse request
	GetV3SpaceQuotasWithResponse(ctx context.Context, params *GetV3SpaceQuotasParams, reqEditors ...RequestEditorFn) (*GetV3SpaceQuotasResponse, error)

	// PostV3SpaceQuotasWithBodyWithResponse request with any body
	PostV3SpaceQuotasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SpaceQuotasResponse, error)

	PostV3SpaceQuotasWithResponse(ctx context.Context, body PostV3SpaceQuotasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SpaceQuotasResponse, error)

	// DeleteV3SpaceQuotasGuidWithResponse request
	DeleteV3SpaceQuotasGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SpaceQuotasGuidResponse, error)

	// GetV3SpaceQuotasGuidWithResponse request
	GetV3SpaceQuotasGuidWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3SpaceQuotasGuidParams, reqEditors ...RequestEditorFn) (*GetV3SpaceQuotasGuidResponse, error)

	// PatchV3SpaceQuotasGuidWithBodyWithResponse request with any body
	PatchV3SpaceQuotasGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SpaceQuotasGuidResponse, error)

	PatchV3SpaceQuotasGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3SpaceQuotasGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SpaceQuotasGuidResponse, error)

	// PostV3SpaceQuotasGuidRelationshipsSpacesWithBodyWithResponse request with any body
	PostV3SpaceQuotasGuidRelationshipsSpacesWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SpaceQuotasGuidRelationshipsSpacesResponse, error)

	PostV3SpaceQuotasGuidRelationshipsSpacesWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3SpaceQuotasGuidRelationshipsSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SpaceQuotasGuidRelationshipsSpacesResponse, error)

	// DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidWithResponse request
	DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidWithResponse(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidResponse, error)

	// GetV3SpacesWithResponse request
	GetV3SpacesWithResponse(ctx context.Context, params *GetV3SpacesParams, reqEditors ...RequestEditorFn) (*GetV3SpacesResponse, error)

	// PostV3SpacesWithBodyWithResponse request with any body
	PostV3SpacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SpacesResponse, error)

	PostV3SpacesWithResponse(ctx context.Context, body PostV3SpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SpacesResponse, error)

	// DeleteV3SpacesGuidWithResponse request
	DeleteV3SpacesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3SpacesGuidResponse, error)

	// GetV3SpacesGuidWithResponse request
	GetV3SpacesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidResponse, error)

	// PatchV3SpacesGuidWithBodyWithResponse request with any body
	PatchV3SpacesGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidResponse, error)

	PatchV3SpacesGuidWithResponse(ctx context.Context, guid string, body PatchV3SpacesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidResponse, error)

	// GetV3SpacesGuidFeaturesWithResponse request
	GetV3SpacesGuidFeaturesWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidFeaturesResponse, error)

	// GetV3SpacesGuidFeaturesNameWithResponse request
	GetV3SpacesGuidFeaturesNameWithResponse(ctx context.Context, guid openapi_types.UUID, name GetV3SpacesGuidFeaturesNameParamsName, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidFeaturesNameResponse, error)

	// PatchV3SpacesGuidFeaturesNameWithBodyWithResponse request with any body
	PatchV3SpacesGuidFeaturesNameWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, name PatchV3SpacesGuidFeaturesNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidFeaturesNameResponse, error)

	PatchV3SpacesGuidFeaturesNameWithResponse(ctx context.Context, guid openapi_types.UUID, name PatchV3SpacesGuidFeaturesNameParamsName, body PatchV3SpacesGuidFeaturesNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidFeaturesNameResponse, error)

	// PostV3SpacesGuidManifestWithBodyWithResponse request with any body
	PostV3SpacesGuidManifestWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SpacesGuidManifestResponse, error)

	// PostV3SpacesGuidManifestDiffWithBodyWithResponse request with any body
	PostV3SpacesGuidManifestDiffWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SpacesGuidManifestDiffResponse, error)

	// GetV3SpacesGuidRelationshipsIsolationSegmentWithResponse request
	GetV3SpacesGuidRelationshipsIsolationSegmentWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidRelationshipsIsolationSegmentResponse, error)

	// PatchV3SpacesGuidRelationshipsIsolationSegmentWithBodyWithResponse request with any body
	PatchV3SpacesGuidRelationshipsIsolationSegmentWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidRelationshipsIsolationSegmentResponse, error)

	PatchV3SpacesGuidRelationshipsIsolationSegmentWithResponse(ctx context.Context, guid string, body PatchV3SpacesGuidRelationshipsIsolationSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidRelationshipsIsolationSegmentResponse, error)

	// GetV3SpacesGuidRunningSecurityGroupsWithResponse request
	GetV3SpacesGuidRunningSecurityGroupsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3SpacesGuidRunningSecurityGroupsParams, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidRunningSecurityGroupsResponse, error)

	// GetV3SpacesGuidStagingSecurityGroupsWithResponse request
	GetV3SpacesGuidStagingSecurityGroupsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3SpacesGuidStagingSecurityGroupsParams, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidStagingSecurityGroupsResponse, error)

	// GetV3SpacesGuidUsersWithResponse request
	GetV3SpacesGuidUsersWithResponse(ctx context.Context, guid string, params *GetV3SpacesGuidUsersParams, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidUsersResponse, error)

	// GetV3StacksWithResponse request
	GetV3StacksWithResponse(ctx context.Context, params *GetV3StacksParams, reqEditors ...RequestEditorFn) (*GetV3StacksResponse, error)

	// PostV3StacksWithBodyWithResponse request with any body
	PostV3StacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3StacksResponse, error)

	PostV3StacksWithResponse(ctx context.Context, body PostV3StacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3StacksResponse, error)

	// DeleteV3StacksGuidWithResponse request
	DeleteV3StacksGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3StacksGuidResponse, error)

	// GetV3StacksGuidWithResponse request
	GetV3StacksGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3StacksGuidResponse, error)

	// PatchV3StacksGuidWithBodyWithResponse request with any body
	PatchV3StacksGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3StacksGuidResponse, error)

	PatchV3StacksGuidWithResponse(ctx context.Context, guid string, body PatchV3StacksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3StacksGuidResponse, error)

	// GetV3StacksGuidAppsWithResponse request
	GetV3StacksGuidAppsWithResponse(ctx context.Context, guid string, params *GetV3StacksGuidAppsParams, reqEditors ...RequestEditorFn) (*GetV3StacksGuidAppsResponse, error)

	// GetV3TasksWithResponse request
	GetV3TasksWithResponse(ctx context.Context, params *GetV3TasksParams, reqEditors ...RequestEditorFn) (*GetV3TasksResponse, error)

	// GetV3TasksGuidWithResponse request
	GetV3TasksGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3TasksGuidResponse, error)

	// PatchV3TasksGuidWithBodyWithResponse request with any body
	PatchV3TasksGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3TasksGuidResponse, error)

	PatchV3TasksGuidWithResponse(ctx context.Context, guid string, body PatchV3TasksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3TasksGuidResponse, error)

	// PostV3TasksGuidWithResponse request
	PostV3TasksGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*PostV3TasksGuidResponse, error)

	// GetV3UsersWithResponse request
	GetV3UsersWithResponse(ctx context.Context, params *GetV3UsersParams, reqEditors ...RequestEditorFn) (*GetV3UsersResponse, error)

	// PostV3UsersWithBodyWithResponse request with any body
	PostV3UsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3UsersResponse, error)

	PostV3UsersWithResponse(ctx context.Context, body PostV3UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3UsersResponse, error)

	// DeleteV3UsersGuidWithResponse request
	DeleteV3UsersGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3UsersGuidResponse, error)

	// GetV3UsersGuidWithResponse request
	GetV3UsersGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3UsersGuidResponse, error)

	// PatchV3UsersGuidWithBodyWithResponse request with any body
	PatchV3UsersGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3UsersGuidResponse, error)

	PatchV3UsersGuidWithResponse(ctx context.Context, guid string, body PatchV3UsersGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3UsersGuidResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			AppSsh *struct {
				Href *string `json:"href,omitempty"`
				Meta *struct {
					HostKeyFingerprint *string `json:"host_key_fingerprint,omitempty"`
					OauthClient        *string `json:"oauth_client,omitempty"`
				} `json:"meta,omitempty"`
			} `json:"app_ssh,omitempty"`
			CloudControllerV2 *struct {
				Href *string `json:"href,omitempty"`
				Meta *struct {
					Version *string `json:"version,omitempty"`
				} `json:"meta,omitempty"`
			} `json:"cloud_controller_v2,omitempty"`
			CloudControllerV3 *struct {
				Href *string `json:"href,omitempty"`
				Meta *struct {
					Version *string `json:"version,omitempty"`
				} `json:"meta,omitempty"`
			} `json:"cloud_controller_v3,omitempty"`
			Credhub  *map[string]interface{} `json:"credhub"`
			LogCache *struct {
				Href *string `json:"href,omitempty"`
			} `json:"log_cache,omitempty"`
			LogStream *struct {
				Href *string `json:"href,omitempty"`
			} `json:"log_stream,omitempty"`
			Logging *struct {
				Href *string `json:"href,omitempty"`
			} `json:"logging,omitempty"`
			Login *struct {
				Href *string `json:"href,omitempty"`
			} `json:"login,omitempty"`
			NetworkPolicyV0 *struct {
				Href *string `json:"href,omitempty"`
			} `json:"network_policy_v0,omitempty"`
			NetworkPolicyV1 *struct {
				Href *string `json:"href,omitempty"`
			} `json:"network_policy_v1,omitempty"`
			Routing *struct {
				Href *string `json:"href,omitempty"`
			} `json:"routing,omitempty"`
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
			Uaa *struct {
				Href *string `json:"href,omitempty"`
			} `json:"uaa,omitempty"`
		} `json:"links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			AppUsageEvents *struct {
				Href *string `json:"href,omitempty"`
			} `json:"app_usage_events,omitempty"`
			Apps *struct {
				Href *string `json:"href,omitempty"`
			} `json:"apps,omitempty"`
			AuditEvents *struct {
				Href *string `json:"href,omitempty"`
			} `json:"audit_events,omitempty"`
			Buildpacks *struct {
				Href *string `json:"href,omitempty"`
			} `json:"buildpacks,omitempty"`
			Builds *struct {
				Href *string `json:"href,omitempty"`
			} `json:"builds,omitempty"`
			Deployments *struct {
				Href *string `json:"href,omitempty"`
			} `json:"deployments,omitempty"`
			Domains *struct {
				Href *string `json:"href,omitempty"`
			} `json:"domains,omitempty"`
			Droplets *struct {
				Href *string `json:"href,omitempty"`
			} `json:"droplets,omitempty"`
			EnvironmentVariableGroups *struct {
				Href *string `json:"href,omitempty"`
			} `json:"environment_variable_groups,omitempty"`
			FeatureFlags *struct {
				Href *string `json:"href,omitempty"`
			} `json:"feature_flags,omitempty"`
			Info *struct {
				Href *string `json:"href,omitempty"`
			} `json:"info,omitempty"`
			IsolationSegments *struct {
				Href *string `json:"href,omitempty"`
			} `json:"isolation_segments,omitempty"`
			OrganizationQuotas *struct {
				Href *string `json:"href,omitempty"`
			} `json:"organization_quotas,omitempty"`
			Organizations *struct {
				Href *string `json:"href,omitempty"`
			} `json:"organizations,omitempty"`
			Packages *struct {
				Href *string `json:"href,omitempty"`
			} `json:"packages,omitempty"`
			Processes *struct {
				Href *string `json:"href,omitempty"`
			} `json:"processes,omitempty"`
			ResourceMatches *struct {
				Href *string `json:"href,omitempty"`
			} `json:"resource_matches,omitempty"`
			Roles *struct {
				Href *string `json:"href,omitempty"`
			} `json:"roles,omitempty"`
			Routes *struct {
				Href *string `json:"href,omitempty"`
			} `json:"routes,omitempty"`
			SecurityGroups *struct {
				Href *string `json:"href,omitempty"`
			} `json:"security_groups,omitempty"`
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
			ServiceBrokers *struct {
				Href *string `json:"href,omitempty"`
			} `json:"service_brokers,omitempty"`
			ServiceInstances *struct {
				Href *string `json:"href,omitempty"`
			} `json:"service_instances"`
			ServiceOfferings *struct {
				Href *string `json:"href,omitempty"`
			} `json:"service_offerings,omitempty"`
			ServicePlans *struct {
				Href *string `json:"href,omitempty"`
			} `json:"service_plans,omitempty"`
			ServiceUsageEvents *struct {
				Href *string `json:"href,omitempty"`
			} `json:"service_usage_events,omitempty"`
			SpaceQuotas *struct {
				Href *string `json:"href,omitempty"`
			} `json:"space_quotas,omitempty"`
			Spaces *struct {
				Href *string `json:"href,omitempty"`
			} `json:"spaces,omitempty"`
			Stacks *struct {
				Href *string `json:"href,omitempty"`
			} `json:"stacks,omitempty"`
			Tasks *struct {
				Href *string `json:"href,omitempty"`
			} `json:"tasks,omitempty"`
			Users *struct {
				Href *string `json:"href,omitempty"`
			} `json:"users,omitempty"`
		} `json:"links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3AdminActionsClearBuildpackCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Job
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostV3AdminActionsClearBuildpackCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3AdminActionsClearBuildpackCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppUsageEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppUsageEventList
}

// Status returns HTTPResponse.Status
func (r GetV3AppUsageEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppUsageEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppUsageEventsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppUsageEvent
}

// Status returns HTTPResponse.Status
func (r GetV3AppUsageEventsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppUsageEventsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Included *struct {
			Organizations *[]Organization `json:"organizations,omitempty"`
			Spaces        *[]Space        `json:"spaces,omitempty"`
		} `json:"included,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]App      `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ListAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *App
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r CreateAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *App
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *App
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3AppsGuidActionsApplyManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Guid  *openapi_types.UUID `json:"guid,omitempty"`
		Links *struct {
			Job *struct {
				Href *string `json:"href,omitempty"`
			} `json:"job,omitempty"`
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
	JSON400 *BadRequestError
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
	JSON422 *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PostV3AppsGuidActionsApplyManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3AppsGuidActionsApplyManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClearAppBuildpackCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r ClearAppBuildpackCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClearAppBuildpackCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *App
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r RestartAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *App
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r StartAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *App
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r StopAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidBuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Build    `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSON404     *NotFound
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidBuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidBuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidDropletsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Droplet  `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidDropletsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidDropletsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppEnvironmentVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *struct {
			App  *Link `json:"app,omitempty"`
			Self *Link `json:"self,omitempty"`
		} `json:"links,omitempty"`

		// Var User-provided environment variables
		Var *map[string]string `json:"var,omitempty"`
	}
	JSON401     *Unauthorized
	JSON404     *NotFound
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetAppEnvironmentVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppEnvironmentVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAppEnvironmentVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Links *map[string]interface{} `json:"links,omitempty"`
		Var   *map[string]string      `json:"var,omitempty"`
	}
	JSON401     *Unauthorized
	JSON403     *Forbidden
	JSON404     *NotFound
	JSON422     *UnprocessableEntity
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r UpdateAppEnvironmentVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAppEnvironmentVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Resources []AppFeature `json:"resources"`
	}
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidFeaturesNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppFeature
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidFeaturesNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidFeaturesNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3AppsGuidFeaturesNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppFeature
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PatchV3AppsGuidFeaturesNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3AppsGuidFeaturesNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *string
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3AppsGuidManifestDiffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Diff *[]struct {
			Op    *PostV3AppsGuidManifestDiff200DiffOp `json:"op,omitempty"`
			Path  *string                              `json:"path,omitempty"`
			Value *map[string]interface{}              `json:"value,omitempty"`
		} `json:"diff,omitempty"`
	}
	JSON401     *Unauthorized
	JSON404     *NotFound
	JSON422     *UnprocessableEntity
	JSONDefault *UnexpectedError
}
type PostV3AppsGuidManifestDiff200DiffOp string

// Status returns HTTPResponse.Status
func (r PostV3AppsGuidManifestDiffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3AppsGuidManifestDiffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidPackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Package  `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSON404     *NotFound
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidPackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidPackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Read  *bool `json:"read,omitempty"`
		Write *bool `json:"write,omitempty"`
	}
	JSON401     *Unauthorized
	JSON404     *NotFound
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetAppPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidProcessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Process  `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSON404     *NotFound
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidProcessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidProcessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidProcessesTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Process
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidProcessesTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidProcessesTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidRelationshipsCurrentDropletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Guid *openapi_types.UUID `json:"guid,omitempty"`
		} `json:"data"`
		Links *struct {
			Related *struct {
				Href *string `json:"href,omitempty"`
			} `json:"related,omitempty"`
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidRelationshipsCurrentDropletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidRelationshipsCurrentDropletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3AppsGuidRelationshipsCurrentDropletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Guid *openapi_types.UUID `json:"guid,omitempty"`
		} `json:"data,omitempty"`
		Links *struct {
			Related *struct {
				Href *string `json:"href,omitempty"`
			} `json:"related,omitempty"`
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r PatchV3AppsGuidRelationshipsCurrentDropletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3AppsGuidRelationshipsCurrentDropletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidRevisionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RevisionsList
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidRevisionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidRevisionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidRevisionsDeployedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RevisionsList
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidRevisionsDeployedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidRevisionsDeployedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AppsGuidSidecarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination Pagination `json:"pagination"`
		Resources  []Sidecar  `json:"resources"`
	}
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3AppsGuidSidecarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AppsGuidSidecarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3AppsGuidSidecarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Sidecar
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PostV3AppsGuidSidecarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3AppsGuidSidecarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppSshEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Enabled *bool   `json:"enabled,omitempty"`
		Reason  *string `json:"reason"`
	}
	JSON401     *Unauthorized
	JSON404     *NotFound
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetAppSshEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppSshEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3AppsGuidTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Task
}

// Status returns HTTPResponse.Status
func (r PostV3AppsGuidTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3AppsGuidTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AuditEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuditEventList
}

// Status returns HTTPResponse.Status
func (r GetV3AuditEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AuditEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3AuditEventsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuditEvent
}

// Status returns HTTPResponse.Status
func (r GetV3AuditEventsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3AuditEventsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3BuildpacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination  `json:"pagination,omitempty"`
		Resources  *[]Buildpack `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3BuildpacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3BuildpacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3BuildpacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Buildpack
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3BuildpacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3BuildpacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3BuildpacksGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteV3BuildpacksGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3BuildpacksGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3BuildpacksGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Buildpack
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3BuildpacksGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3BuildpacksGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3BuildpacksGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Buildpack
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchV3BuildpacksGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3BuildpacksGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3BuildpacksGuidUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Job
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3BuildpacksGuidUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3BuildpacksGuidUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3BuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Build    `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3BuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3BuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3BuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Build
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3BuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3BuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3BuildsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Build
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3BuildsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3BuildsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3BuildsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Build
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchV3BuildsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3BuildsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3DeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination   `json:"pagination,omitempty"`
		Resources  *[]Deployment `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3DeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3DeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3DeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Deployment
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3DeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3DeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3DeploymentsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deployment
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3DeploymentsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3DeploymentsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3DeploymentsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deployment
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchV3DeploymentsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3DeploymentsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3DeploymentsGuidActionsCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deployment
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3DeploymentsGuidActionsCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3DeploymentsGuidActionsCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3DeploymentsGuidActionsContinueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deployment
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3DeploymentsGuidActionsContinueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3DeploymentsGuidActionsContinueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3DomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			First *struct {
				Href *string `json:"href,omitempty"`
			} `json:"first,omitempty"`
			Last *struct {
				Href *string `json:"href,omitempty"`
			} `json:"last,omitempty"`
			Next *struct {
				Href *string `json:"href,omitempty"`
			} `json:"next,omitempty"`
			Previous *struct {
				Href *string `json:"href,omitempty"`
			} `json:"previous,omitempty"`
			TotalPages   *int `json:"total_pages,omitempty"`
			TotalResults *int `json:"total_results,omitempty"`
		} `json:"pagination,omitempty"`
		Resources *[]Domain `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3DomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3DomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3DomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Domain
}

// Status returns HTTPResponse.Status
func (r PostV3DomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3DomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3DomainsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3DomainsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3DomainsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3DomainsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r GetV3DomainsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3DomainsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3DomainsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r PatchV3DomainsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3DomainsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3DomainsGuidRelationshipsSharedOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]Organization `json:"data,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV3DomainsGuidRelationshipsSharedOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3DomainsGuidRelationshipsSharedOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3DropletsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Droplet  `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3DropletsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3DropletsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3DropletsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Droplet
}

// Status returns HTTPResponse.Status
func (r PostV3DropletsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3DropletsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3DropletsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3DropletsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3DropletsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3DropletsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Droplet
}

// Status returns HTTPResponse.Status
func (r GetV3DropletsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3DropletsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3DropletsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Droplet
}

// Status returns HTTPResponse.Status
func (r PatchV3DropletsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3DropletsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3EnvironmentVariableGroupsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentVariableGroup
	JSON401      *UnauthorizedError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3EnvironmentVariableGroupsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3EnvironmentVariableGroupsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3EnvironmentVariableGroupsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentVariableGroup
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PatchV3EnvironmentVariableGroupsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3EnvironmentVariableGroupsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3FeatureFlagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination Pagination    `json:"pagination"`
		Resources  []FeatureFlag `json:"resources"`
	}
	JSON401 *UnauthorizedError
}

// Status returns HTTPResponse.Status
func (r GetV3FeatureFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3FeatureFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3FeatureFlagsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureFlag
	JSON401      *UnauthorizedError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3FeatureFlagsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3FeatureFlagsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3FeatureFlagsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureFlag
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PatchV3FeatureFlagsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3FeatureFlagsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3InfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformInfo
}

// Status returns HTTPResponse.Status
func (r GetV3InfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3InfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3InfoUsageSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsageSummary
}

// Status returns HTTPResponse.Status
func (r GetV3InfoUsageSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3InfoUsageSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3IsolationSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination         `json:"pagination,omitempty"`
		Resources  *[]IsolationSegment `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3IsolationSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3IsolationSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3IsolationSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IsolationSegment
}

// Status returns HTTPResponse.Status
func (r PostV3IsolationSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3IsolationSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3IsolationSegmentsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3IsolationSegmentsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3IsolationSegmentsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3IsolationSegmentsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IsolationSegment
}

// Status returns HTTPResponse.Status
func (r GetV3IsolationSegmentsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3IsolationSegmentsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3IsolationSegmentsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IsolationSegment
}

// Status returns HTTPResponse.Status
func (r PatchV3IsolationSegmentsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3IsolationSegmentsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3IsolationSegmentsGuidRelationshipsOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			Guid *string `json:"guid,omitempty"`
		} `json:"data,omitempty"`
		Links *struct {
			Related *struct {
				Href *string `json:"href,omitempty"`
			} `json:"related,omitempty"`
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3IsolationSegmentsGuidRelationshipsOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3IsolationSegmentsGuidRelationshipsOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			Guid *string `json:"guid,omitempty"`
		} `json:"data,omitempty"`
		Links *struct {
			Related *struct {
				Href *string `json:"href,omitempty"`
			} `json:"related,omitempty"`
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3IsolationSegmentsGuidRelationshipsSpacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			Guid *string `json:"guid,omitempty"`
		} `json:"data,omitempty"`
		Links *struct {
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3IsolationSegmentsGuidRelationshipsSpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3IsolationSegmentsGuidRelationshipsSpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3JobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination Pagination `json:"pagination"`
		Resources  []Job      `json:"resources"`
	}
	JSON401 *UnauthorizedError
}

// Status returns HTTPResponse.Status
func (r GetV3JobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3JobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3JobsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Job
	JSON401      *UnauthorizedError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3JobsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3JobsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationQuotasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Included Included resources when using include parameter
		Included *struct {
			Organizations *[]Organization `json:"organizations,omitempty"`
		} `json:"included,omitempty"`
		Pagination Pagination          `json:"pagination"`
		Resources  []OrganizationQuota `json:"resources"`
	}
	JSON401 *UnauthorizedError
}

// Status returns HTTPResponse.Status
func (r ListOrganizationQuotasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationQuotasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OrganizationQuota
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Guid  *openapi_types.UUID `json:"guid,omitempty"`
		Links *struct {
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationQuota
	JSON401      *UnauthorizedError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetOrganizationQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationQuota
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplyOrganizationQuotaToOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data []struct {
			Guid openapi_types.UUID `json:"guid"`
		} `json:"data"`
		Links struct {
			Self struct {
				Href string `json:"href"`
			} `json:"self"`
		} `json:"links"`
	}
	JSON400 *BadRequestError
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
	JSON422 *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r ApplyOrganizationQuotaToOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplyOrganizationQuotaToOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Organization
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Organization
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDefaultDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultIsolationSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetDefaultIsolationSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultIsolationSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignDefaultIsolationSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r AssignDefaultIsolationSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignDefaultIsolationSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsageSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUsageSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsageSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersForOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r ListUsersForOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersForOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3PackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Package  `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3PackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3PackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3PackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Package
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3PackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3PackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3PackagesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteV3PackagesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3PackagesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3PackagesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Package
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3PackagesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3PackagesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3PackagesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Package
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchV3PackagesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3PackagesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3PackagesGuidCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Package
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3PackagesGuidCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3PackagesGuidCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3PackagesGuidDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3PackagesGuidDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3PackagesGuidDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3PackagesGuidDropletsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Droplet  `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3PackagesGuidDropletsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3PackagesGuidDropletsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3PackagesGuidUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Package
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3PackagesGuidUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3PackagesGuidUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ProcessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Process  `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3ProcessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ProcessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ProcessesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Process
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3ProcessesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ProcessesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3ProcessesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Process
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchV3ProcessesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3ProcessesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3ProcessesGuidActionsScaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Process
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3ProcessesGuidActionsScaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3ProcessesGuidActionsScaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3ProcessesGuidInstancesIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteV3ProcessesGuidInstancesIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3ProcessesGuidInstancesIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ProcessesGuidSidecarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination Pagination `json:"pagination"`
		Resources  []Sidecar  `json:"resources"`
	}
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3ProcessesGuidSidecarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ProcessesGuidSidecarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ProcessesGuidStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Resources *[]ProcessStats `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSON404     *NotFound
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3ProcessesGuidStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ProcessesGuidStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3ResourceMatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ResourceMatchResponse
}

// Status returns HTTPResponse.Status
func (r PostV3ResourceMatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3ResourceMatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3RevisionsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Revision
}

// Status returns HTTPResponse.Status
func (r GetV3RevisionsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3RevisionsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3RevisionsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Revision
}

// Status returns HTTPResponse.Status
func (r PatchV3RevisionsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3RevisionsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3RevisionsGuidEnvironmentVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentVariables
}

// Status returns HTTPResponse.Status
func (r GetV3RevisionsGuidEnvironmentVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3RevisionsGuidEnvironmentVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3RolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Included Included resources when using include parameter
		Included *struct {
			Organizations *[]Organization `json:"organizations,omitempty"`
			Spaces        *[]Space        `json:"spaces,omitempty"`
			Users         *[]User         `json:"users,omitempty"`
		} `json:"included,omitempty"`
		Pagination Pagination `json:"pagination"`
		Resources  []Role     `json:"resources"`
	}
	JSON401 *UnauthorizedError
}

// Status returns HTTPResponse.Status
func (r GetV3RolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3RolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3RolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Role
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PostV3RolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3RolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3RolesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Guid  *openapi_types.UUID `json:"guid,omitempty"`
		Links *struct {
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
}

// Status returns HTTPResponse.Status
func (r DeleteV3RolesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3RolesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3RolesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Role
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3RolesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3RolesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3RoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Included *struct {
			Domains       *[]Domain       `json:"domains,omitempty"`
			Organizations *[]Organization `json:"organizations,omitempty"`
			Spaces        *[]Space        `json:"spaces,omitempty"`
		} `json:"included,omitempty"`
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Route    `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3RoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3RoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3RoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Route
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3RoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3RoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3RoutesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteV3RoutesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3RoutesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3RoutesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Route
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3RoutesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3RoutesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3RoutesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Route
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchV3RoutesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3RoutesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3RoutesGuidDestinationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Destinations *[]Destination `json:"destinations,omitempty"`
		Links        *struct {
			Route *Link `json:"route,omitempty"`
			Self  *Link `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
	JSON401     *Unauthorized
	JSON404     *NotFound
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3RoutesGuidDestinationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3RoutesGuidDestinationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3RoutesGuidDestinationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Destinations *[]Destination `json:"destinations,omitempty"`
	}
	JSON400     *BadRequest
	JSON401     *Unauthorized
	JSON403     *Forbidden
	JSON404     *NotFound
	JSON422     *UnprocessableEntity
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchV3RoutesGuidDestinationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3RoutesGuidDestinationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3RoutesGuidDestinationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Destinations *[]Destination `json:"destinations,omitempty"`
	}
	JSON400     *BadRequest
	JSON401     *Unauthorized
	JSON403     *Forbidden
	JSON404     *NotFound
	JSON422     *UnprocessableEntity
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3RoutesGuidDestinationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3RoutesGuidDestinationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3RoutesGuidDestinationsDestinationGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r DeleteV3RoutesGuidDestinationsDestinationGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3RoutesGuidDestinationsDestinationGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3RoutesGuidRelationshipsSharedSpacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data List of spaces the route is shared with
		Data *[]struct {
			Guid *openapi_types.UUID `json:"guid,omitempty"`
		} `json:"data,omitempty"`
		Links *struct {
			Self *Link `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
	JSON401     *Unauthorized
	JSON404     *NotFound
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3RoutesGuidRelationshipsSharedSpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3RoutesGuidRelationshipsSharedSpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3RoutesGuidRelationshipsSpaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			Guid *openapi_types.UUID `json:"guid,omitempty"`
		} `json:"data,omitempty"`
		Links *struct {
			Self *Link `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
	JSON400     *BadRequest
	JSON401     *Unauthorized
	JSON403     *Forbidden
	JSON404     *NotFound
	JSON422     *UnprocessableEntity
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PatchV3RoutesGuidRelationshipsSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3RoutesGuidRelationshipsSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3RoutesGuidTransferOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Route
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
	JSONDefault  *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r PostV3RoutesGuidTransferOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3RoutesGuidTransferOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SecurityGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination Pagination      `json:"pagination"`
		Resources  []SecurityGroup `json:"resources"`
	}
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
}

// Status returns HTTPResponse.Status
func (r GetV3SecurityGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SecurityGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3SecurityGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SecurityGroup
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PostV3SecurityGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3SecurityGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3SecurityGroupsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Guid  *openapi_types.UUID `json:"guid,omitempty"`
		Links *struct {
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
}

// Status returns HTTPResponse.Status
func (r DeleteV3SecurityGroupsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3SecurityGroupsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SecurityGroupsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroup
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3SecurityGroupsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SecurityGroupsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3SecurityGroupsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroup
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PatchV3SecurityGroupsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3SecurityGroupsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []struct {
			Guid openapi_types.UUID `json:"guid"`
		} `json:"data"`
		Links struct {
			Self struct {
				Href string `json:"href"`
			} `json:"self"`
		} `json:"links"`
	}
	JSON400 *BadRequestError
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
	JSON422 *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []struct {
			Guid openapi_types.UUID `json:"guid"`
		} `json:"data"`
		Links struct {
			Self struct {
				Href string `json:"href"`
			} `json:"self"`
		} `json:"links"`
	}
	JSON400 *BadRequestError
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
	JSON422 *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceBrokersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination      `json:"pagination,omitempty"`
		Resources  *[]ServiceBroker `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceBrokersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceBrokersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3ServiceBrokersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ServiceBroker
}

// Status returns HTTPResponse.Status
func (r PostV3ServiceBrokersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3ServiceBrokersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3ServiceBrokersGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3ServiceBrokersGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3ServiceBrokersGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceBrokersGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceBroker
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceBrokersGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceBrokersGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3ServiceBrokersGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceBroker
	JSON202      *ServiceBroker
}

// Status returns HTTPResponse.Status
func (r PatchV3ServiceBrokersGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3ServiceBrokersGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3ServiceBrokersGuidCatalogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV3ServiceBrokersGuidCatalogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3ServiceBrokersGuidCatalogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceBrokersGuidJobsSynchronizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LastOperation
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceBrokersGuidJobsSynchronizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceBrokersGuidJobsSynchronizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3ServiceCredentialBindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServiceCredentialBinding
}

// Status returns HTTPResponse.Status
func (r PostV3ServiceCredentialBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3ServiceCredentialBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3ServiceCredentialBindingsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3ServiceCredentialBindingsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3ServiceCredentialBindingsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceCredentialBindingsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceCredentialBinding
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceCredentialBindingsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceCredentialBindingsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3ServiceCredentialBindingsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceCredentialBinding
}

// Status returns HTTPResponse.Status
func (r PatchV3ServiceCredentialBindingsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3ServiceCredentialBindingsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceCredentialBindingsGuidDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Credentials    *map[string]interface{} `json:"credentials,omitempty"`
		SyslogDrainUrl *string                 `json:"syslog_drain_url,omitempty"`
		VolumeMounts   *[]string               `json:"volume_mounts,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceCredentialBindingsGuidDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceCredentialBindingsGuidDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceCredentialBindingsGuidParametersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceCredentialBindingsGuidParametersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceCredentialBindingsGuidParametersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Resources *[]ServiceInstance `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3ServiceInstancesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3ServiceInstancesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3ServiceInstancesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3ServiceInstancesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceInstance
}

// Status returns HTTPResponse.Status
func (r PatchV3ServiceInstancesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3ServiceInstancesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceInstancesGuidCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceInstancesGuidCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceInstancesGuidCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceInstancesGuidRelationshipsSharedSpacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]Space `json:"data,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceInstancesGuidRelationshipsSharedSpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceInstancesGuidRelationshipsSharedSpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]Space `json:"data,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsageSummary
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceOfferingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceOfferingList
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceOfferingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceOfferingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3ServiceOfferingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServiceOffering
}

// Status returns HTTPResponse.Status
func (r PostV3ServiceOfferingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3ServiceOfferingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3ServiceOfferingsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3ServiceOfferingsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3ServiceOfferingsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceOfferingsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceOffering
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceOfferingsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceOfferingsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3ServiceOfferingsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceOffering
}

// Status returns HTTPResponse.Status
func (r PatchV3ServiceOfferingsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3ServiceOfferingsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServicePlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicePlanList
}

// Status returns HTTPResponse.Status
func (r GetV3ServicePlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServicePlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3ServicePlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServicePlan
}

// Status returns HTTPResponse.Status
func (r PostV3ServicePlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3ServicePlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3ServicePlansGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3ServicePlansGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3ServicePlansGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServicePlansGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicePlan
}

// Status returns HTTPResponse.Status
func (r GetV3ServicePlansGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServicePlansGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3ServicePlansGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicePlan
}

// Status returns HTTPResponse.Status
func (r PatchV3ServicePlansGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3ServicePlansGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServicePlansGuidVisibilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicePlanVisibility
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3ServicePlansGuidVisibilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServicePlansGuidVisibilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3ServicePlansGuidVisibilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicePlanVisibility
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PatchV3ServicePlansGuidVisibilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3ServicePlansGuidVisibilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3ServicePlansGuidVisibilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicePlanVisibility
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PostV3ServicePlansGuidVisibilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3ServicePlansGuidVisibilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3ServicePlansGuidVisibilityOrganizationGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r DeleteV3ServicePlansGuidVisibilityOrganizationGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3ServicePlansGuidVisibilityOrganizationGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceRouteBindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination            `json:"pagination,omitempty"`
		Resources  *[]ServiceRouteBinding `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceRouteBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceRouteBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3ServiceRouteBindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServiceRouteBinding
}

// Status returns HTTPResponse.Status
func (r PostV3ServiceRouteBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3ServiceRouteBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3ServiceRouteBindingsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3ServiceRouteBindingsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3ServiceRouteBindingsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceRouteBindingsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceRouteBinding
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceRouteBindingsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceRouteBindingsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3ServiceRouteBindingsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceRouteBinding
}

// Status returns HTTPResponse.Status
func (r PatchV3ServiceRouteBindingsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3ServiceRouteBindingsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceRouteBindingsGuidParametersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceRouteBindingsGuidParametersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceRouteBindingsGuidParametersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceUsageEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination          `json:"pagination,omitempty"`
		Resources  *[]ServiceUsageEvent `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceUsageEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceUsageEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3ServiceUsageEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV3ServiceUsageEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3ServiceUsageEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3ServiceUsageEventsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceUsageEvent
}

// Status returns HTTPResponse.Status
func (r GetV3ServiceUsageEventsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3ServiceUsageEventsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3SidecarsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r DeleteV3SidecarsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3SidecarsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SidecarsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Sidecar
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3SidecarsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SidecarsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3SidecarsGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Sidecar
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PatchV3SidecarsGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3SidecarsGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SidecarsGuidProcessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Process  `json:"resources,omitempty"`
	}
	JSON401     *Unauthorized
	JSON404     *NotFound
	JSONDefault *UnexpectedError
}

// Status returns HTTPResponse.Status
func (r GetV3SidecarsGuidProcessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SidecarsGuidProcessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SpaceQuotasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Included Included resources when using include parameter
		Included *struct {
			Organizations *[]Organization `json:"organizations,omitempty"`
			Spaces        *[]Space        `json:"spaces,omitempty"`
		} `json:"included,omitempty"`
		Pagination Pagination   `json:"pagination"`
		Resources  []SpaceQuota `json:"resources"`
	}
	JSON401 *UnauthorizedError
}

// Status returns HTTPResponse.Status
func (r GetV3SpaceQuotasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SpaceQuotasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3SpaceQuotasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SpaceQuota
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PostV3SpaceQuotasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3SpaceQuotasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3SpaceQuotasGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Guid  *openapi_types.UUID `json:"guid,omitempty"`
		Links *struct {
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
}

// Status returns HTTPResponse.Status
func (r DeleteV3SpaceQuotasGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3SpaceQuotasGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SpaceQuotasGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpaceQuota
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3SpaceQuotasGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SpaceQuotasGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3SpaceQuotasGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpaceQuota
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PatchV3SpaceQuotasGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3SpaceQuotasGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3SpaceQuotasGuidRelationshipsSpacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []struct {
			Guid openapi_types.UUID `json:"guid"`
		} `json:"data"`
		Links struct {
			Self struct {
				Href string `json:"href"`
			} `json:"self"`
		} `json:"links"`
	}
	JSON400 *BadRequestError
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
	JSON422 *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PostV3SpaceQuotasGuidRelationshipsSpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3SpaceQuotasGuidRelationshipsSpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SpacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Space    `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3SpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3SpacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Space
}

// Status returns HTTPResponse.Status
func (r PostV3SpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3SpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3SpacesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3SpacesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3SpacesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SpacesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Space
}

// Status returns HTTPResponse.Status
func (r GetV3SpacesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SpacesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3SpacesGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Space
}

// Status returns HTTPResponse.Status
func (r PatchV3SpacesGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3SpacesGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SpacesGuidFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Resources []SpaceFeature `json:"resources"`
	}
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3SpacesGuidFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SpacesGuidFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SpacesGuidFeaturesNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpaceFeature
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3SpacesGuidFeaturesNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SpacesGuidFeaturesNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3SpacesGuidFeaturesNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpaceFeature
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PatchV3SpacesGuidFeaturesNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3SpacesGuidFeaturesNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3SpacesGuidManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Guid  *openapi_types.UUID `json:"guid,omitempty"`
		Links *struct {
			Job *struct {
				Href *string `json:"href,omitempty"`
			} `json:"job,omitempty"`
			Self *struct {
				Href *string `json:"href,omitempty"`
			} `json:"self,omitempty"`
		} `json:"links,omitempty"`
	}
	JSON400 *BadRequestError
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
	JSON422 *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PostV3SpacesGuidManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3SpacesGuidManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3SpacesGuidManifestDiffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManifestDiff
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *ForbiddenError
	JSON404      *NotFoundError
	JSON422      *UnprocessableEntityError
}

// Status returns HTTPResponse.Status
func (r PostV3SpacesGuidManifestDiffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3SpacesGuidManifestDiffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SpacesGuidRelationshipsIsolationSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Guid *string `json:"guid,omitempty"`
		} `json:"data,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3SpacesGuidRelationshipsIsolationSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SpacesGuidRelationshipsIsolationSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3SpacesGuidRelationshipsIsolationSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			Guid *string `json:"guid,omitempty"`
		} `json:"data,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchV3SpacesGuidRelationshipsIsolationSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3SpacesGuidRelationshipsIsolationSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SpacesGuidRunningSecurityGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination Pagination      `json:"pagination"`
		Resources  []SecurityGroup `json:"resources"`
	}
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3SpacesGuidRunningSecurityGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SpacesGuidRunningSecurityGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SpacesGuidStagingSecurityGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination Pagination      `json:"pagination"`
		Resources  []SecurityGroup `json:"resources"`
	}
	JSON401 *UnauthorizedError
	JSON403 *ForbiddenError
	JSON404 *NotFoundError
}

// Status returns HTTPResponse.Status
func (r GetV3SpacesGuidStagingSecurityGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SpacesGuidStagingSecurityGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3SpacesGuidUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]User     `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3SpacesGuidUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3SpacesGuidUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3StacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Stack    `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3StacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3StacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3StacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Stack
}

// Status returns HTTPResponse.Status
func (r PostV3StacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3StacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3StacksGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3StacksGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3StacksGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3StacksGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stack
}

// Status returns HTTPResponse.Status
func (r GetV3StacksGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3StacksGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3StacksGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stack
}

// Status returns HTTPResponse.Status
func (r PatchV3StacksGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3StacksGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3StacksGuidAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]App      `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3StacksGuidAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3StacksGuidAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3TasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Resources  *[]Task     `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3TasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3TasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3TasksGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r GetV3TasksGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3TasksGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3TasksGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r PatchV3TasksGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3TasksGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3TasksGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Task
}

// Status returns HTTPResponse.Status
func (r PostV3TasksGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3TasksGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Pagination *struct {
			First *struct {
				Href *string `json:"href,omitempty"`
			} `json:"first,omitempty"`
			Last *struct {
				Href *string `json:"href,omitempty"`
			} `json:"last,omitempty"`
			Next *struct {
				Href *string `json:"href,omitempty"`
			} `json:"next,omitempty"`
			Previous *struct {
				Href *string `json:"href,omitempty"`
			} `json:"previous"`
			TotalPages   *int `json:"total_pages,omitempty"`
			TotalResults *int `json:"total_results,omitempty"`
		} `json:"pagination,omitempty"`
		Resources *[]User `json:"resources,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV3UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r PostV3UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV3UsersGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV3UsersGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV3UsersGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3UsersGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetV3UsersGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3UsersGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV3UsersGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r PatchV3UsersGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV3UsersGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// GetV3WithResponse request returning *GetV3Response
func (c *ClientWithResponses) GetV3WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV3Response, error) {
	rsp, err := c.GetV3(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3Response(rsp)
}

// PostV3AdminActionsClearBuildpackCacheWithResponse request returning *PostV3AdminActionsClearBuildpackCacheResponse
func (c *ClientWithResponses) PostV3AdminActionsClearBuildpackCacheWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV3AdminActionsClearBuildpackCacheResponse, error) {
	rsp, err := c.PostV3AdminActionsClearBuildpackCache(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3AdminActionsClearBuildpackCacheResponse(rsp)
}

// GetV3AppUsageEventsWithResponse request returning *GetV3AppUsageEventsResponse
func (c *ClientWithResponses) GetV3AppUsageEventsWithResponse(ctx context.Context, params *GetV3AppUsageEventsParams, reqEditors ...RequestEditorFn) (*GetV3AppUsageEventsResponse, error) {
	rsp, err := c.GetV3AppUsageEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppUsageEventsResponse(rsp)
}

// PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedWithResponse request returning *PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedResponse
func (c *ClientWithResponses) PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedResponse, error) {
	rsp, err := c.PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseed(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedResponse(rsp)
}

// GetV3AppUsageEventsGuidWithResponse request returning *GetV3AppUsageEventsGuidResponse
func (c *ClientWithResponses) GetV3AppUsageEventsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3AppUsageEventsGuidResponse, error) {
	rsp, err := c.GetV3AppUsageEventsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppUsageEventsGuidResponse(rsp)
}

// ListAppsWithResponse request returning *ListAppsResponse
func (c *ClientWithResponses) ListAppsWithResponse(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*ListAppsResponse, error) {
	rsp, err := c.ListApps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppsResponse(rsp)
}

// CreateAppWithBodyWithResponse request with arbitrary body returning *CreateAppResponse
func (c *ClientWithResponses) CreateAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppResponse, error) {
	rsp, err := c.CreateAppWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppResponse(rsp)
}

func (c *ClientWithResponses) CreateAppWithResponse(ctx context.Context, body CreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppResponse, error) {
	rsp, err := c.CreateApp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppResponse(rsp)
}

// DeleteAppWithResponse request returning *DeleteAppResponse
func (c *ClientWithResponses) DeleteAppWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAppResponse, error) {
	rsp, err := c.DeleteApp(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppResponse(rsp)
}

// GetAppWithResponse request returning *GetAppResponse
func (c *ClientWithResponses) GetAppWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetAppParams, reqEditors ...RequestEditorFn) (*GetAppResponse, error) {
	rsp, err := c.GetApp(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppResponse(rsp)
}

// UpdateAppWithBodyWithResponse request with arbitrary body returning *UpdateAppResponse
func (c *ClientWithResponses) UpdateAppWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppResponse, error) {
	rsp, err := c.UpdateAppWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppResponse(rsp)
}

func (c *ClientWithResponses) UpdateAppWithResponse(ctx context.Context, guid openapi_types.UUID, body UpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppResponse, error) {
	rsp, err := c.UpdateApp(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppResponse(rsp)
}

// PostV3AppsGuidActionsApplyManifestWithBodyWithResponse request with arbitrary body returning *PostV3AppsGuidActionsApplyManifestResponse
func (c *ClientWithResponses) PostV3AppsGuidActionsApplyManifestWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3AppsGuidActionsApplyManifestResponse, error) {
	rsp, err := c.PostV3AppsGuidActionsApplyManifestWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3AppsGuidActionsApplyManifestResponse(rsp)
}

// ClearAppBuildpackCacheWithResponse request returning *ClearAppBuildpackCacheResponse
func (c *ClientWithResponses) ClearAppBuildpackCacheWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ClearAppBuildpackCacheResponse, error) {
	rsp, err := c.ClearAppBuildpackCache(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClearAppBuildpackCacheResponse(rsp)
}

// RestartAppWithResponse request returning *RestartAppResponse
func (c *ClientWithResponses) RestartAppWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*RestartAppResponse, error) {
	rsp, err := c.RestartApp(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartAppResponse(rsp)
}

// StartAppWithResponse request returning *StartAppResponse
func (c *ClientWithResponses) StartAppWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*StartAppResponse, error) {
	rsp, err := c.StartApp(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartAppResponse(rsp)
}

// StopAppWithResponse request returning *StopAppResponse
func (c *ClientWithResponses) StopAppWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*StopAppResponse, error) {
	rsp, err := c.StopApp(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopAppResponse(rsp)
}

// GetV3AppsGuidBuildsWithResponse request returning *GetV3AppsGuidBuildsResponse
func (c *ClientWithResponses) GetV3AppsGuidBuildsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidBuildsParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidBuildsResponse, error) {
	rsp, err := c.GetV3AppsGuidBuilds(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidBuildsResponse(rsp)
}

// GetV3AppsGuidDropletsWithResponse request returning *GetV3AppsGuidDropletsResponse
func (c *ClientWithResponses) GetV3AppsGuidDropletsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidDropletsParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidDropletsResponse, error) {
	rsp, err := c.GetV3AppsGuidDroplets(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidDropletsResponse(rsp)
}

// GetAppEnvironmentVariablesWithResponse request returning *GetAppEnvironmentVariablesResponse
func (c *ClientWithResponses) GetAppEnvironmentVariablesWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAppEnvironmentVariablesResponse, error) {
	rsp, err := c.GetAppEnvironmentVariables(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppEnvironmentVariablesResponse(rsp)
}

// UpdateAppEnvironmentVariablesWithBodyWithResponse request with arbitrary body returning *UpdateAppEnvironmentVariablesResponse
func (c *ClientWithResponses) UpdateAppEnvironmentVariablesWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppEnvironmentVariablesResponse, error) {
	rsp, err := c.UpdateAppEnvironmentVariablesWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppEnvironmentVariablesResponse(rsp)
}

func (c *ClientWithResponses) UpdateAppEnvironmentVariablesWithResponse(ctx context.Context, guid openapi_types.UUID, body UpdateAppEnvironmentVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppEnvironmentVariablesResponse, error) {
	rsp, err := c.UpdateAppEnvironmentVariables(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppEnvironmentVariablesResponse(rsp)
}

// GetV3AppsGuidFeaturesWithResponse request returning *GetV3AppsGuidFeaturesResponse
func (c *ClientWithResponses) GetV3AppsGuidFeaturesWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3AppsGuidFeaturesResponse, error) {
	rsp, err := c.GetV3AppsGuidFeatures(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidFeaturesResponse(rsp)
}

// GetV3AppsGuidFeaturesNameWithResponse request returning *GetV3AppsGuidFeaturesNameResponse
func (c *ClientWithResponses) GetV3AppsGuidFeaturesNameWithResponse(ctx context.Context, guid openapi_types.UUID, name GetV3AppsGuidFeaturesNameParamsName, reqEditors ...RequestEditorFn) (*GetV3AppsGuidFeaturesNameResponse, error) {
	rsp, err := c.GetV3AppsGuidFeaturesName(ctx, guid, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidFeaturesNameResponse(rsp)
}

// PatchV3AppsGuidFeaturesNameWithBodyWithResponse request with arbitrary body returning *PatchV3AppsGuidFeaturesNameResponse
func (c *ClientWithResponses) PatchV3AppsGuidFeaturesNameWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, name PatchV3AppsGuidFeaturesNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3AppsGuidFeaturesNameResponse, error) {
	rsp, err := c.PatchV3AppsGuidFeaturesNameWithBody(ctx, guid, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3AppsGuidFeaturesNameResponse(rsp)
}

func (c *ClientWithResponses) PatchV3AppsGuidFeaturesNameWithResponse(ctx context.Context, guid openapi_types.UUID, name PatchV3AppsGuidFeaturesNameParamsName, body PatchV3AppsGuidFeaturesNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3AppsGuidFeaturesNameResponse, error) {
	rsp, err := c.PatchV3AppsGuidFeaturesName(ctx, guid, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3AppsGuidFeaturesNameResponse(rsp)
}

// GetV3AppsGuidManifestWithResponse request returning *GetV3AppsGuidManifestResponse
func (c *ClientWithResponses) GetV3AppsGuidManifestWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3AppsGuidManifestResponse, error) {
	rsp, err := c.GetV3AppsGuidManifest(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidManifestResponse(rsp)
}

// PostV3AppsGuidManifestDiffWithBodyWithResponse request with arbitrary body returning *PostV3AppsGuidManifestDiffResponse
func (c *ClientWithResponses) PostV3AppsGuidManifestDiffWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3AppsGuidManifestDiffResponse, error) {
	rsp, err := c.PostV3AppsGuidManifestDiffWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3AppsGuidManifestDiffResponse(rsp)
}

// GetV3AppsGuidPackagesWithResponse request returning *GetV3AppsGuidPackagesResponse
func (c *ClientWithResponses) GetV3AppsGuidPackagesWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidPackagesParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidPackagesResponse, error) {
	rsp, err := c.GetV3AppsGuidPackages(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidPackagesResponse(rsp)
}

// GetAppPermissionsWithResponse request returning *GetAppPermissionsResponse
func (c *ClientWithResponses) GetAppPermissionsWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAppPermissionsResponse, error) {
	rsp, err := c.GetAppPermissions(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppPermissionsResponse(rsp)
}

// GetV3AppsGuidProcessesWithResponse request returning *GetV3AppsGuidProcessesResponse
func (c *ClientWithResponses) GetV3AppsGuidProcessesWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidProcessesParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidProcessesResponse, error) {
	rsp, err := c.GetV3AppsGuidProcesses(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidProcessesResponse(rsp)
}

// GetV3AppsGuidProcessesTypeWithResponse request returning *GetV3AppsGuidProcessesTypeResponse
func (c *ClientWithResponses) GetV3AppsGuidProcessesTypeWithResponse(ctx context.Context, guid openapi_types.UUID, pType string, reqEditors ...RequestEditorFn) (*GetV3AppsGuidProcessesTypeResponse, error) {
	rsp, err := c.GetV3AppsGuidProcessesType(ctx, guid, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidProcessesTypeResponse(rsp)
}

// GetV3AppsGuidRelationshipsCurrentDropletWithResponse request returning *GetV3AppsGuidRelationshipsCurrentDropletResponse
func (c *ClientWithResponses) GetV3AppsGuidRelationshipsCurrentDropletWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3AppsGuidRelationshipsCurrentDropletResponse, error) {
	rsp, err := c.GetV3AppsGuidRelationshipsCurrentDroplet(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidRelationshipsCurrentDropletResponse(rsp)
}

// PatchV3AppsGuidRelationshipsCurrentDropletWithBodyWithResponse request with arbitrary body returning *PatchV3AppsGuidRelationshipsCurrentDropletResponse
func (c *ClientWithResponses) PatchV3AppsGuidRelationshipsCurrentDropletWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3AppsGuidRelationshipsCurrentDropletResponse, error) {
	rsp, err := c.PatchV3AppsGuidRelationshipsCurrentDropletWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3AppsGuidRelationshipsCurrentDropletResponse(rsp)
}

func (c *ClientWithResponses) PatchV3AppsGuidRelationshipsCurrentDropletWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3AppsGuidRelationshipsCurrentDropletJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3AppsGuidRelationshipsCurrentDropletResponse, error) {
	rsp, err := c.PatchV3AppsGuidRelationshipsCurrentDroplet(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3AppsGuidRelationshipsCurrentDropletResponse(rsp)
}

// GetV3AppsGuidRevisionsWithResponse request returning *GetV3AppsGuidRevisionsResponse
func (c *ClientWithResponses) GetV3AppsGuidRevisionsWithResponse(ctx context.Context, guid string, params *GetV3AppsGuidRevisionsParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidRevisionsResponse, error) {
	rsp, err := c.GetV3AppsGuidRevisions(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidRevisionsResponse(rsp)
}

// GetV3AppsGuidRevisionsDeployedWithResponse request returning *GetV3AppsGuidRevisionsDeployedResponse
func (c *ClientWithResponses) GetV3AppsGuidRevisionsDeployedWithResponse(ctx context.Context, guid string, params *GetV3AppsGuidRevisionsDeployedParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidRevisionsDeployedResponse, error) {
	rsp, err := c.GetV3AppsGuidRevisionsDeployed(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidRevisionsDeployedResponse(rsp)
}

// GetV3AppsGuidSidecarsWithResponse request returning *GetV3AppsGuidSidecarsResponse
func (c *ClientWithResponses) GetV3AppsGuidSidecarsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3AppsGuidSidecarsParams, reqEditors ...RequestEditorFn) (*GetV3AppsGuidSidecarsResponse, error) {
	rsp, err := c.GetV3AppsGuidSidecars(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AppsGuidSidecarsResponse(rsp)
}

// PostV3AppsGuidSidecarsWithBodyWithResponse request with arbitrary body returning *PostV3AppsGuidSidecarsResponse
func (c *ClientWithResponses) PostV3AppsGuidSidecarsWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3AppsGuidSidecarsResponse, error) {
	rsp, err := c.PostV3AppsGuidSidecarsWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3AppsGuidSidecarsResponse(rsp)
}

func (c *ClientWithResponses) PostV3AppsGuidSidecarsWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3AppsGuidSidecarsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3AppsGuidSidecarsResponse, error) {
	rsp, err := c.PostV3AppsGuidSidecars(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3AppsGuidSidecarsResponse(rsp)
}

// GetAppSshEnabledWithResponse request returning *GetAppSshEnabledResponse
func (c *ClientWithResponses) GetAppSshEnabledWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAppSshEnabledResponse, error) {
	rsp, err := c.GetAppSshEnabled(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppSshEnabledResponse(rsp)
}

// PostV3AppsGuidTasksWithBodyWithResponse request with arbitrary body returning *PostV3AppsGuidTasksResponse
func (c *ClientWithResponses) PostV3AppsGuidTasksWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3AppsGuidTasksResponse, error) {
	rsp, err := c.PostV3AppsGuidTasksWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3AppsGuidTasksResponse(rsp)
}

func (c *ClientWithResponses) PostV3AppsGuidTasksWithResponse(ctx context.Context, guid string, body PostV3AppsGuidTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3AppsGuidTasksResponse, error) {
	rsp, err := c.PostV3AppsGuidTasks(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3AppsGuidTasksResponse(rsp)
}

// GetV3AuditEventsWithResponse request returning *GetV3AuditEventsResponse
func (c *ClientWithResponses) GetV3AuditEventsWithResponse(ctx context.Context, params *GetV3AuditEventsParams, reqEditors ...RequestEditorFn) (*GetV3AuditEventsResponse, error) {
	rsp, err := c.GetV3AuditEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AuditEventsResponse(rsp)
}

// GetV3AuditEventsGuidWithResponse request returning *GetV3AuditEventsGuidResponse
func (c *ClientWithResponses) GetV3AuditEventsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3AuditEventsGuidResponse, error) {
	rsp, err := c.GetV3AuditEventsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3AuditEventsGuidResponse(rsp)
}

// GetV3BuildpacksWithResponse request returning *GetV3BuildpacksResponse
func (c *ClientWithResponses) GetV3BuildpacksWithResponse(ctx context.Context, params *GetV3BuildpacksParams, reqEditors ...RequestEditorFn) (*GetV3BuildpacksResponse, error) {
	rsp, err := c.GetV3Buildpacks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3BuildpacksResponse(rsp)
}

// PostV3BuildpacksWithBodyWithResponse request with arbitrary body returning *PostV3BuildpacksResponse
func (c *ClientWithResponses) PostV3BuildpacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3BuildpacksResponse, error) {
	rsp, err := c.PostV3BuildpacksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3BuildpacksResponse(rsp)
}

func (c *ClientWithResponses) PostV3BuildpacksWithResponse(ctx context.Context, body PostV3BuildpacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3BuildpacksResponse, error) {
	rsp, err := c.PostV3Buildpacks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3BuildpacksResponse(rsp)
}

// DeleteV3BuildpacksGuidWithResponse request returning *DeleteV3BuildpacksGuidResponse
func (c *ClientWithResponses) DeleteV3BuildpacksGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3BuildpacksGuidResponse, error) {
	rsp, err := c.DeleteV3BuildpacksGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3BuildpacksGuidResponse(rsp)
}

// GetV3BuildpacksGuidWithResponse request returning *GetV3BuildpacksGuidResponse
func (c *ClientWithResponses) GetV3BuildpacksGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3BuildpacksGuidResponse, error) {
	rsp, err := c.GetV3BuildpacksGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3BuildpacksGuidResponse(rsp)
}

// PatchV3BuildpacksGuidWithBodyWithResponse request with arbitrary body returning *PatchV3BuildpacksGuidResponse
func (c *ClientWithResponses) PatchV3BuildpacksGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3BuildpacksGuidResponse, error) {
	rsp, err := c.PatchV3BuildpacksGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3BuildpacksGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3BuildpacksGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3BuildpacksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3BuildpacksGuidResponse, error) {
	rsp, err := c.PatchV3BuildpacksGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3BuildpacksGuidResponse(rsp)
}

// PostV3BuildpacksGuidUploadWithBodyWithResponse request with arbitrary body returning *PostV3BuildpacksGuidUploadResponse
func (c *ClientWithResponses) PostV3BuildpacksGuidUploadWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3BuildpacksGuidUploadResponse, error) {
	rsp, err := c.PostV3BuildpacksGuidUploadWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3BuildpacksGuidUploadResponse(rsp)
}

func (c *ClientWithResponses) PostV3BuildpacksGuidUploadWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3BuildpacksGuidUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3BuildpacksGuidUploadResponse, error) {
	rsp, err := c.PostV3BuildpacksGuidUpload(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3BuildpacksGuidUploadResponse(rsp)
}

// GetV3BuildsWithResponse request returning *GetV3BuildsResponse
func (c *ClientWithResponses) GetV3BuildsWithResponse(ctx context.Context, params *GetV3BuildsParams, reqEditors ...RequestEditorFn) (*GetV3BuildsResponse, error) {
	rsp, err := c.GetV3Builds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3BuildsResponse(rsp)
}

// PostV3BuildsWithBodyWithResponse request with arbitrary body returning *PostV3BuildsResponse
func (c *ClientWithResponses) PostV3BuildsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3BuildsResponse, error) {
	rsp, err := c.PostV3BuildsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3BuildsResponse(rsp)
}

func (c *ClientWithResponses) PostV3BuildsWithResponse(ctx context.Context, body PostV3BuildsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3BuildsResponse, error) {
	rsp, err := c.PostV3Builds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3BuildsResponse(rsp)
}

// GetV3BuildsGuidWithResponse request returning *GetV3BuildsGuidResponse
func (c *ClientWithResponses) GetV3BuildsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3BuildsGuidResponse, error) {
	rsp, err := c.GetV3BuildsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3BuildsGuidResponse(rsp)
}

// PatchV3BuildsGuidWithBodyWithResponse request with arbitrary body returning *PatchV3BuildsGuidResponse
func (c *ClientWithResponses) PatchV3BuildsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3BuildsGuidResponse, error) {
	rsp, err := c.PatchV3BuildsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3BuildsGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3BuildsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3BuildsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3BuildsGuidResponse, error) {
	rsp, err := c.PatchV3BuildsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3BuildsGuidResponse(rsp)
}

// GetV3DeploymentsWithResponse request returning *GetV3DeploymentsResponse
func (c *ClientWithResponses) GetV3DeploymentsWithResponse(ctx context.Context, params *GetV3DeploymentsParams, reqEditors ...RequestEditorFn) (*GetV3DeploymentsResponse, error) {
	rsp, err := c.GetV3Deployments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3DeploymentsResponse(rsp)
}

// PostV3DeploymentsWithBodyWithResponse request with arbitrary body returning *PostV3DeploymentsResponse
func (c *ClientWithResponses) PostV3DeploymentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3DeploymentsResponse, error) {
	rsp, err := c.PostV3DeploymentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3DeploymentsResponse(rsp)
}

func (c *ClientWithResponses) PostV3DeploymentsWithResponse(ctx context.Context, body PostV3DeploymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3DeploymentsResponse, error) {
	rsp, err := c.PostV3Deployments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3DeploymentsResponse(rsp)
}

// GetV3DeploymentsGuidWithResponse request returning *GetV3DeploymentsGuidResponse
func (c *ClientWithResponses) GetV3DeploymentsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3DeploymentsGuidResponse, error) {
	rsp, err := c.GetV3DeploymentsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3DeploymentsGuidResponse(rsp)
}

// PatchV3DeploymentsGuidWithBodyWithResponse request with arbitrary body returning *PatchV3DeploymentsGuidResponse
func (c *ClientWithResponses) PatchV3DeploymentsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3DeploymentsGuidResponse, error) {
	rsp, err := c.PatchV3DeploymentsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3DeploymentsGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3DeploymentsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3DeploymentsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3DeploymentsGuidResponse, error) {
	rsp, err := c.PatchV3DeploymentsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3DeploymentsGuidResponse(rsp)
}

// PostV3DeploymentsGuidActionsCancelWithResponse request returning *PostV3DeploymentsGuidActionsCancelResponse
func (c *ClientWithResponses) PostV3DeploymentsGuidActionsCancelWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostV3DeploymentsGuidActionsCancelResponse, error) {
	rsp, err := c.PostV3DeploymentsGuidActionsCancel(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3DeploymentsGuidActionsCancelResponse(rsp)
}

// PostV3DeploymentsGuidActionsContinueWithResponse request returning *PostV3DeploymentsGuidActionsContinueResponse
func (c *ClientWithResponses) PostV3DeploymentsGuidActionsContinueWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostV3DeploymentsGuidActionsContinueResponse, error) {
	rsp, err := c.PostV3DeploymentsGuidActionsContinue(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3DeploymentsGuidActionsContinueResponse(rsp)
}

// GetV3DomainsWithResponse request returning *GetV3DomainsResponse
func (c *ClientWithResponses) GetV3DomainsWithResponse(ctx context.Context, params *GetV3DomainsParams, reqEditors ...RequestEditorFn) (*GetV3DomainsResponse, error) {
	rsp, err := c.GetV3Domains(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3DomainsResponse(rsp)
}

// PostV3DomainsWithBodyWithResponse request with arbitrary body returning *PostV3DomainsResponse
func (c *ClientWithResponses) PostV3DomainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3DomainsResponse, error) {
	rsp, err := c.PostV3DomainsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3DomainsResponse(rsp)
}

func (c *ClientWithResponses) PostV3DomainsWithResponse(ctx context.Context, body PostV3DomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3DomainsResponse, error) {
	rsp, err := c.PostV3Domains(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3DomainsResponse(rsp)
}

// DeleteV3DomainsGuidWithResponse request returning *DeleteV3DomainsGuidResponse
func (c *ClientWithResponses) DeleteV3DomainsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3DomainsGuidResponse, error) {
	rsp, err := c.DeleteV3DomainsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3DomainsGuidResponse(rsp)
}

// GetV3DomainsGuidWithResponse request returning *GetV3DomainsGuidResponse
func (c *ClientWithResponses) GetV3DomainsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3DomainsGuidResponse, error) {
	rsp, err := c.GetV3DomainsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3DomainsGuidResponse(rsp)
}

// PatchV3DomainsGuidWithBodyWithResponse request with arbitrary body returning *PatchV3DomainsGuidResponse
func (c *ClientWithResponses) PatchV3DomainsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3DomainsGuidResponse, error) {
	rsp, err := c.PatchV3DomainsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3DomainsGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3DomainsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3DomainsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3DomainsGuidResponse, error) {
	rsp, err := c.PatchV3DomainsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3DomainsGuidResponse(rsp)
}

// PostV3DomainsGuidRelationshipsSharedOrganizationsWithBodyWithResponse request with arbitrary body returning *PostV3DomainsGuidRelationshipsSharedOrganizationsResponse
func (c *ClientWithResponses) PostV3DomainsGuidRelationshipsSharedOrganizationsWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3DomainsGuidRelationshipsSharedOrganizationsResponse, error) {
	rsp, err := c.PostV3DomainsGuidRelationshipsSharedOrganizationsWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3DomainsGuidRelationshipsSharedOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostV3DomainsGuidRelationshipsSharedOrganizationsWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3DomainsGuidRelationshipsSharedOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3DomainsGuidRelationshipsSharedOrganizationsResponse, error) {
	rsp, err := c.PostV3DomainsGuidRelationshipsSharedOrganizations(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3DomainsGuidRelationshipsSharedOrganizationsResponse(rsp)
}

// DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidWithResponse request returning *DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidResponse
func (c *ClientWithResponses) DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidWithResponse(ctx context.Context, guid openapi_types.UUID, orgGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidResponse, error) {
	rsp, err := c.DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuid(ctx, guid, orgGuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidResponse(rsp)
}

// GetV3DropletsWithResponse request returning *GetV3DropletsResponse
func (c *ClientWithResponses) GetV3DropletsWithResponse(ctx context.Context, params *GetV3DropletsParams, reqEditors ...RequestEditorFn) (*GetV3DropletsResponse, error) {
	rsp, err := c.GetV3Droplets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3DropletsResponse(rsp)
}

// PostV3DropletsWithBodyWithResponse request with arbitrary body returning *PostV3DropletsResponse
func (c *ClientWithResponses) PostV3DropletsWithBodyWithResponse(ctx context.Context, params *PostV3DropletsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3DropletsResponse, error) {
	rsp, err := c.PostV3DropletsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3DropletsResponse(rsp)
}

func (c *ClientWithResponses) PostV3DropletsWithResponse(ctx context.Context, params *PostV3DropletsParams, body PostV3DropletsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3DropletsResponse, error) {
	rsp, err := c.PostV3Droplets(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3DropletsResponse(rsp)
}

// DeleteV3DropletsGuidWithResponse request returning *DeleteV3DropletsGuidResponse
func (c *ClientWithResponses) DeleteV3DropletsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3DropletsGuidResponse, error) {
	rsp, err := c.DeleteV3DropletsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3DropletsGuidResponse(rsp)
}

// GetV3DropletsGuidWithResponse request returning *GetV3DropletsGuidResponse
func (c *ClientWithResponses) GetV3DropletsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3DropletsGuidResponse, error) {
	rsp, err := c.GetV3DropletsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3DropletsGuidResponse(rsp)
}

// PatchV3DropletsGuidWithBodyWithResponse request with arbitrary body returning *PatchV3DropletsGuidResponse
func (c *ClientWithResponses) PatchV3DropletsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3DropletsGuidResponse, error) {
	rsp, err := c.PatchV3DropletsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3DropletsGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3DropletsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3DropletsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3DropletsGuidResponse, error) {
	rsp, err := c.PatchV3DropletsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3DropletsGuidResponse(rsp)
}

// GetV3EnvironmentVariableGroupsNameWithResponse request returning *GetV3EnvironmentVariableGroupsNameResponse
func (c *ClientWithResponses) GetV3EnvironmentVariableGroupsNameWithResponse(ctx context.Context, name GetV3EnvironmentVariableGroupsNameParamsName, reqEditors ...RequestEditorFn) (*GetV3EnvironmentVariableGroupsNameResponse, error) {
	rsp, err := c.GetV3EnvironmentVariableGroupsName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3EnvironmentVariableGroupsNameResponse(rsp)
}

// PatchV3EnvironmentVariableGroupsNameWithBodyWithResponse request with arbitrary body returning *PatchV3EnvironmentVariableGroupsNameResponse
func (c *ClientWithResponses) PatchV3EnvironmentVariableGroupsNameWithBodyWithResponse(ctx context.Context, name PatchV3EnvironmentVariableGroupsNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3EnvironmentVariableGroupsNameResponse, error) {
	rsp, err := c.PatchV3EnvironmentVariableGroupsNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3EnvironmentVariableGroupsNameResponse(rsp)
}

func (c *ClientWithResponses) PatchV3EnvironmentVariableGroupsNameWithResponse(ctx context.Context, name PatchV3EnvironmentVariableGroupsNameParamsName, body PatchV3EnvironmentVariableGroupsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3EnvironmentVariableGroupsNameResponse, error) {
	rsp, err := c.PatchV3EnvironmentVariableGroupsName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3EnvironmentVariableGroupsNameResponse(rsp)
}

// GetV3FeatureFlagsWithResponse request returning *GetV3FeatureFlagsResponse
func (c *ClientWithResponses) GetV3FeatureFlagsWithResponse(ctx context.Context, params *GetV3FeatureFlagsParams, reqEditors ...RequestEditorFn) (*GetV3FeatureFlagsResponse, error) {
	rsp, err := c.GetV3FeatureFlags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3FeatureFlagsResponse(rsp)
}

// GetV3FeatureFlagsNameWithResponse request returning *GetV3FeatureFlagsNameResponse
func (c *ClientWithResponses) GetV3FeatureFlagsNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetV3FeatureFlagsNameResponse, error) {
	rsp, err := c.GetV3FeatureFlagsName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3FeatureFlagsNameResponse(rsp)
}

// PatchV3FeatureFlagsNameWithBodyWithResponse request with arbitrary body returning *PatchV3FeatureFlagsNameResponse
func (c *ClientWithResponses) PatchV3FeatureFlagsNameWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3FeatureFlagsNameResponse, error) {
	rsp, err := c.PatchV3FeatureFlagsNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3FeatureFlagsNameResponse(rsp)
}

func (c *ClientWithResponses) PatchV3FeatureFlagsNameWithResponse(ctx context.Context, name string, body PatchV3FeatureFlagsNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3FeatureFlagsNameResponse, error) {
	rsp, err := c.PatchV3FeatureFlagsName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3FeatureFlagsNameResponse(rsp)
}

// GetV3InfoWithResponse request returning *GetV3InfoResponse
func (c *ClientWithResponses) GetV3InfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV3InfoResponse, error) {
	rsp, err := c.GetV3Info(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3InfoResponse(rsp)
}

// GetV3InfoUsageSummaryWithResponse request returning *GetV3InfoUsageSummaryResponse
func (c *ClientWithResponses) GetV3InfoUsageSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV3InfoUsageSummaryResponse, error) {
	rsp, err := c.GetV3InfoUsageSummary(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3InfoUsageSummaryResponse(rsp)
}

// GetV3IsolationSegmentsWithResponse request returning *GetV3IsolationSegmentsResponse
func (c *ClientWithResponses) GetV3IsolationSegmentsWithResponse(ctx context.Context, params *GetV3IsolationSegmentsParams, reqEditors ...RequestEditorFn) (*GetV3IsolationSegmentsResponse, error) {
	rsp, err := c.GetV3IsolationSegments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3IsolationSegmentsResponse(rsp)
}

// PostV3IsolationSegmentsWithBodyWithResponse request with arbitrary body returning *PostV3IsolationSegmentsResponse
func (c *ClientWithResponses) PostV3IsolationSegmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3IsolationSegmentsResponse, error) {
	rsp, err := c.PostV3IsolationSegmentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3IsolationSegmentsResponse(rsp)
}

func (c *ClientWithResponses) PostV3IsolationSegmentsWithResponse(ctx context.Context, body PostV3IsolationSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3IsolationSegmentsResponse, error) {
	rsp, err := c.PostV3IsolationSegments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3IsolationSegmentsResponse(rsp)
}

// DeleteV3IsolationSegmentsGuidWithResponse request returning *DeleteV3IsolationSegmentsGuidResponse
func (c *ClientWithResponses) DeleteV3IsolationSegmentsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3IsolationSegmentsGuidResponse, error) {
	rsp, err := c.DeleteV3IsolationSegmentsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3IsolationSegmentsGuidResponse(rsp)
}

// GetV3IsolationSegmentsGuidWithResponse request returning *GetV3IsolationSegmentsGuidResponse
func (c *ClientWithResponses) GetV3IsolationSegmentsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3IsolationSegmentsGuidResponse, error) {
	rsp, err := c.GetV3IsolationSegmentsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3IsolationSegmentsGuidResponse(rsp)
}

// PatchV3IsolationSegmentsGuidWithBodyWithResponse request with arbitrary body returning *PatchV3IsolationSegmentsGuidResponse
func (c *ClientWithResponses) PatchV3IsolationSegmentsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3IsolationSegmentsGuidResponse, error) {
	rsp, err := c.PatchV3IsolationSegmentsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3IsolationSegmentsGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3IsolationSegmentsGuidWithResponse(ctx context.Context, guid string, body PatchV3IsolationSegmentsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3IsolationSegmentsGuidResponse, error) {
	rsp, err := c.PatchV3IsolationSegmentsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3IsolationSegmentsGuidResponse(rsp)
}

// GetV3IsolationSegmentsGuidRelationshipsOrganizationsWithResponse request returning *GetV3IsolationSegmentsGuidRelationshipsOrganizationsResponse
func (c *ClientWithResponses) GetV3IsolationSegmentsGuidRelationshipsOrganizationsWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3IsolationSegmentsGuidRelationshipsOrganizationsResponse, error) {
	rsp, err := c.GetV3IsolationSegmentsGuidRelationshipsOrganizations(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3IsolationSegmentsGuidRelationshipsOrganizationsResponse(rsp)
}

// PostV3IsolationSegmentsGuidRelationshipsOrganizationsWithBodyWithResponse request with arbitrary body returning *PostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse
func (c *ClientWithResponses) PostV3IsolationSegmentsGuidRelationshipsOrganizationsWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse, error) {
	rsp, err := c.PostV3IsolationSegmentsGuidRelationshipsOrganizationsWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostV3IsolationSegmentsGuidRelationshipsOrganizationsWithResponse(ctx context.Context, guid string, body PostV3IsolationSegmentsGuidRelationshipsOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse, error) {
	rsp, err := c.PostV3IsolationSegmentsGuidRelationshipsOrganizations(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse(rsp)
}

// DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidWithResponse request returning *DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidResponse
func (c *ClientWithResponses) DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidWithResponse(ctx context.Context, guid string, orgGuid string, reqEditors ...RequestEditorFn) (*DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidResponse, error) {
	rsp, err := c.DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuid(ctx, guid, orgGuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidResponse(rsp)
}

// GetV3IsolationSegmentsGuidRelationshipsSpacesWithResponse request returning *GetV3IsolationSegmentsGuidRelationshipsSpacesResponse
func (c *ClientWithResponses) GetV3IsolationSegmentsGuidRelationshipsSpacesWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3IsolationSegmentsGuidRelationshipsSpacesResponse, error) {
	rsp, err := c.GetV3IsolationSegmentsGuidRelationshipsSpaces(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3IsolationSegmentsGuidRelationshipsSpacesResponse(rsp)
}

// GetV3JobsWithResponse request returning *GetV3JobsResponse
func (c *ClientWithResponses) GetV3JobsWithResponse(ctx context.Context, params *GetV3JobsParams, reqEditors ...RequestEditorFn) (*GetV3JobsResponse, error) {
	rsp, err := c.GetV3Jobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3JobsResponse(rsp)
}

// GetV3JobsGuidWithResponse request returning *GetV3JobsGuidResponse
func (c *ClientWithResponses) GetV3JobsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3JobsGuidResponse, error) {
	rsp, err := c.GetV3JobsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3JobsGuidResponse(rsp)
}

// ListOrganizationQuotasWithResponse request returning *ListOrganizationQuotasResponse
func (c *ClientWithResponses) ListOrganizationQuotasWithResponse(ctx context.Context, params *ListOrganizationQuotasParams, reqEditors ...RequestEditorFn) (*ListOrganizationQuotasResponse, error) {
	rsp, err := c.ListOrganizationQuotas(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationQuotasResponse(rsp)
}

// CreateOrganizationQuotaWithBodyWithResponse request with arbitrary body returning *CreateOrganizationQuotaResponse
func (c *ClientWithResponses) CreateOrganizationQuotaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationQuotaResponse, error) {
	rsp, err := c.CreateOrganizationQuotaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationQuotaResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationQuotaWithResponse(ctx context.Context, body CreateOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationQuotaResponse, error) {
	rsp, err := c.CreateOrganizationQuota(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationQuotaResponse(rsp)
}

// DeleteOrganizationQuotaWithResponse request returning *DeleteOrganizationQuotaResponse
func (c *ClientWithResponses) DeleteOrganizationQuotaWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteOrganizationQuotaResponse, error) {
	rsp, err := c.DeleteOrganizationQuota(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationQuotaResponse(rsp)
}

// GetOrganizationQuotaWithResponse request returning *GetOrganizationQuotaResponse
func (c *ClientWithResponses) GetOrganizationQuotaWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetOrganizationQuotaParams, reqEditors ...RequestEditorFn) (*GetOrganizationQuotaResponse, error) {
	rsp, err := c.GetOrganizationQuota(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationQuotaResponse(rsp)
}

// UpdateOrganizationQuotaWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationQuotaResponse
func (c *ClientWithResponses) UpdateOrganizationQuotaWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationQuotaResponse, error) {
	rsp, err := c.UpdateOrganizationQuotaWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationQuotaResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationQuotaWithResponse(ctx context.Context, guid openapi_types.UUID, body UpdateOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationQuotaResponse, error) {
	rsp, err := c.UpdateOrganizationQuota(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationQuotaResponse(rsp)
}

// ApplyOrganizationQuotaToOrganizationsWithBodyWithResponse request with arbitrary body returning *ApplyOrganizationQuotaToOrganizationsResponse
func (c *ClientWithResponses) ApplyOrganizationQuotaToOrganizationsWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyOrganizationQuotaToOrganizationsResponse, error) {
	rsp, err := c.ApplyOrganizationQuotaToOrganizationsWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplyOrganizationQuotaToOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) ApplyOrganizationQuotaToOrganizationsWithResponse(ctx context.Context, guid openapi_types.UUID, body ApplyOrganizationQuotaToOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyOrganizationQuotaToOrganizationsResponse, error) {
	rsp, err := c.ApplyOrganizationQuotaToOrganizations(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplyOrganizationQuotaToOrganizationsResponse(rsp)
}

// ListOrganizationsWithResponse request returning *ListOrganizationsResponse
func (c *ClientWithResponses) ListOrganizationsWithResponse(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error) {
	rsp, err := c.ListOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

// DeleteOrganizationWithResponse request returning *DeleteOrganizationResponse
func (c *ClientWithResponses) DeleteOrganizationWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error) {
	rsp, err := c.DeleteOrganization(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// UpdateOrganizationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationResponse
func (c *ClientWithResponses) UpdateOrganizationWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganizationWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationWithResponse(ctx context.Context, guid string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganization(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

// GetDefaultDomainWithResponse request returning *GetDefaultDomainResponse
func (c *ClientWithResponses) GetDefaultDomainWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetDefaultDomainResponse, error) {
	rsp, err := c.GetDefaultDomain(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultDomainResponse(rsp)
}

// GetDefaultIsolationSegmentWithResponse request returning *GetDefaultIsolationSegmentResponse
func (c *ClientWithResponses) GetDefaultIsolationSegmentWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetDefaultIsolationSegmentResponse, error) {
	rsp, err := c.GetDefaultIsolationSegment(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultIsolationSegmentResponse(rsp)
}

// AssignDefaultIsolationSegmentWithBodyWithResponse request with arbitrary body returning *AssignDefaultIsolationSegmentResponse
func (c *ClientWithResponses) AssignDefaultIsolationSegmentWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignDefaultIsolationSegmentResponse, error) {
	rsp, err := c.AssignDefaultIsolationSegmentWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignDefaultIsolationSegmentResponse(rsp)
}

func (c *ClientWithResponses) AssignDefaultIsolationSegmentWithResponse(ctx context.Context, guid string, body AssignDefaultIsolationSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignDefaultIsolationSegmentResponse, error) {
	rsp, err := c.AssignDefaultIsolationSegment(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignDefaultIsolationSegmentResponse(rsp)
}

// GetUsageSummaryWithResponse request returning *GetUsageSummaryResponse
func (c *ClientWithResponses) GetUsageSummaryWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetUsageSummaryResponse, error) {
	rsp, err := c.GetUsageSummary(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsageSummaryResponse(rsp)
}

// ListUsersForOrganizationWithResponse request returning *ListUsersForOrganizationResponse
func (c *ClientWithResponses) ListUsersForOrganizationWithResponse(ctx context.Context, guid string, params *ListUsersForOrganizationParams, reqEditors ...RequestEditorFn) (*ListUsersForOrganizationResponse, error) {
	rsp, err := c.ListUsersForOrganization(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsersForOrganizationResponse(rsp)
}

// GetV3PackagesWithResponse request returning *GetV3PackagesResponse
func (c *ClientWithResponses) GetV3PackagesWithResponse(ctx context.Context, params *GetV3PackagesParams, reqEditors ...RequestEditorFn) (*GetV3PackagesResponse, error) {
	rsp, err := c.GetV3Packages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3PackagesResponse(rsp)
}

// PostV3PackagesWithBodyWithResponse request with arbitrary body returning *PostV3PackagesResponse
func (c *ClientWithResponses) PostV3PackagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3PackagesResponse, error) {
	rsp, err := c.PostV3PackagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3PackagesResponse(rsp)
}

func (c *ClientWithResponses) PostV3PackagesWithResponse(ctx context.Context, body PostV3PackagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3PackagesResponse, error) {
	rsp, err := c.PostV3Packages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3PackagesResponse(rsp)
}

// DeleteV3PackagesGuidWithResponse request returning *DeleteV3PackagesGuidResponse
func (c *ClientWithResponses) DeleteV3PackagesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3PackagesGuidResponse, error) {
	rsp, err := c.DeleteV3PackagesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3PackagesGuidResponse(rsp)
}

// GetV3PackagesGuidWithResponse request returning *GetV3PackagesGuidResponse
func (c *ClientWithResponses) GetV3PackagesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3PackagesGuidResponse, error) {
	rsp, err := c.GetV3PackagesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3PackagesGuidResponse(rsp)
}

// PatchV3PackagesGuidWithBodyWithResponse request with arbitrary body returning *PatchV3PackagesGuidResponse
func (c *ClientWithResponses) PatchV3PackagesGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3PackagesGuidResponse, error) {
	rsp, err := c.PatchV3PackagesGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3PackagesGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3PackagesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3PackagesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3PackagesGuidResponse, error) {
	rsp, err := c.PatchV3PackagesGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3PackagesGuidResponse(rsp)
}

// PostV3PackagesGuidCopyWithBodyWithResponse request with arbitrary body returning *PostV3PackagesGuidCopyResponse
func (c *ClientWithResponses) PostV3PackagesGuidCopyWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3PackagesGuidCopyResponse, error) {
	rsp, err := c.PostV3PackagesGuidCopyWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3PackagesGuidCopyResponse(rsp)
}

func (c *ClientWithResponses) PostV3PackagesGuidCopyWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3PackagesGuidCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3PackagesGuidCopyResponse, error) {
	rsp, err := c.PostV3PackagesGuidCopy(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3PackagesGuidCopyResponse(rsp)
}

// GetV3PackagesGuidDownloadWithResponse request returning *GetV3PackagesGuidDownloadResponse
func (c *ClientWithResponses) GetV3PackagesGuidDownloadWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3PackagesGuidDownloadResponse, error) {
	rsp, err := c.GetV3PackagesGuidDownload(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3PackagesGuidDownloadResponse(rsp)
}

// GetV3PackagesGuidDropletsWithResponse request returning *GetV3PackagesGuidDropletsResponse
func (c *ClientWithResponses) GetV3PackagesGuidDropletsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3PackagesGuidDropletsParams, reqEditors ...RequestEditorFn) (*GetV3PackagesGuidDropletsResponse, error) {
	rsp, err := c.GetV3PackagesGuidDroplets(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3PackagesGuidDropletsResponse(rsp)
}

// PostV3PackagesGuidUploadWithBodyWithResponse request with arbitrary body returning *PostV3PackagesGuidUploadResponse
func (c *ClientWithResponses) PostV3PackagesGuidUploadWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3PackagesGuidUploadResponse, error) {
	rsp, err := c.PostV3PackagesGuidUploadWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3PackagesGuidUploadResponse(rsp)
}

// GetV3ProcessesWithResponse request returning *GetV3ProcessesResponse
func (c *ClientWithResponses) GetV3ProcessesWithResponse(ctx context.Context, params *GetV3ProcessesParams, reqEditors ...RequestEditorFn) (*GetV3ProcessesResponse, error) {
	rsp, err := c.GetV3Processes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ProcessesResponse(rsp)
}

// GetV3ProcessesGuidWithResponse request returning *GetV3ProcessesGuidResponse
func (c *ClientWithResponses) GetV3ProcessesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3ProcessesGuidResponse, error) {
	rsp, err := c.GetV3ProcessesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ProcessesGuidResponse(rsp)
}

// PatchV3ProcessesGuidWithBodyWithResponse request with arbitrary body returning *PatchV3ProcessesGuidResponse
func (c *ClientWithResponses) PatchV3ProcessesGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ProcessesGuidResponse, error) {
	rsp, err := c.PatchV3ProcessesGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ProcessesGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3ProcessesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3ProcessesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ProcessesGuidResponse, error) {
	rsp, err := c.PatchV3ProcessesGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ProcessesGuidResponse(rsp)
}

// PostV3ProcessesGuidActionsScaleWithBodyWithResponse request with arbitrary body returning *PostV3ProcessesGuidActionsScaleResponse
func (c *ClientWithResponses) PostV3ProcessesGuidActionsScaleWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ProcessesGuidActionsScaleResponse, error) {
	rsp, err := c.PostV3ProcessesGuidActionsScaleWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ProcessesGuidActionsScaleResponse(rsp)
}

func (c *ClientWithResponses) PostV3ProcessesGuidActionsScaleWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3ProcessesGuidActionsScaleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ProcessesGuidActionsScaleResponse, error) {
	rsp, err := c.PostV3ProcessesGuidActionsScale(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ProcessesGuidActionsScaleResponse(rsp)
}

// DeleteV3ProcessesGuidInstancesIndexWithResponse request returning *DeleteV3ProcessesGuidInstancesIndexResponse
func (c *ClientWithResponses) DeleteV3ProcessesGuidInstancesIndexWithResponse(ctx context.Context, guid openapi_types.UUID, index int, reqEditors ...RequestEditorFn) (*DeleteV3ProcessesGuidInstancesIndexResponse, error) {
	rsp, err := c.DeleteV3ProcessesGuidInstancesIndex(ctx, guid, index, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3ProcessesGuidInstancesIndexResponse(rsp)
}

// GetV3ProcessesGuidSidecarsWithResponse request returning *GetV3ProcessesGuidSidecarsResponse
func (c *ClientWithResponses) GetV3ProcessesGuidSidecarsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3ProcessesGuidSidecarsParams, reqEditors ...RequestEditorFn) (*GetV3ProcessesGuidSidecarsResponse, error) {
	rsp, err := c.GetV3ProcessesGuidSidecars(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ProcessesGuidSidecarsResponse(rsp)
}

// GetV3ProcessesGuidStatsWithResponse request returning *GetV3ProcessesGuidStatsResponse
func (c *ClientWithResponses) GetV3ProcessesGuidStatsWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3ProcessesGuidStatsResponse, error) {
	rsp, err := c.GetV3ProcessesGuidStats(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ProcessesGuidStatsResponse(rsp)
}

// PostV3ResourceMatchesWithBodyWithResponse request with arbitrary body returning *PostV3ResourceMatchesResponse
func (c *ClientWithResponses) PostV3ResourceMatchesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ResourceMatchesResponse, error) {
	rsp, err := c.PostV3ResourceMatchesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ResourceMatchesResponse(rsp)
}

func (c *ClientWithResponses) PostV3ResourceMatchesWithResponse(ctx context.Context, body PostV3ResourceMatchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ResourceMatchesResponse, error) {
	rsp, err := c.PostV3ResourceMatches(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ResourceMatchesResponse(rsp)
}

// GetV3RevisionsGuidWithResponse request returning *GetV3RevisionsGuidResponse
func (c *ClientWithResponses) GetV3RevisionsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3RevisionsGuidResponse, error) {
	rsp, err := c.GetV3RevisionsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3RevisionsGuidResponse(rsp)
}

// PatchV3RevisionsGuidWithBodyWithResponse request with arbitrary body returning *PatchV3RevisionsGuidResponse
func (c *ClientWithResponses) PatchV3RevisionsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3RevisionsGuidResponse, error) {
	rsp, err := c.PatchV3RevisionsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3RevisionsGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3RevisionsGuidWithResponse(ctx context.Context, guid string, body PatchV3RevisionsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3RevisionsGuidResponse, error) {
	rsp, err := c.PatchV3RevisionsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3RevisionsGuidResponse(rsp)
}

// GetV3RevisionsGuidEnvironmentVariablesWithResponse request returning *GetV3RevisionsGuidEnvironmentVariablesResponse
func (c *ClientWithResponses) GetV3RevisionsGuidEnvironmentVariablesWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3RevisionsGuidEnvironmentVariablesResponse, error) {
	rsp, err := c.GetV3RevisionsGuidEnvironmentVariables(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3RevisionsGuidEnvironmentVariablesResponse(rsp)
}

// GetV3RolesWithResponse request returning *GetV3RolesResponse
func (c *ClientWithResponses) GetV3RolesWithResponse(ctx context.Context, params *GetV3RolesParams, reqEditors ...RequestEditorFn) (*GetV3RolesResponse, error) {
	rsp, err := c.GetV3Roles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3RolesResponse(rsp)
}

// PostV3RolesWithBodyWithResponse request with arbitrary body returning *PostV3RolesResponse
func (c *ClientWithResponses) PostV3RolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3RolesResponse, error) {
	rsp, err := c.PostV3RolesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3RolesResponse(rsp)
}

func (c *ClientWithResponses) PostV3RolesWithResponse(ctx context.Context, body PostV3RolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3RolesResponse, error) {
	rsp, err := c.PostV3Roles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3RolesResponse(rsp)
}

// DeleteV3RolesGuidWithResponse request returning *DeleteV3RolesGuidResponse
func (c *ClientWithResponses) DeleteV3RolesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3RolesGuidResponse, error) {
	rsp, err := c.DeleteV3RolesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3RolesGuidResponse(rsp)
}

// GetV3RolesGuidWithResponse request returning *GetV3RolesGuidResponse
func (c *ClientWithResponses) GetV3RolesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3RolesGuidParams, reqEditors ...RequestEditorFn) (*GetV3RolesGuidResponse, error) {
	rsp, err := c.GetV3RolesGuid(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3RolesGuidResponse(rsp)
}

// GetV3RoutesWithResponse request returning *GetV3RoutesResponse
func (c *ClientWithResponses) GetV3RoutesWithResponse(ctx context.Context, params *GetV3RoutesParams, reqEditors ...RequestEditorFn) (*GetV3RoutesResponse, error) {
	rsp, err := c.GetV3Routes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3RoutesResponse(rsp)
}

// PostV3RoutesWithBodyWithResponse request with arbitrary body returning *PostV3RoutesResponse
func (c *ClientWithResponses) PostV3RoutesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3RoutesResponse, error) {
	rsp, err := c.PostV3RoutesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3RoutesResponse(rsp)
}

func (c *ClientWithResponses) PostV3RoutesWithResponse(ctx context.Context, body PostV3RoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3RoutesResponse, error) {
	rsp, err := c.PostV3Routes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3RoutesResponse(rsp)
}

// DeleteV3RoutesGuidWithResponse request returning *DeleteV3RoutesGuidResponse
func (c *ClientWithResponses) DeleteV3RoutesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3RoutesGuidResponse, error) {
	rsp, err := c.DeleteV3RoutesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3RoutesGuidResponse(rsp)
}

// GetV3RoutesGuidWithResponse request returning *GetV3RoutesGuidResponse
func (c *ClientWithResponses) GetV3RoutesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3RoutesGuidParams, reqEditors ...RequestEditorFn) (*GetV3RoutesGuidResponse, error) {
	rsp, err := c.GetV3RoutesGuid(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3RoutesGuidResponse(rsp)
}

// PatchV3RoutesGuidWithBodyWithResponse request with arbitrary body returning *PatchV3RoutesGuidResponse
func (c *ClientWithResponses) PatchV3RoutesGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidResponse, error) {
	rsp, err := c.PatchV3RoutesGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3RoutesGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3RoutesGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidResponse, error) {
	rsp, err := c.PatchV3RoutesGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3RoutesGuidResponse(rsp)
}

// GetV3RoutesGuidDestinationsWithResponse request returning *GetV3RoutesGuidDestinationsResponse
func (c *ClientWithResponses) GetV3RoutesGuidDestinationsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3RoutesGuidDestinationsParams, reqEditors ...RequestEditorFn) (*GetV3RoutesGuidDestinationsResponse, error) {
	rsp, err := c.GetV3RoutesGuidDestinations(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3RoutesGuidDestinationsResponse(rsp)
}

// PatchV3RoutesGuidDestinationsWithBodyWithResponse request with arbitrary body returning *PatchV3RoutesGuidDestinationsResponse
func (c *ClientWithResponses) PatchV3RoutesGuidDestinationsWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidDestinationsResponse, error) {
	rsp, err := c.PatchV3RoutesGuidDestinationsWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3RoutesGuidDestinationsResponse(rsp)
}

func (c *ClientWithResponses) PatchV3RoutesGuidDestinationsWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidDestinationsResponse, error) {
	rsp, err := c.PatchV3RoutesGuidDestinations(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3RoutesGuidDestinationsResponse(rsp)
}

// PostV3RoutesGuidDestinationsWithBodyWithResponse request with arbitrary body returning *PostV3RoutesGuidDestinationsResponse
func (c *ClientWithResponses) PostV3RoutesGuidDestinationsWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3RoutesGuidDestinationsResponse, error) {
	rsp, err := c.PostV3RoutesGuidDestinationsWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3RoutesGuidDestinationsResponse(rsp)
}

func (c *ClientWithResponses) PostV3RoutesGuidDestinationsWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3RoutesGuidDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3RoutesGuidDestinationsResponse, error) {
	rsp, err := c.PostV3RoutesGuidDestinations(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3RoutesGuidDestinationsResponse(rsp)
}

// DeleteV3RoutesGuidDestinationsDestinationGuidWithResponse request returning *DeleteV3RoutesGuidDestinationsDestinationGuidResponse
func (c *ClientWithResponses) DeleteV3RoutesGuidDestinationsDestinationGuidWithResponse(ctx context.Context, guid openapi_types.UUID, destinationGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3RoutesGuidDestinationsDestinationGuidResponse, error) {
	rsp, err := c.DeleteV3RoutesGuidDestinationsDestinationGuid(ctx, guid, destinationGuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3RoutesGuidDestinationsDestinationGuidResponse(rsp)
}

// GetV3RoutesGuidRelationshipsSharedSpacesWithResponse request returning *GetV3RoutesGuidRelationshipsSharedSpacesResponse
func (c *ClientWithResponses) GetV3RoutesGuidRelationshipsSharedSpacesWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3RoutesGuidRelationshipsSharedSpacesResponse, error) {
	rsp, err := c.GetV3RoutesGuidRelationshipsSharedSpaces(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3RoutesGuidRelationshipsSharedSpacesResponse(rsp)
}

// PatchV3RoutesGuidRelationshipsSpaceWithBodyWithResponse request with arbitrary body returning *PatchV3RoutesGuidRelationshipsSpaceResponse
func (c *ClientWithResponses) PatchV3RoutesGuidRelationshipsSpaceWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidRelationshipsSpaceResponse, error) {
	rsp, err := c.PatchV3RoutesGuidRelationshipsSpaceWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3RoutesGuidRelationshipsSpaceResponse(rsp)
}

func (c *ClientWithResponses) PatchV3RoutesGuidRelationshipsSpaceWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3RoutesGuidRelationshipsSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3RoutesGuidRelationshipsSpaceResponse, error) {
	rsp, err := c.PatchV3RoutesGuidRelationshipsSpace(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3RoutesGuidRelationshipsSpaceResponse(rsp)
}

// PostV3RoutesGuidTransferOwnerWithBodyWithResponse request with arbitrary body returning *PostV3RoutesGuidTransferOwnerResponse
func (c *ClientWithResponses) PostV3RoutesGuidTransferOwnerWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3RoutesGuidTransferOwnerResponse, error) {
	rsp, err := c.PostV3RoutesGuidTransferOwnerWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3RoutesGuidTransferOwnerResponse(rsp)
}

func (c *ClientWithResponses) PostV3RoutesGuidTransferOwnerWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3RoutesGuidTransferOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3RoutesGuidTransferOwnerResponse, error) {
	rsp, err := c.PostV3RoutesGuidTransferOwner(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3RoutesGuidTransferOwnerResponse(rsp)
}

// GetV3SecurityGroupsWithResponse request returning *GetV3SecurityGroupsResponse
func (c *ClientWithResponses) GetV3SecurityGroupsWithResponse(ctx context.Context, params *GetV3SecurityGroupsParams, reqEditors ...RequestEditorFn) (*GetV3SecurityGroupsResponse, error) {
	rsp, err := c.GetV3SecurityGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SecurityGroupsResponse(rsp)
}

// PostV3SecurityGroupsWithBodyWithResponse request with arbitrary body returning *PostV3SecurityGroupsResponse
func (c *ClientWithResponses) PostV3SecurityGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsResponse, error) {
	rsp, err := c.PostV3SecurityGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SecurityGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostV3SecurityGroupsWithResponse(ctx context.Context, body PostV3SecurityGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsResponse, error) {
	rsp, err := c.PostV3SecurityGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SecurityGroupsResponse(rsp)
}

// DeleteV3SecurityGroupsGuidWithResponse request returning *DeleteV3SecurityGroupsGuidResponse
func (c *ClientWithResponses) DeleteV3SecurityGroupsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SecurityGroupsGuidResponse, error) {
	rsp, err := c.DeleteV3SecurityGroupsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3SecurityGroupsGuidResponse(rsp)
}

// GetV3SecurityGroupsGuidWithResponse request returning *GetV3SecurityGroupsGuidResponse
func (c *ClientWithResponses) GetV3SecurityGroupsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3SecurityGroupsGuidResponse, error) {
	rsp, err := c.GetV3SecurityGroupsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SecurityGroupsGuidResponse(rsp)
}

// PatchV3SecurityGroupsGuidWithBodyWithResponse request with arbitrary body returning *PatchV3SecurityGroupsGuidResponse
func (c *ClientWithResponses) PatchV3SecurityGroupsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SecurityGroupsGuidResponse, error) {
	rsp, err := c.PatchV3SecurityGroupsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SecurityGroupsGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3SecurityGroupsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3SecurityGroupsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SecurityGroupsGuidResponse, error) {
	rsp, err := c.PatchV3SecurityGroupsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SecurityGroupsGuidResponse(rsp)
}

// PostV3SecurityGroupsGuidRelationshipsRunningSpacesWithBodyWithResponse request with arbitrary body returning *PostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse
func (c *ClientWithResponses) PostV3SecurityGroupsGuidRelationshipsRunningSpacesWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse, error) {
	rsp, err := c.PostV3SecurityGroupsGuidRelationshipsRunningSpacesWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse(rsp)
}

func (c *ClientWithResponses) PostV3SecurityGroupsGuidRelationshipsRunningSpacesWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3SecurityGroupsGuidRelationshipsRunningSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse, error) {
	rsp, err := c.PostV3SecurityGroupsGuidRelationshipsRunningSpaces(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse(rsp)
}

// DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidWithResponse request returning *DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidResponse
func (c *ClientWithResponses) DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidWithResponse(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidResponse, error) {
	rsp, err := c.DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuid(ctx, guid, spaceGuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidResponse(rsp)
}

// PostV3SecurityGroupsGuidRelationshipsStagingSpacesWithBodyWithResponse request with arbitrary body returning *PostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse
func (c *ClientWithResponses) PostV3SecurityGroupsGuidRelationshipsStagingSpacesWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse, error) {
	rsp, err := c.PostV3SecurityGroupsGuidRelationshipsStagingSpacesWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse(rsp)
}

func (c *ClientWithResponses) PostV3SecurityGroupsGuidRelationshipsStagingSpacesWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3SecurityGroupsGuidRelationshipsStagingSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse, error) {
	rsp, err := c.PostV3SecurityGroupsGuidRelationshipsStagingSpaces(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse(rsp)
}

// DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidWithResponse request returning *DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidResponse
func (c *ClientWithResponses) DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidWithResponse(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidResponse, error) {
	rsp, err := c.DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuid(ctx, guid, spaceGuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidResponse(rsp)
}

// GetV3ServiceBrokersWithResponse request returning *GetV3ServiceBrokersResponse
func (c *ClientWithResponses) GetV3ServiceBrokersWithResponse(ctx context.Context, params *GetV3ServiceBrokersParams, reqEditors ...RequestEditorFn) (*GetV3ServiceBrokersResponse, error) {
	rsp, err := c.GetV3ServiceBrokers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceBrokersResponse(rsp)
}

// PostV3ServiceBrokersWithBodyWithResponse request with arbitrary body returning *PostV3ServiceBrokersResponse
func (c *ClientWithResponses) PostV3ServiceBrokersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServiceBrokersResponse, error) {
	rsp, err := c.PostV3ServiceBrokersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceBrokersResponse(rsp)
}

func (c *ClientWithResponses) PostV3ServiceBrokersWithResponse(ctx context.Context, body PostV3ServiceBrokersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServiceBrokersResponse, error) {
	rsp, err := c.PostV3ServiceBrokers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceBrokersResponse(rsp)
}

// DeleteV3ServiceBrokersGuidWithResponse request returning *DeleteV3ServiceBrokersGuidResponse
func (c *ClientWithResponses) DeleteV3ServiceBrokersGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3ServiceBrokersGuidResponse, error) {
	rsp, err := c.DeleteV3ServiceBrokersGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3ServiceBrokersGuidResponse(rsp)
}

// GetV3ServiceBrokersGuidWithResponse request returning *GetV3ServiceBrokersGuidResponse
func (c *ClientWithResponses) GetV3ServiceBrokersGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceBrokersGuidResponse, error) {
	rsp, err := c.GetV3ServiceBrokersGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceBrokersGuidResponse(rsp)
}

// PatchV3ServiceBrokersGuidWithBodyWithResponse request with arbitrary body returning *PatchV3ServiceBrokersGuidResponse
func (c *ClientWithResponses) PatchV3ServiceBrokersGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServiceBrokersGuidResponse, error) {
	rsp, err := c.PatchV3ServiceBrokersGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServiceBrokersGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3ServiceBrokersGuidWithResponse(ctx context.Context, guid string, body PatchV3ServiceBrokersGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServiceBrokersGuidResponse, error) {
	rsp, err := c.PatchV3ServiceBrokersGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServiceBrokersGuidResponse(rsp)
}

// PostV3ServiceBrokersGuidCatalogWithResponse request returning *PostV3ServiceBrokersGuidCatalogResponse
func (c *ClientWithResponses) PostV3ServiceBrokersGuidCatalogWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*PostV3ServiceBrokersGuidCatalogResponse, error) {
	rsp, err := c.PostV3ServiceBrokersGuidCatalog(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceBrokersGuidCatalogResponse(rsp)
}

// GetV3ServiceBrokersGuidJobsSynchronizationWithResponse request returning *GetV3ServiceBrokersGuidJobsSynchronizationResponse
func (c *ClientWithResponses) GetV3ServiceBrokersGuidJobsSynchronizationWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceBrokersGuidJobsSynchronizationResponse, error) {
	rsp, err := c.GetV3ServiceBrokersGuidJobsSynchronization(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceBrokersGuidJobsSynchronizationResponse(rsp)
}

// PostV3ServiceCredentialBindingsWithBodyWithResponse request with arbitrary body returning *PostV3ServiceCredentialBindingsResponse
func (c *ClientWithResponses) PostV3ServiceCredentialBindingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServiceCredentialBindingsResponse, error) {
	rsp, err := c.PostV3ServiceCredentialBindingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceCredentialBindingsResponse(rsp)
}

func (c *ClientWithResponses) PostV3ServiceCredentialBindingsWithResponse(ctx context.Context, body PostV3ServiceCredentialBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServiceCredentialBindingsResponse, error) {
	rsp, err := c.PostV3ServiceCredentialBindings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceCredentialBindingsResponse(rsp)
}

// DeleteV3ServiceCredentialBindingsGuidWithResponse request returning *DeleteV3ServiceCredentialBindingsGuidResponse
func (c *ClientWithResponses) DeleteV3ServiceCredentialBindingsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3ServiceCredentialBindingsGuidResponse, error) {
	rsp, err := c.DeleteV3ServiceCredentialBindingsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3ServiceCredentialBindingsGuidResponse(rsp)
}

// GetV3ServiceCredentialBindingsGuidWithResponse request returning *GetV3ServiceCredentialBindingsGuidResponse
func (c *ClientWithResponses) GetV3ServiceCredentialBindingsGuidWithResponse(ctx context.Context, guid string, params *GetV3ServiceCredentialBindingsGuidParams, reqEditors ...RequestEditorFn) (*GetV3ServiceCredentialBindingsGuidResponse, error) {
	rsp, err := c.GetV3ServiceCredentialBindingsGuid(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceCredentialBindingsGuidResponse(rsp)
}

// PatchV3ServiceCredentialBindingsGuidWithBodyWithResponse request with arbitrary body returning *PatchV3ServiceCredentialBindingsGuidResponse
func (c *ClientWithResponses) PatchV3ServiceCredentialBindingsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServiceCredentialBindingsGuidResponse, error) {
	rsp, err := c.PatchV3ServiceCredentialBindingsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServiceCredentialBindingsGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3ServiceCredentialBindingsGuidWithResponse(ctx context.Context, guid string, body PatchV3ServiceCredentialBindingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServiceCredentialBindingsGuidResponse, error) {
	rsp, err := c.PatchV3ServiceCredentialBindingsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServiceCredentialBindingsGuidResponse(rsp)
}

// GetV3ServiceCredentialBindingsGuidDetailsWithResponse request returning *GetV3ServiceCredentialBindingsGuidDetailsResponse
func (c *ClientWithResponses) GetV3ServiceCredentialBindingsGuidDetailsWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceCredentialBindingsGuidDetailsResponse, error) {
	rsp, err := c.GetV3ServiceCredentialBindingsGuidDetails(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceCredentialBindingsGuidDetailsResponse(rsp)
}

// GetV3ServiceCredentialBindingsGuidParametersWithResponse request returning *GetV3ServiceCredentialBindingsGuidParametersResponse
func (c *ClientWithResponses) GetV3ServiceCredentialBindingsGuidParametersWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceCredentialBindingsGuidParametersResponse, error) {
	rsp, err := c.GetV3ServiceCredentialBindingsGuidParameters(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceCredentialBindingsGuidParametersResponse(rsp)
}

// GetV3ServiceInstancesWithResponse request returning *GetV3ServiceInstancesResponse
func (c *ClientWithResponses) GetV3ServiceInstancesWithResponse(ctx context.Context, params *GetV3ServiceInstancesParams, reqEditors ...RequestEditorFn) (*GetV3ServiceInstancesResponse, error) {
	rsp, err := c.GetV3ServiceInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceInstancesResponse(rsp)
}

// DeleteV3ServiceInstancesGuidWithResponse request returning *DeleteV3ServiceInstancesGuidResponse
func (c *ClientWithResponses) DeleteV3ServiceInstancesGuidWithResponse(ctx context.Context, guid string, params *DeleteV3ServiceInstancesGuidParams, reqEditors ...RequestEditorFn) (*DeleteV3ServiceInstancesGuidResponse, error) {
	rsp, err := c.DeleteV3ServiceInstancesGuid(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3ServiceInstancesGuidResponse(rsp)
}

// PatchV3ServiceInstancesGuidWithBodyWithResponse request with arbitrary body returning *PatchV3ServiceInstancesGuidResponse
func (c *ClientWithResponses) PatchV3ServiceInstancesGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServiceInstancesGuidResponse, error) {
	rsp, err := c.PatchV3ServiceInstancesGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServiceInstancesGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3ServiceInstancesGuidWithResponse(ctx context.Context, guid string, body PatchV3ServiceInstancesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServiceInstancesGuidResponse, error) {
	rsp, err := c.PatchV3ServiceInstancesGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServiceInstancesGuidResponse(rsp)
}

// GetV3ServiceInstancesGuidCredentialsWithResponse request returning *GetV3ServiceInstancesGuidCredentialsResponse
func (c *ClientWithResponses) GetV3ServiceInstancesGuidCredentialsWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceInstancesGuidCredentialsResponse, error) {
	rsp, err := c.GetV3ServiceInstancesGuidCredentials(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceInstancesGuidCredentialsResponse(rsp)
}

// GetV3ServiceInstancesGuidRelationshipsSharedSpacesWithResponse request returning *GetV3ServiceInstancesGuidRelationshipsSharedSpacesResponse
func (c *ClientWithResponses) GetV3ServiceInstancesGuidRelationshipsSharedSpacesWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceInstancesGuidRelationshipsSharedSpacesResponse, error) {
	rsp, err := c.GetV3ServiceInstancesGuidRelationshipsSharedSpaces(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceInstancesGuidRelationshipsSharedSpacesResponse(rsp)
}

// PostV3ServiceInstancesGuidRelationshipsSharedSpacesWithBodyWithResponse request with arbitrary body returning *PostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse
func (c *ClientWithResponses) PostV3ServiceInstancesGuidRelationshipsSharedSpacesWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse, error) {
	rsp, err := c.PostV3ServiceInstancesGuidRelationshipsSharedSpacesWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse(rsp)
}

func (c *ClientWithResponses) PostV3ServiceInstancesGuidRelationshipsSharedSpacesWithResponse(ctx context.Context, guid string, body PostV3ServiceInstancesGuidRelationshipsSharedSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse, error) {
	rsp, err := c.PostV3ServiceInstancesGuidRelationshipsSharedSpaces(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse(rsp)
}

// GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryWithResponse request returning *GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryResponse
func (c *ClientWithResponses) GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryResponse, error) {
	rsp, err := c.GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummary(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryResponse(rsp)
}

// DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidWithResponse request returning *DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidResponse
func (c *ClientWithResponses) DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidWithResponse(ctx context.Context, guid string, spaceGuid string, reqEditors ...RequestEditorFn) (*DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidResponse, error) {
	rsp, err := c.DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuid(ctx, guid, spaceGuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidResponse(rsp)
}

// GetV3ServiceOfferingsWithResponse request returning *GetV3ServiceOfferingsResponse
func (c *ClientWithResponses) GetV3ServiceOfferingsWithResponse(ctx context.Context, params *GetV3ServiceOfferingsParams, reqEditors ...RequestEditorFn) (*GetV3ServiceOfferingsResponse, error) {
	rsp, err := c.GetV3ServiceOfferings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceOfferingsResponse(rsp)
}

// PostV3ServiceOfferingsWithBodyWithResponse request with arbitrary body returning *PostV3ServiceOfferingsResponse
func (c *ClientWithResponses) PostV3ServiceOfferingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServiceOfferingsResponse, error) {
	rsp, err := c.PostV3ServiceOfferingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceOfferingsResponse(rsp)
}

func (c *ClientWithResponses) PostV3ServiceOfferingsWithResponse(ctx context.Context, body PostV3ServiceOfferingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServiceOfferingsResponse, error) {
	rsp, err := c.PostV3ServiceOfferings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceOfferingsResponse(rsp)
}

// DeleteV3ServiceOfferingsGuidWithResponse request returning *DeleteV3ServiceOfferingsGuidResponse
func (c *ClientWithResponses) DeleteV3ServiceOfferingsGuidWithResponse(ctx context.Context, guid string, params *DeleteV3ServiceOfferingsGuidParams, reqEditors ...RequestEditorFn) (*DeleteV3ServiceOfferingsGuidResponse, error) {
	rsp, err := c.DeleteV3ServiceOfferingsGuid(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3ServiceOfferingsGuidResponse(rsp)
}

// GetV3ServiceOfferingsGuidWithResponse request returning *GetV3ServiceOfferingsGuidResponse
func (c *ClientWithResponses) GetV3ServiceOfferingsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceOfferingsGuidResponse, error) {
	rsp, err := c.GetV3ServiceOfferingsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceOfferingsGuidResponse(rsp)
}

// PatchV3ServiceOfferingsGuidWithBodyWithResponse request with arbitrary body returning *PatchV3ServiceOfferingsGuidResponse
func (c *ClientWithResponses) PatchV3ServiceOfferingsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServiceOfferingsGuidResponse, error) {
	rsp, err := c.PatchV3ServiceOfferingsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServiceOfferingsGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3ServiceOfferingsGuidWithResponse(ctx context.Context, guid string, body PatchV3ServiceOfferingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServiceOfferingsGuidResponse, error) {
	rsp, err := c.PatchV3ServiceOfferingsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServiceOfferingsGuidResponse(rsp)
}

// GetV3ServicePlansWithResponse request returning *GetV3ServicePlansResponse
func (c *ClientWithResponses) GetV3ServicePlansWithResponse(ctx context.Context, params *GetV3ServicePlansParams, reqEditors ...RequestEditorFn) (*GetV3ServicePlansResponse, error) {
	rsp, err := c.GetV3ServicePlans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServicePlansResponse(rsp)
}

// PostV3ServicePlansWithBodyWithResponse request with arbitrary body returning *PostV3ServicePlansResponse
func (c *ClientWithResponses) PostV3ServicePlansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServicePlansResponse, error) {
	rsp, err := c.PostV3ServicePlansWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServicePlansResponse(rsp)
}

func (c *ClientWithResponses) PostV3ServicePlansWithResponse(ctx context.Context, body PostV3ServicePlansJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServicePlansResponse, error) {
	rsp, err := c.PostV3ServicePlans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServicePlansResponse(rsp)
}

// DeleteV3ServicePlansGuidWithResponse request returning *DeleteV3ServicePlansGuidResponse
func (c *ClientWithResponses) DeleteV3ServicePlansGuidWithResponse(ctx context.Context, guid string, params *DeleteV3ServicePlansGuidParams, reqEditors ...RequestEditorFn) (*DeleteV3ServicePlansGuidResponse, error) {
	rsp, err := c.DeleteV3ServicePlansGuid(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3ServicePlansGuidResponse(rsp)
}

// GetV3ServicePlansGuidWithResponse request returning *GetV3ServicePlansGuidResponse
func (c *ClientWithResponses) GetV3ServicePlansGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServicePlansGuidResponse, error) {
	rsp, err := c.GetV3ServicePlansGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServicePlansGuidResponse(rsp)
}

// PatchV3ServicePlansGuidWithBodyWithResponse request with arbitrary body returning *PatchV3ServicePlansGuidResponse
func (c *ClientWithResponses) PatchV3ServicePlansGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServicePlansGuidResponse, error) {
	rsp, err := c.PatchV3ServicePlansGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServicePlansGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3ServicePlansGuidWithResponse(ctx context.Context, guid string, body PatchV3ServicePlansGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServicePlansGuidResponse, error) {
	rsp, err := c.PatchV3ServicePlansGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServicePlansGuidResponse(rsp)
}

// GetV3ServicePlansGuidVisibilityWithResponse request returning *GetV3ServicePlansGuidVisibilityResponse
func (c *ClientWithResponses) GetV3ServicePlansGuidVisibilityWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3ServicePlansGuidVisibilityResponse, error) {
	rsp, err := c.GetV3ServicePlansGuidVisibility(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServicePlansGuidVisibilityResponse(rsp)
}

// PatchV3ServicePlansGuidVisibilityWithBodyWithResponse request with arbitrary body returning *PatchV3ServicePlansGuidVisibilityResponse
func (c *ClientWithResponses) PatchV3ServicePlansGuidVisibilityWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServicePlansGuidVisibilityResponse, error) {
	rsp, err := c.PatchV3ServicePlansGuidVisibilityWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServicePlansGuidVisibilityResponse(rsp)
}

func (c *ClientWithResponses) PatchV3ServicePlansGuidVisibilityWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3ServicePlansGuidVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServicePlansGuidVisibilityResponse, error) {
	rsp, err := c.PatchV3ServicePlansGuidVisibility(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServicePlansGuidVisibilityResponse(rsp)
}

// PostV3ServicePlansGuidVisibilityWithBodyWithResponse request with arbitrary body returning *PostV3ServicePlansGuidVisibilityResponse
func (c *ClientWithResponses) PostV3ServicePlansGuidVisibilityWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServicePlansGuidVisibilityResponse, error) {
	rsp, err := c.PostV3ServicePlansGuidVisibilityWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServicePlansGuidVisibilityResponse(rsp)
}

func (c *ClientWithResponses) PostV3ServicePlansGuidVisibilityWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3ServicePlansGuidVisibilityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServicePlansGuidVisibilityResponse, error) {
	rsp, err := c.PostV3ServicePlansGuidVisibility(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServicePlansGuidVisibilityResponse(rsp)
}

// DeleteV3ServicePlansGuidVisibilityOrganizationGuidWithResponse request returning *DeleteV3ServicePlansGuidVisibilityOrganizationGuidResponse
func (c *ClientWithResponses) DeleteV3ServicePlansGuidVisibilityOrganizationGuidWithResponse(ctx context.Context, guid openapi_types.UUID, organizationGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3ServicePlansGuidVisibilityOrganizationGuidResponse, error) {
	rsp, err := c.DeleteV3ServicePlansGuidVisibilityOrganizationGuid(ctx, guid, organizationGuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3ServicePlansGuidVisibilityOrganizationGuidResponse(rsp)
}

// GetV3ServiceRouteBindingsWithResponse request returning *GetV3ServiceRouteBindingsResponse
func (c *ClientWithResponses) GetV3ServiceRouteBindingsWithResponse(ctx context.Context, params *GetV3ServiceRouteBindingsParams, reqEditors ...RequestEditorFn) (*GetV3ServiceRouteBindingsResponse, error) {
	rsp, err := c.GetV3ServiceRouteBindings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceRouteBindingsResponse(rsp)
}

// PostV3ServiceRouteBindingsWithBodyWithResponse request with arbitrary body returning *PostV3ServiceRouteBindingsResponse
func (c *ClientWithResponses) PostV3ServiceRouteBindingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3ServiceRouteBindingsResponse, error) {
	rsp, err := c.PostV3ServiceRouteBindingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceRouteBindingsResponse(rsp)
}

func (c *ClientWithResponses) PostV3ServiceRouteBindingsWithResponse(ctx context.Context, body PostV3ServiceRouteBindingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3ServiceRouteBindingsResponse, error) {
	rsp, err := c.PostV3ServiceRouteBindings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceRouteBindingsResponse(rsp)
}

// DeleteV3ServiceRouteBindingsGuidWithResponse request returning *DeleteV3ServiceRouteBindingsGuidResponse
func (c *ClientWithResponses) DeleteV3ServiceRouteBindingsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3ServiceRouteBindingsGuidResponse, error) {
	rsp, err := c.DeleteV3ServiceRouteBindingsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3ServiceRouteBindingsGuidResponse(rsp)
}

// GetV3ServiceRouteBindingsGuidWithResponse request returning *GetV3ServiceRouteBindingsGuidResponse
func (c *ClientWithResponses) GetV3ServiceRouteBindingsGuidWithResponse(ctx context.Context, guid string, params *GetV3ServiceRouteBindingsGuidParams, reqEditors ...RequestEditorFn) (*GetV3ServiceRouteBindingsGuidResponse, error) {
	rsp, err := c.GetV3ServiceRouteBindingsGuid(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceRouteBindingsGuidResponse(rsp)
}

// PatchV3ServiceRouteBindingsGuidWithBodyWithResponse request with arbitrary body returning *PatchV3ServiceRouteBindingsGuidResponse
func (c *ClientWithResponses) PatchV3ServiceRouteBindingsGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3ServiceRouteBindingsGuidResponse, error) {
	rsp, err := c.PatchV3ServiceRouteBindingsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServiceRouteBindingsGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3ServiceRouteBindingsGuidWithResponse(ctx context.Context, guid string, body PatchV3ServiceRouteBindingsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3ServiceRouteBindingsGuidResponse, error) {
	rsp, err := c.PatchV3ServiceRouteBindingsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3ServiceRouteBindingsGuidResponse(rsp)
}

// GetV3ServiceRouteBindingsGuidParametersWithResponse request returning *GetV3ServiceRouteBindingsGuidParametersResponse
func (c *ClientWithResponses) GetV3ServiceRouteBindingsGuidParametersWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceRouteBindingsGuidParametersResponse, error) {
	rsp, err := c.GetV3ServiceRouteBindingsGuidParameters(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceRouteBindingsGuidParametersResponse(rsp)
}

// GetV3ServiceUsageEventsWithResponse request returning *GetV3ServiceUsageEventsResponse
func (c *ClientWithResponses) GetV3ServiceUsageEventsWithResponse(ctx context.Context, params *GetV3ServiceUsageEventsParams, reqEditors ...RequestEditorFn) (*GetV3ServiceUsageEventsResponse, error) {
	rsp, err := c.GetV3ServiceUsageEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceUsageEventsResponse(rsp)
}

// PostV3ServiceUsageEventsWithResponse request returning *PostV3ServiceUsageEventsResponse
func (c *ClientWithResponses) PostV3ServiceUsageEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV3ServiceUsageEventsResponse, error) {
	rsp, err := c.PostV3ServiceUsageEvents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3ServiceUsageEventsResponse(rsp)
}

// GetV3ServiceUsageEventsGuidWithResponse request returning *GetV3ServiceUsageEventsGuidResponse
func (c *ClientWithResponses) GetV3ServiceUsageEventsGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3ServiceUsageEventsGuidResponse, error) {
	rsp, err := c.GetV3ServiceUsageEventsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3ServiceUsageEventsGuidResponse(rsp)
}

// DeleteV3SidecarsGuidWithResponse request returning *DeleteV3SidecarsGuidResponse
func (c *ClientWithResponses) DeleteV3SidecarsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SidecarsGuidResponse, error) {
	rsp, err := c.DeleteV3SidecarsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3SidecarsGuidResponse(rsp)
}

// GetV3SidecarsGuidWithResponse request returning *GetV3SidecarsGuidResponse
func (c *ClientWithResponses) GetV3SidecarsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3SidecarsGuidResponse, error) {
	rsp, err := c.GetV3SidecarsGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SidecarsGuidResponse(rsp)
}

// PatchV3SidecarsGuidWithBodyWithResponse request with arbitrary body returning *PatchV3SidecarsGuidResponse
func (c *ClientWithResponses) PatchV3SidecarsGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SidecarsGuidResponse, error) {
	rsp, err := c.PatchV3SidecarsGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SidecarsGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3SidecarsGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3SidecarsGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SidecarsGuidResponse, error) {
	rsp, err := c.PatchV3SidecarsGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SidecarsGuidResponse(rsp)
}

// GetV3SidecarsGuidProcessesWithResponse request returning *GetV3SidecarsGuidProcessesResponse
func (c *ClientWithResponses) GetV3SidecarsGuidProcessesWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3SidecarsGuidProcessesParams, reqEditors ...RequestEditorFn) (*GetV3SidecarsGuidProcessesResponse, error) {
	rsp, err := c.GetV3SidecarsGuidProcesses(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SidecarsGuidProcessesResponse(rsp)
}

// GetV3SpaceQuotasWithResponse request returning *GetV3SpaceQuotasResponse
func (c *ClientWithResponses) GetV3SpaceQuotasWithResponse(ctx context.Context, params *GetV3SpaceQuotasParams, reqEditors ...RequestEditorFn) (*GetV3SpaceQuotasResponse, error) {
	rsp, err := c.GetV3SpaceQuotas(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SpaceQuotasResponse(rsp)
}

// PostV3SpaceQuotasWithBodyWithResponse request with arbitrary body returning *PostV3SpaceQuotasResponse
func (c *ClientWithResponses) PostV3SpaceQuotasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SpaceQuotasResponse, error) {
	rsp, err := c.PostV3SpaceQuotasWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SpaceQuotasResponse(rsp)
}

func (c *ClientWithResponses) PostV3SpaceQuotasWithResponse(ctx context.Context, body PostV3SpaceQuotasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SpaceQuotasResponse, error) {
	rsp, err := c.PostV3SpaceQuotas(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SpaceQuotasResponse(rsp)
}

// DeleteV3SpaceQuotasGuidWithResponse request returning *DeleteV3SpaceQuotasGuidResponse
func (c *ClientWithResponses) DeleteV3SpaceQuotasGuidWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SpaceQuotasGuidResponse, error) {
	rsp, err := c.DeleteV3SpaceQuotasGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3SpaceQuotasGuidResponse(rsp)
}

// GetV3SpaceQuotasGuidWithResponse request returning *GetV3SpaceQuotasGuidResponse
func (c *ClientWithResponses) GetV3SpaceQuotasGuidWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3SpaceQuotasGuidParams, reqEditors ...RequestEditorFn) (*GetV3SpaceQuotasGuidResponse, error) {
	rsp, err := c.GetV3SpaceQuotasGuid(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SpaceQuotasGuidResponse(rsp)
}

// PatchV3SpaceQuotasGuidWithBodyWithResponse request with arbitrary body returning *PatchV3SpaceQuotasGuidResponse
func (c *ClientWithResponses) PatchV3SpaceQuotasGuidWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SpaceQuotasGuidResponse, error) {
	rsp, err := c.PatchV3SpaceQuotasGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SpaceQuotasGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3SpaceQuotasGuidWithResponse(ctx context.Context, guid openapi_types.UUID, body PatchV3SpaceQuotasGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SpaceQuotasGuidResponse, error) {
	rsp, err := c.PatchV3SpaceQuotasGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SpaceQuotasGuidResponse(rsp)
}

// PostV3SpaceQuotasGuidRelationshipsSpacesWithBodyWithResponse request with arbitrary body returning *PostV3SpaceQuotasGuidRelationshipsSpacesResponse
func (c *ClientWithResponses) PostV3SpaceQuotasGuidRelationshipsSpacesWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SpaceQuotasGuidRelationshipsSpacesResponse, error) {
	rsp, err := c.PostV3SpaceQuotasGuidRelationshipsSpacesWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SpaceQuotasGuidRelationshipsSpacesResponse(rsp)
}

func (c *ClientWithResponses) PostV3SpaceQuotasGuidRelationshipsSpacesWithResponse(ctx context.Context, guid openapi_types.UUID, body PostV3SpaceQuotasGuidRelationshipsSpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SpaceQuotasGuidRelationshipsSpacesResponse, error) {
	rsp, err := c.PostV3SpaceQuotasGuidRelationshipsSpaces(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SpaceQuotasGuidRelationshipsSpacesResponse(rsp)
}

// DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidWithResponse request returning *DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidResponse
func (c *ClientWithResponses) DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidWithResponse(ctx context.Context, guid openapi_types.UUID, spaceGuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidResponse, error) {
	rsp, err := c.DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuid(ctx, guid, spaceGuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidResponse(rsp)
}

// GetV3SpacesWithResponse request returning *GetV3SpacesResponse
func (c *ClientWithResponses) GetV3SpacesWithResponse(ctx context.Context, params *GetV3SpacesParams, reqEditors ...RequestEditorFn) (*GetV3SpacesResponse, error) {
	rsp, err := c.GetV3Spaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SpacesResponse(rsp)
}

// PostV3SpacesWithBodyWithResponse request with arbitrary body returning *PostV3SpacesResponse
func (c *ClientWithResponses) PostV3SpacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SpacesResponse, error) {
	rsp, err := c.PostV3SpacesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SpacesResponse(rsp)
}

func (c *ClientWithResponses) PostV3SpacesWithResponse(ctx context.Context, body PostV3SpacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3SpacesResponse, error) {
	rsp, err := c.PostV3Spaces(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SpacesResponse(rsp)
}

// DeleteV3SpacesGuidWithResponse request returning *DeleteV3SpacesGuidResponse
func (c *ClientWithResponses) DeleteV3SpacesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3SpacesGuidResponse, error) {
	rsp, err := c.DeleteV3SpacesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3SpacesGuidResponse(rsp)
}

// GetV3SpacesGuidWithResponse request returning *GetV3SpacesGuidResponse
func (c *ClientWithResponses) GetV3SpacesGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidResponse, error) {
	rsp, err := c.GetV3SpacesGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SpacesGuidResponse(rsp)
}

// PatchV3SpacesGuidWithBodyWithResponse request with arbitrary body returning *PatchV3SpacesGuidResponse
func (c *ClientWithResponses) PatchV3SpacesGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidResponse, error) {
	rsp, err := c.PatchV3SpacesGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SpacesGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3SpacesGuidWithResponse(ctx context.Context, guid string, body PatchV3SpacesGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidResponse, error) {
	rsp, err := c.PatchV3SpacesGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SpacesGuidResponse(rsp)
}

// GetV3SpacesGuidFeaturesWithResponse request returning *GetV3SpacesGuidFeaturesResponse
func (c *ClientWithResponses) GetV3SpacesGuidFeaturesWithResponse(ctx context.Context, guid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidFeaturesResponse, error) {
	rsp, err := c.GetV3SpacesGuidFeatures(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SpacesGuidFeaturesResponse(rsp)
}

// GetV3SpacesGuidFeaturesNameWithResponse request returning *GetV3SpacesGuidFeaturesNameResponse
func (c *ClientWithResponses) GetV3SpacesGuidFeaturesNameWithResponse(ctx context.Context, guid openapi_types.UUID, name GetV3SpacesGuidFeaturesNameParamsName, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidFeaturesNameResponse, error) {
	rsp, err := c.GetV3SpacesGuidFeaturesName(ctx, guid, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SpacesGuidFeaturesNameResponse(rsp)
}

// PatchV3SpacesGuidFeaturesNameWithBodyWithResponse request with arbitrary body returning *PatchV3SpacesGuidFeaturesNameResponse
func (c *ClientWithResponses) PatchV3SpacesGuidFeaturesNameWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, name PatchV3SpacesGuidFeaturesNameParamsName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidFeaturesNameResponse, error) {
	rsp, err := c.PatchV3SpacesGuidFeaturesNameWithBody(ctx, guid, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SpacesGuidFeaturesNameResponse(rsp)
}

func (c *ClientWithResponses) PatchV3SpacesGuidFeaturesNameWithResponse(ctx context.Context, guid openapi_types.UUID, name PatchV3SpacesGuidFeaturesNameParamsName, body PatchV3SpacesGuidFeaturesNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidFeaturesNameResponse, error) {
	rsp, err := c.PatchV3SpacesGuidFeaturesName(ctx, guid, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SpacesGuidFeaturesNameResponse(rsp)
}

// PostV3SpacesGuidManifestWithBodyWithResponse request with arbitrary body returning *PostV3SpacesGuidManifestResponse
func (c *ClientWithResponses) PostV3SpacesGuidManifestWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SpacesGuidManifestResponse, error) {
	rsp, err := c.PostV3SpacesGuidManifestWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SpacesGuidManifestResponse(rsp)
}

// PostV3SpacesGuidManifestDiffWithBodyWithResponse request with arbitrary body returning *PostV3SpacesGuidManifestDiffResponse
func (c *ClientWithResponses) PostV3SpacesGuidManifestDiffWithBodyWithResponse(ctx context.Context, guid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3SpacesGuidManifestDiffResponse, error) {
	rsp, err := c.PostV3SpacesGuidManifestDiffWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3SpacesGuidManifestDiffResponse(rsp)
}

// GetV3SpacesGuidRelationshipsIsolationSegmentWithResponse request returning *GetV3SpacesGuidRelationshipsIsolationSegmentResponse
func (c *ClientWithResponses) GetV3SpacesGuidRelationshipsIsolationSegmentWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidRelationshipsIsolationSegmentResponse, error) {
	rsp, err := c.GetV3SpacesGuidRelationshipsIsolationSegment(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SpacesGuidRelationshipsIsolationSegmentResponse(rsp)
}

// PatchV3SpacesGuidRelationshipsIsolationSegmentWithBodyWithResponse request with arbitrary body returning *PatchV3SpacesGuidRelationshipsIsolationSegmentResponse
func (c *ClientWithResponses) PatchV3SpacesGuidRelationshipsIsolationSegmentWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidRelationshipsIsolationSegmentResponse, error) {
	rsp, err := c.PatchV3SpacesGuidRelationshipsIsolationSegmentWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SpacesGuidRelationshipsIsolationSegmentResponse(rsp)
}

func (c *ClientWithResponses) PatchV3SpacesGuidRelationshipsIsolationSegmentWithResponse(ctx context.Context, guid string, body PatchV3SpacesGuidRelationshipsIsolationSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3SpacesGuidRelationshipsIsolationSegmentResponse, error) {
	rsp, err := c.PatchV3SpacesGuidRelationshipsIsolationSegment(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3SpacesGuidRelationshipsIsolationSegmentResponse(rsp)
}

// GetV3SpacesGuidRunningSecurityGroupsWithResponse request returning *GetV3SpacesGuidRunningSecurityGroupsResponse
func (c *ClientWithResponses) GetV3SpacesGuidRunningSecurityGroupsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3SpacesGuidRunningSecurityGroupsParams, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidRunningSecurityGroupsResponse, error) {
	rsp, err := c.GetV3SpacesGuidRunningSecurityGroups(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SpacesGuidRunningSecurityGroupsResponse(rsp)
}

// GetV3SpacesGuidStagingSecurityGroupsWithResponse request returning *GetV3SpacesGuidStagingSecurityGroupsResponse
func (c *ClientWithResponses) GetV3SpacesGuidStagingSecurityGroupsWithResponse(ctx context.Context, guid openapi_types.UUID, params *GetV3SpacesGuidStagingSecurityGroupsParams, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidStagingSecurityGroupsResponse, error) {
	rsp, err := c.GetV3SpacesGuidStagingSecurityGroups(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SpacesGuidStagingSecurityGroupsResponse(rsp)
}

// GetV3SpacesGuidUsersWithResponse request returning *GetV3SpacesGuidUsersResponse
func (c *ClientWithResponses) GetV3SpacesGuidUsersWithResponse(ctx context.Context, guid string, params *GetV3SpacesGuidUsersParams, reqEditors ...RequestEditorFn) (*GetV3SpacesGuidUsersResponse, error) {
	rsp, err := c.GetV3SpacesGuidUsers(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3SpacesGuidUsersResponse(rsp)
}

// GetV3StacksWithResponse request returning *GetV3StacksResponse
func (c *ClientWithResponses) GetV3StacksWithResponse(ctx context.Context, params *GetV3StacksParams, reqEditors ...RequestEditorFn) (*GetV3StacksResponse, error) {
	rsp, err := c.GetV3Stacks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3StacksResponse(rsp)
}

// PostV3StacksWithBodyWithResponse request with arbitrary body returning *PostV3StacksResponse
func (c *ClientWithResponses) PostV3StacksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3StacksResponse, error) {
	rsp, err := c.PostV3StacksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3StacksResponse(rsp)
}

func (c *ClientWithResponses) PostV3StacksWithResponse(ctx context.Context, body PostV3StacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3StacksResponse, error) {
	rsp, err := c.PostV3Stacks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3StacksResponse(rsp)
}

// DeleteV3StacksGuidWithResponse request returning *DeleteV3StacksGuidResponse
func (c *ClientWithResponses) DeleteV3StacksGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3StacksGuidResponse, error) {
	rsp, err := c.DeleteV3StacksGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3StacksGuidResponse(rsp)
}

// GetV3StacksGuidWithResponse request returning *GetV3StacksGuidResponse
func (c *ClientWithResponses) GetV3StacksGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3StacksGuidResponse, error) {
	rsp, err := c.GetV3StacksGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3StacksGuidResponse(rsp)
}

// PatchV3StacksGuidWithBodyWithResponse request with arbitrary body returning *PatchV3StacksGuidResponse
func (c *ClientWithResponses) PatchV3StacksGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3StacksGuidResponse, error) {
	rsp, err := c.PatchV3StacksGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3StacksGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3StacksGuidWithResponse(ctx context.Context, guid string, body PatchV3StacksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3StacksGuidResponse, error) {
	rsp, err := c.PatchV3StacksGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3StacksGuidResponse(rsp)
}

// GetV3StacksGuidAppsWithResponse request returning *GetV3StacksGuidAppsResponse
func (c *ClientWithResponses) GetV3StacksGuidAppsWithResponse(ctx context.Context, guid string, params *GetV3StacksGuidAppsParams, reqEditors ...RequestEditorFn) (*GetV3StacksGuidAppsResponse, error) {
	rsp, err := c.GetV3StacksGuidApps(ctx, guid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3StacksGuidAppsResponse(rsp)
}

// GetV3TasksWithResponse request returning *GetV3TasksResponse
func (c *ClientWithResponses) GetV3TasksWithResponse(ctx context.Context, params *GetV3TasksParams, reqEditors ...RequestEditorFn) (*GetV3TasksResponse, error) {
	rsp, err := c.GetV3Tasks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3TasksResponse(rsp)
}

// GetV3TasksGuidWithResponse request returning *GetV3TasksGuidResponse
func (c *ClientWithResponses) GetV3TasksGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3TasksGuidResponse, error) {
	rsp, err := c.GetV3TasksGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3TasksGuidResponse(rsp)
}

// PatchV3TasksGuidWithBodyWithResponse request with arbitrary body returning *PatchV3TasksGuidResponse
func (c *ClientWithResponses) PatchV3TasksGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3TasksGuidResponse, error) {
	rsp, err := c.PatchV3TasksGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3TasksGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3TasksGuidWithResponse(ctx context.Context, guid string, body PatchV3TasksGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3TasksGuidResponse, error) {
	rsp, err := c.PatchV3TasksGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3TasksGuidResponse(rsp)
}

// PostV3TasksGuidWithResponse request returning *PostV3TasksGuidResponse
func (c *ClientWithResponses) PostV3TasksGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*PostV3TasksGuidResponse, error) {
	rsp, err := c.PostV3TasksGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3TasksGuidResponse(rsp)
}

// GetV3UsersWithResponse request returning *GetV3UsersResponse
func (c *ClientWithResponses) GetV3UsersWithResponse(ctx context.Context, params *GetV3UsersParams, reqEditors ...RequestEditorFn) (*GetV3UsersResponse, error) {
	rsp, err := c.GetV3Users(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3UsersResponse(rsp)
}

// PostV3UsersWithBodyWithResponse request with arbitrary body returning *PostV3UsersResponse
func (c *ClientWithResponses) PostV3UsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3UsersResponse, error) {
	rsp, err := c.PostV3UsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3UsersResponse(rsp)
}

func (c *ClientWithResponses) PostV3UsersWithResponse(ctx context.Context, body PostV3UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3UsersResponse, error) {
	rsp, err := c.PostV3Users(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3UsersResponse(rsp)
}

// DeleteV3UsersGuidWithResponse request returning *DeleteV3UsersGuidResponse
func (c *ClientWithResponses) DeleteV3UsersGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*DeleteV3UsersGuidResponse, error) {
	rsp, err := c.DeleteV3UsersGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV3UsersGuidResponse(rsp)
}

// GetV3UsersGuidWithResponse request returning *GetV3UsersGuidResponse
func (c *ClientWithResponses) GetV3UsersGuidWithResponse(ctx context.Context, guid string, reqEditors ...RequestEditorFn) (*GetV3UsersGuidResponse, error) {
	rsp, err := c.GetV3UsersGuid(ctx, guid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3UsersGuidResponse(rsp)
}

// PatchV3UsersGuidWithBodyWithResponse request with arbitrary body returning *PatchV3UsersGuidResponse
func (c *ClientWithResponses) PatchV3UsersGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV3UsersGuidResponse, error) {
	rsp, err := c.PatchV3UsersGuidWithBody(ctx, guid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3UsersGuidResponse(rsp)
}

func (c *ClientWithResponses) PatchV3UsersGuidWithResponse(ctx context.Context, guid string, body PatchV3UsersGuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV3UsersGuidResponse, error) {
	rsp, err := c.PatchV3UsersGuid(ctx, guid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV3UsersGuidResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				AppSsh *struct {
					Href *string `json:"href,omitempty"`
					Meta *struct {
						HostKeyFingerprint *string `json:"host_key_fingerprint,omitempty"`
						OauthClient        *string `json:"oauth_client,omitempty"`
					} `json:"meta,omitempty"`
				} `json:"app_ssh,omitempty"`
				CloudControllerV2 *struct {
					Href *string `json:"href,omitempty"`
					Meta *struct {
						Version *string `json:"version,omitempty"`
					} `json:"meta,omitempty"`
				} `json:"cloud_controller_v2,omitempty"`
				CloudControllerV3 *struct {
					Href *string `json:"href,omitempty"`
					Meta *struct {
						Version *string `json:"version,omitempty"`
					} `json:"meta,omitempty"`
				} `json:"cloud_controller_v3,omitempty"`
				Credhub  *map[string]interface{} `json:"credhub"`
				LogCache *struct {
					Href *string `json:"href,omitempty"`
				} `json:"log_cache,omitempty"`
				LogStream *struct {
					Href *string `json:"href,omitempty"`
				} `json:"log_stream,omitempty"`
				Logging *struct {
					Href *string `json:"href,omitempty"`
				} `json:"logging,omitempty"`
				Login *struct {
					Href *string `json:"href,omitempty"`
				} `json:"login,omitempty"`
				NetworkPolicyV0 *struct {
					Href *string `json:"href,omitempty"`
				} `json:"network_policy_v0,omitempty"`
				NetworkPolicyV1 *struct {
					Href *string `json:"href,omitempty"`
				} `json:"network_policy_v1,omitempty"`
				Routing *struct {
					Href *string `json:"href,omitempty"`
				} `json:"routing,omitempty"`
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
				Uaa *struct {
					Href *string `json:"href,omitempty"`
				} `json:"uaa,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3Response parses an HTTP response from a GetV3WithResponse call
func ParseGetV3Response(rsp *http.Response) (*GetV3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				AppUsageEvents *struct {
					Href *string `json:"href,omitempty"`
				} `json:"app_usage_events,omitempty"`
				Apps *struct {
					Href *string `json:"href,omitempty"`
				} `json:"apps,omitempty"`
				AuditEvents *struct {
					Href *string `json:"href,omitempty"`
				} `json:"audit_events,omitempty"`
				Buildpacks *struct {
					Href *string `json:"href,omitempty"`
				} `json:"buildpacks,omitempty"`
				Builds *struct {
					Href *string `json:"href,omitempty"`
				} `json:"builds,omitempty"`
				Deployments *struct {
					Href *string `json:"href,omitempty"`
				} `json:"deployments,omitempty"`
				Domains *struct {
					Href *string `json:"href,omitempty"`
				} `json:"domains,omitempty"`
				Droplets *struct {
					Href *string `json:"href,omitempty"`
				} `json:"droplets,omitempty"`
				EnvironmentVariableGroups *struct {
					Href *string `json:"href,omitempty"`
				} `json:"environment_variable_groups,omitempty"`
				FeatureFlags *struct {
					Href *string `json:"href,omitempty"`
				} `json:"feature_flags,omitempty"`
				Info *struct {
					Href *string `json:"href,omitempty"`
				} `json:"info,omitempty"`
				IsolationSegments *struct {
					Href *string `json:"href,omitempty"`
				} `json:"isolation_segments,omitempty"`
				OrganizationQuotas *struct {
					Href *string `json:"href,omitempty"`
				} `json:"organization_quotas,omitempty"`
				Organizations *struct {
					Href *string `json:"href,omitempty"`
				} `json:"organizations,omitempty"`
				Packages *struct {
					Href *string `json:"href,omitempty"`
				} `json:"packages,omitempty"`
				Processes *struct {
					Href *string `json:"href,omitempty"`
				} `json:"processes,omitempty"`
				ResourceMatches *struct {
					Href *string `json:"href,omitempty"`
				} `json:"resource_matches,omitempty"`
				Roles *struct {
					Href *string `json:"href,omitempty"`
				} `json:"roles,omitempty"`
				Routes *struct {
					Href *string `json:"href,omitempty"`
				} `json:"routes,omitempty"`
				SecurityGroups *struct {
					Href *string `json:"href,omitempty"`
				} `json:"security_groups,omitempty"`
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
				ServiceBrokers *struct {
					Href *string `json:"href,omitempty"`
				} `json:"service_brokers,omitempty"`
				ServiceInstances *struct {
					Href *string `json:"href,omitempty"`
				} `json:"service_instances"`
				ServiceOfferings *struct {
					Href *string `json:"href,omitempty"`
				} `json:"service_offerings,omitempty"`
				ServicePlans *struct {
					Href *string `json:"href,omitempty"`
				} `json:"service_plans,omitempty"`
				ServiceUsageEvents *struct {
					Href *string `json:"href,omitempty"`
				} `json:"service_usage_events,omitempty"`
				SpaceQuotas *struct {
					Href *string `json:"href,omitempty"`
				} `json:"space_quotas,omitempty"`
				Spaces *struct {
					Href *string `json:"href,omitempty"`
				} `json:"spaces,omitempty"`
				Stacks *struct {
					Href *string `json:"href,omitempty"`
				} `json:"stacks,omitempty"`
				Tasks *struct {
					Href *string `json:"href,omitempty"`
				} `json:"tasks,omitempty"`
				Users *struct {
					Href *string `json:"href,omitempty"`
				} `json:"users,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3AdminActionsClearBuildpackCacheResponse parses an HTTP response from a PostV3AdminActionsClearBuildpackCacheWithResponse call
func ParsePostV3AdminActionsClearBuildpackCacheResponse(rsp *http.Response) (*PostV3AdminActionsClearBuildpackCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3AdminActionsClearBuildpackCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3AppUsageEventsResponse parses an HTTP response from a GetV3AppUsageEventsWithResponse call
func ParseGetV3AppUsageEventsResponse(rsp *http.Response) (*GetV3AppUsageEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppUsageEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppUsageEventList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedResponse parses an HTTP response from a PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedWithResponse call
func ParsePostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedResponse(rsp *http.Response) (*PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3AppUsageEventsActionsDestructivelyPurgeAllAndReseedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3AppUsageEventsGuidResponse parses an HTTP response from a GetV3AppUsageEventsGuidWithResponse call
func ParseGetV3AppUsageEventsGuidResponse(rsp *http.Response) (*GetV3AppUsageEventsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppUsageEventsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppUsageEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAppsResponse parses an HTTP response from a ListAppsWithResponse call
func ParseListAppsResponse(rsp *http.Response) (*ListAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Included *struct {
				Organizations *[]Organization `json:"organizations,omitempty"`
				Spaces        *[]Space        `json:"spaces,omitempty"`
			} `json:"included,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]App      `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAppResponse parses an HTTP response from a CreateAppWithResponse call
func ParseCreateAppResponse(rsp *http.Response) (*CreateAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest App
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAppResponse parses an HTTP response from a DeleteAppWithResponse call
func ParseDeleteAppResponse(rsp *http.Response) (*DeleteAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAppResponse parses an HTTP response from a GetAppWithResponse call
func ParseGetAppResponse(rsp *http.Response) (*GetAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest App
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateAppResponse parses an HTTP response from a UpdateAppWithResponse call
func ParseUpdateAppResponse(rsp *http.Response) (*UpdateAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest App
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3AppsGuidActionsApplyManifestResponse parses an HTTP response from a PostV3AppsGuidActionsApplyManifestWithResponse call
func ParsePostV3AppsGuidActionsApplyManifestResponse(rsp *http.Response) (*PostV3AppsGuidActionsApplyManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3AppsGuidActionsApplyManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Guid  *openapi_types.UUID `json:"guid,omitempty"`
			Links *struct {
				Job *struct {
					Href *string `json:"href,omitempty"`
				} `json:"job,omitempty"`
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseClearAppBuildpackCacheResponse parses an HTTP response from a ClearAppBuildpackCacheWithResponse call
func ParseClearAppBuildpackCacheResponse(rsp *http.Response) (*ClearAppBuildpackCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClearAppBuildpackCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRestartAppResponse parses an HTTP response from a RestartAppWithResponse call
func ParseRestartAppResponse(rsp *http.Response) (*RestartAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestartAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest App
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStartAppResponse parses an HTTP response from a StartAppWithResponse call
func ParseStartAppResponse(rsp *http.Response) (*StartAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest App
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStopAppResponse parses an HTTP response from a StopAppWithResponse call
func ParseStopAppResponse(rsp *http.Response) (*StopAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest App
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidBuildsResponse parses an HTTP response from a GetV3AppsGuidBuildsWithResponse call
func ParseGetV3AppsGuidBuildsResponse(rsp *http.Response) (*GetV3AppsGuidBuildsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidBuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Build    `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidDropletsResponse parses an HTTP response from a GetV3AppsGuidDropletsWithResponse call
func ParseGetV3AppsGuidDropletsResponse(rsp *http.Response) (*GetV3AppsGuidDropletsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidDropletsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Droplet  `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAppEnvironmentVariablesResponse parses an HTTP response from a GetAppEnvironmentVariablesWithResponse call
func ParseGetAppEnvironmentVariablesResponse(rsp *http.Response) (*GetAppEnvironmentVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppEnvironmentVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *struct {
				App  *Link `json:"app,omitempty"`
				Self *Link `json:"self,omitempty"`
			} `json:"links,omitempty"`

			// Var User-provided environment variables
			Var *map[string]string `json:"var,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateAppEnvironmentVariablesResponse parses an HTTP response from a UpdateAppEnvironmentVariablesWithResponse call
func ParseUpdateAppEnvironmentVariablesResponse(rsp *http.Response) (*UpdateAppEnvironmentVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAppEnvironmentVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Links *map[string]interface{} `json:"links,omitempty"`
			Var   *map[string]string      `json:"var,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidFeaturesResponse parses an HTTP response from a GetV3AppsGuidFeaturesWithResponse call
func ParseGetV3AppsGuidFeaturesResponse(rsp *http.Response) (*GetV3AppsGuidFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Resources []AppFeature `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidFeaturesNameResponse parses an HTTP response from a GetV3AppsGuidFeaturesNameWithResponse call
func ParseGetV3AppsGuidFeaturesNameResponse(rsp *http.Response) (*GetV3AppsGuidFeaturesNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidFeaturesNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppFeature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV3AppsGuidFeaturesNameResponse parses an HTTP response from a PatchV3AppsGuidFeaturesNameWithResponse call
func ParsePatchV3AppsGuidFeaturesNameResponse(rsp *http.Response) (*PatchV3AppsGuidFeaturesNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3AppsGuidFeaturesNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppFeature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidManifestResponse parses an HTTP response from a GetV3AppsGuidManifestWithResponse call
func ParseGetV3AppsGuidManifestResponse(rsp *http.Response) (*GetV3AppsGuidManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest string
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParsePostV3AppsGuidManifestDiffResponse parses an HTTP response from a PostV3AppsGuidManifestDiffWithResponse call
func ParsePostV3AppsGuidManifestDiffResponse(rsp *http.Response) (*PostV3AppsGuidManifestDiffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3AppsGuidManifestDiffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Diff *[]struct {
				Op    *PostV3AppsGuidManifestDiff200DiffOp `json:"op,omitempty"`
				Path  *string                              `json:"path,omitempty"`
				Value *map[string]interface{}              `json:"value,omitempty"`
			} `json:"diff,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidPackagesResponse parses an HTTP response from a GetV3AppsGuidPackagesWithResponse call
func ParseGetV3AppsGuidPackagesResponse(rsp *http.Response) (*GetV3AppsGuidPackagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidPackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Package  `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAppPermissionsResponse parses an HTTP response from a GetAppPermissionsWithResponse call
func ParseGetAppPermissionsResponse(rsp *http.Response) (*GetAppPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Read  *bool `json:"read,omitempty"`
			Write *bool `json:"write,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidProcessesResponse parses an HTTP response from a GetV3AppsGuidProcessesWithResponse call
func ParseGetV3AppsGuidProcessesResponse(rsp *http.Response) (*GetV3AppsGuidProcessesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidProcessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Process  `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidProcessesTypeResponse parses an HTTP response from a GetV3AppsGuidProcessesTypeWithResponse call
func ParseGetV3AppsGuidProcessesTypeResponse(rsp *http.Response) (*GetV3AppsGuidProcessesTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidProcessesTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Process
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidRelationshipsCurrentDropletResponse parses an HTTP response from a GetV3AppsGuidRelationshipsCurrentDropletWithResponse call
func ParseGetV3AppsGuidRelationshipsCurrentDropletResponse(rsp *http.Response) (*GetV3AppsGuidRelationshipsCurrentDropletResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidRelationshipsCurrentDropletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data"`
			Links *struct {
				Related *struct {
					Href *string `json:"href,omitempty"`
				} `json:"related,omitempty"`
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV3AppsGuidRelationshipsCurrentDropletResponse parses an HTTP response from a PatchV3AppsGuidRelationshipsCurrentDropletWithResponse call
func ParsePatchV3AppsGuidRelationshipsCurrentDropletResponse(rsp *http.Response) (*PatchV3AppsGuidRelationshipsCurrentDropletResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3AppsGuidRelationshipsCurrentDropletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
			Links *struct {
				Related *struct {
					Href *string `json:"href,omitempty"`
				} `json:"related,omitempty"`
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidRevisionsResponse parses an HTTP response from a GetV3AppsGuidRevisionsWithResponse call
func ParseGetV3AppsGuidRevisionsResponse(rsp *http.Response) (*GetV3AppsGuidRevisionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidRevisionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RevisionsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidRevisionsDeployedResponse parses an HTTP response from a GetV3AppsGuidRevisionsDeployedWithResponse call
func ParseGetV3AppsGuidRevisionsDeployedResponse(rsp *http.Response) (*GetV3AppsGuidRevisionsDeployedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidRevisionsDeployedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RevisionsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3AppsGuidSidecarsResponse parses an HTTP response from a GetV3AppsGuidSidecarsWithResponse call
func ParseGetV3AppsGuidSidecarsResponse(rsp *http.Response) (*GetV3AppsGuidSidecarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AppsGuidSidecarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination Pagination `json:"pagination"`
			Resources  []Sidecar  `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV3AppsGuidSidecarsResponse parses an HTTP response from a PostV3AppsGuidSidecarsWithResponse call
func ParsePostV3AppsGuidSidecarsResponse(rsp *http.Response) (*PostV3AppsGuidSidecarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3AppsGuidSidecarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Sidecar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetAppSshEnabledResponse parses an HTTP response from a GetAppSshEnabledWithResponse call
func ParseGetAppSshEnabledResponse(rsp *http.Response) (*GetAppSshEnabledResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppSshEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Enabled *bool   `json:"enabled,omitempty"`
			Reason  *string `json:"reason"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3AppsGuidTasksResponse parses an HTTP response from a PostV3AppsGuidTasksWithResponse call
func ParsePostV3AppsGuidTasksResponse(rsp *http.Response) (*PostV3AppsGuidTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3AppsGuidTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetV3AuditEventsResponse parses an HTTP response from a GetV3AuditEventsWithResponse call
func ParseGetV3AuditEventsResponse(rsp *http.Response) (*GetV3AuditEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AuditEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuditEventList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3AuditEventsGuidResponse parses an HTTP response from a GetV3AuditEventsGuidWithResponse call
func ParseGetV3AuditEventsGuidResponse(rsp *http.Response) (*GetV3AuditEventsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3AuditEventsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuditEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3BuildpacksResponse parses an HTTP response from a GetV3BuildpacksWithResponse call
func ParseGetV3BuildpacksResponse(rsp *http.Response) (*GetV3BuildpacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3BuildpacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination  `json:"pagination,omitempty"`
			Resources  *[]Buildpack `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3BuildpacksResponse parses an HTTP response from a PostV3BuildpacksWithResponse call
func ParsePostV3BuildpacksResponse(rsp *http.Response) (*PostV3BuildpacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3BuildpacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Buildpack
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteV3BuildpacksGuidResponse parses an HTTP response from a DeleteV3BuildpacksGuidWithResponse call
func ParseDeleteV3BuildpacksGuidResponse(rsp *http.Response) (*DeleteV3BuildpacksGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3BuildpacksGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3BuildpacksGuidResponse parses an HTTP response from a GetV3BuildpacksGuidWithResponse call
func ParseGetV3BuildpacksGuidResponse(rsp *http.Response) (*GetV3BuildpacksGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3BuildpacksGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Buildpack
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchV3BuildpacksGuidResponse parses an HTTP response from a PatchV3BuildpacksGuidWithResponse call
func ParsePatchV3BuildpacksGuidResponse(rsp *http.Response) (*PatchV3BuildpacksGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3BuildpacksGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Buildpack
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3BuildpacksGuidUploadResponse parses an HTTP response from a PostV3BuildpacksGuidUploadWithResponse call
func ParsePostV3BuildpacksGuidUploadResponse(rsp *http.Response) (*PostV3BuildpacksGuidUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3BuildpacksGuidUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3BuildsResponse parses an HTTP response from a GetV3BuildsWithResponse call
func ParseGetV3BuildsResponse(rsp *http.Response) (*GetV3BuildsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3BuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Build    `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3BuildsResponse parses an HTTP response from a PostV3BuildsWithResponse call
func ParsePostV3BuildsResponse(rsp *http.Response) (*PostV3BuildsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3BuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Build
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3BuildsGuidResponse parses an HTTP response from a GetV3BuildsGuidWithResponse call
func ParseGetV3BuildsGuidResponse(rsp *http.Response) (*GetV3BuildsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3BuildsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Build
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchV3BuildsGuidResponse parses an HTTP response from a PatchV3BuildsGuidWithResponse call
func ParsePatchV3BuildsGuidResponse(rsp *http.Response) (*PatchV3BuildsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3BuildsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Build
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3DeploymentsResponse parses an HTTP response from a GetV3DeploymentsWithResponse call
func ParseGetV3DeploymentsResponse(rsp *http.Response) (*GetV3DeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3DeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination   `json:"pagination,omitempty"`
			Resources  *[]Deployment `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3DeploymentsResponse parses an HTTP response from a PostV3DeploymentsWithResponse call
func ParsePostV3DeploymentsResponse(rsp *http.Response) (*PostV3DeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3DeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Deployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3DeploymentsGuidResponse parses an HTTP response from a GetV3DeploymentsGuidWithResponse call
func ParseGetV3DeploymentsGuidResponse(rsp *http.Response) (*GetV3DeploymentsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3DeploymentsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchV3DeploymentsGuidResponse parses an HTTP response from a PatchV3DeploymentsGuidWithResponse call
func ParsePatchV3DeploymentsGuidResponse(rsp *http.Response) (*PatchV3DeploymentsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3DeploymentsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3DeploymentsGuidActionsCancelResponse parses an HTTP response from a PostV3DeploymentsGuidActionsCancelWithResponse call
func ParsePostV3DeploymentsGuidActionsCancelResponse(rsp *http.Response) (*PostV3DeploymentsGuidActionsCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3DeploymentsGuidActionsCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3DeploymentsGuidActionsContinueResponse parses an HTTP response from a PostV3DeploymentsGuidActionsContinueWithResponse call
func ParsePostV3DeploymentsGuidActionsContinueResponse(rsp *http.Response) (*PostV3DeploymentsGuidActionsContinueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3DeploymentsGuidActionsContinueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3DomainsResponse parses an HTTP response from a GetV3DomainsWithResponse call
func ParseGetV3DomainsResponse(rsp *http.Response) (*GetV3DomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3DomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				First *struct {
					Href *string `json:"href,omitempty"`
				} `json:"first,omitempty"`
				Last *struct {
					Href *string `json:"href,omitempty"`
				} `json:"last,omitempty"`
				Next *struct {
					Href *string `json:"href,omitempty"`
				} `json:"next,omitempty"`
				Previous *struct {
					Href *string `json:"href,omitempty"`
				} `json:"previous,omitempty"`
				TotalPages   *int `json:"total_pages,omitempty"`
				TotalResults *int `json:"total_results,omitempty"`
			} `json:"pagination,omitempty"`
			Resources *[]Domain `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3DomainsResponse parses an HTTP response from a PostV3DomainsWithResponse call
func ParsePostV3DomainsResponse(rsp *http.Response) (*PostV3DomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3DomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV3DomainsGuidResponse parses an HTTP response from a DeleteV3DomainsGuidWithResponse call
func ParseDeleteV3DomainsGuidResponse(rsp *http.Response) (*DeleteV3DomainsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3DomainsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3DomainsGuidResponse parses an HTTP response from a GetV3DomainsGuidWithResponse call
func ParseGetV3DomainsGuidResponse(rsp *http.Response) (*GetV3DomainsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3DomainsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3DomainsGuidResponse parses an HTTP response from a PatchV3DomainsGuidWithResponse call
func ParsePatchV3DomainsGuidResponse(rsp *http.Response) (*PatchV3DomainsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3DomainsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3DomainsGuidRelationshipsSharedOrganizationsResponse parses an HTTP response from a PostV3DomainsGuidRelationshipsSharedOrganizationsWithResponse call
func ParsePostV3DomainsGuidRelationshipsSharedOrganizationsResponse(rsp *http.Response) (*PostV3DomainsGuidRelationshipsSharedOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3DomainsGuidRelationshipsSharedOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]Organization `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidResponse parses an HTTP response from a DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidWithResponse call
func ParseDeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidResponse(rsp *http.Response) (*DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3DomainsGuidRelationshipsSharedOrganizationsOrgGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3DropletsResponse parses an HTTP response from a GetV3DropletsWithResponse call
func ParseGetV3DropletsResponse(rsp *http.Response) (*GetV3DropletsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3DropletsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Droplet  `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3DropletsResponse parses an HTTP response from a PostV3DropletsWithResponse call
func ParsePostV3DropletsResponse(rsp *http.Response) (*PostV3DropletsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3DropletsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Droplet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV3DropletsGuidResponse parses an HTTP response from a DeleteV3DropletsGuidWithResponse call
func ParseDeleteV3DropletsGuidResponse(rsp *http.Response) (*DeleteV3DropletsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3DropletsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3DropletsGuidResponse parses an HTTP response from a GetV3DropletsGuidWithResponse call
func ParseGetV3DropletsGuidResponse(rsp *http.Response) (*GetV3DropletsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3DropletsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Droplet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3DropletsGuidResponse parses an HTTP response from a PatchV3DropletsGuidWithResponse call
func ParsePatchV3DropletsGuidResponse(rsp *http.Response) (*PatchV3DropletsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3DropletsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Droplet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3EnvironmentVariableGroupsNameResponse parses an HTTP response from a GetV3EnvironmentVariableGroupsNameWithResponse call
func ParseGetV3EnvironmentVariableGroupsNameResponse(rsp *http.Response) (*GetV3EnvironmentVariableGroupsNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3EnvironmentVariableGroupsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentVariableGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV3EnvironmentVariableGroupsNameResponse parses an HTTP response from a PatchV3EnvironmentVariableGroupsNameWithResponse call
func ParsePatchV3EnvironmentVariableGroupsNameResponse(rsp *http.Response) (*PatchV3EnvironmentVariableGroupsNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3EnvironmentVariableGroupsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentVariableGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetV3FeatureFlagsResponse parses an HTTP response from a GetV3FeatureFlagsWithResponse call
func ParseGetV3FeatureFlagsResponse(rsp *http.Response) (*GetV3FeatureFlagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3FeatureFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination Pagination    `json:"pagination"`
			Resources  []FeatureFlag `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetV3FeatureFlagsNameResponse parses an HTTP response from a GetV3FeatureFlagsNameWithResponse call
func ParseGetV3FeatureFlagsNameResponse(rsp *http.Response) (*GetV3FeatureFlagsNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3FeatureFlagsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureFlag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV3FeatureFlagsNameResponse parses an HTTP response from a PatchV3FeatureFlagsNameWithResponse call
func ParsePatchV3FeatureFlagsNameResponse(rsp *http.Response) (*PatchV3FeatureFlagsNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3FeatureFlagsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureFlag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetV3InfoResponse parses an HTTP response from a GetV3InfoWithResponse call
func ParseGetV3InfoResponse(rsp *http.Response) (*GetV3InfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3InfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3InfoUsageSummaryResponse parses an HTTP response from a GetV3InfoUsageSummaryWithResponse call
func ParseGetV3InfoUsageSummaryResponse(rsp *http.Response) (*GetV3InfoUsageSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3InfoUsageSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsageSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3IsolationSegmentsResponse parses an HTTP response from a GetV3IsolationSegmentsWithResponse call
func ParseGetV3IsolationSegmentsResponse(rsp *http.Response) (*GetV3IsolationSegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3IsolationSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination         `json:"pagination,omitempty"`
			Resources  *[]IsolationSegment `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3IsolationSegmentsResponse parses an HTTP response from a PostV3IsolationSegmentsWithResponse call
func ParsePostV3IsolationSegmentsResponse(rsp *http.Response) (*PostV3IsolationSegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3IsolationSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IsolationSegment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV3IsolationSegmentsGuidResponse parses an HTTP response from a DeleteV3IsolationSegmentsGuidWithResponse call
func ParseDeleteV3IsolationSegmentsGuidResponse(rsp *http.Response) (*DeleteV3IsolationSegmentsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3IsolationSegmentsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3IsolationSegmentsGuidResponse parses an HTTP response from a GetV3IsolationSegmentsGuidWithResponse call
func ParseGetV3IsolationSegmentsGuidResponse(rsp *http.Response) (*GetV3IsolationSegmentsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3IsolationSegmentsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IsolationSegment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3IsolationSegmentsGuidResponse parses an HTTP response from a PatchV3IsolationSegmentsGuidWithResponse call
func ParsePatchV3IsolationSegmentsGuidResponse(rsp *http.Response) (*PatchV3IsolationSegmentsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3IsolationSegmentsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IsolationSegment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3IsolationSegmentsGuidRelationshipsOrganizationsResponse parses an HTTP response from a GetV3IsolationSegmentsGuidRelationshipsOrganizationsWithResponse call
func ParseGetV3IsolationSegmentsGuidRelationshipsOrganizationsResponse(rsp *http.Response) (*GetV3IsolationSegmentsGuidRelationshipsOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3IsolationSegmentsGuidRelationshipsOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
			Links *struct {
				Related *struct {
					Href *string `json:"href,omitempty"`
				} `json:"related,omitempty"`
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse parses an HTTP response from a PostV3IsolationSegmentsGuidRelationshipsOrganizationsWithResponse call
func ParsePostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse(rsp *http.Response) (*PostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3IsolationSegmentsGuidRelationshipsOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
			Links *struct {
				Related *struct {
					Href *string `json:"href,omitempty"`
				} `json:"related,omitempty"`
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidResponse parses an HTTP response from a DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidWithResponse call
func ParseDeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidResponse(rsp *http.Response) (*DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3IsolationSegmentsGuidRelationshipsOrganizationsOrgGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3IsolationSegmentsGuidRelationshipsSpacesResponse parses an HTTP response from a GetV3IsolationSegmentsGuidRelationshipsSpacesWithResponse call
func ParseGetV3IsolationSegmentsGuidRelationshipsSpacesResponse(rsp *http.Response) (*GetV3IsolationSegmentsGuidRelationshipsSpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3IsolationSegmentsGuidRelationshipsSpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
			Links *struct {
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3JobsResponse parses an HTTP response from a GetV3JobsWithResponse call
func ParseGetV3JobsResponse(rsp *http.Response) (*GetV3JobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3JobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination Pagination `json:"pagination"`
			Resources  []Job      `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetV3JobsGuidResponse parses an HTTP response from a GetV3JobsGuidWithResponse call
func ParseGetV3JobsGuidResponse(rsp *http.Response) (*GetV3JobsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3JobsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListOrganizationQuotasResponse parses an HTTP response from a ListOrganizationQuotasWithResponse call
func ParseListOrganizationQuotasResponse(rsp *http.Response) (*ListOrganizationQuotasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationQuotasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Included Included resources when using include parameter
			Included *struct {
				Organizations *[]Organization `json:"organizations,omitempty"`
			} `json:"included,omitempty"`
			Pagination Pagination          `json:"pagination"`
			Resources  []OrganizationQuota `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationQuotaResponse parses an HTTP response from a CreateOrganizationQuotaWithResponse call
func ParseCreateOrganizationQuotaResponse(rsp *http.Response) (*CreateOrganizationQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OrganizationQuota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationQuotaResponse parses an HTTP response from a DeleteOrganizationQuotaWithResponse call
func ParseDeleteOrganizationQuotaResponse(rsp *http.Response) (*DeleteOrganizationQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Guid  *openapi_types.UUID `json:"guid,omitempty"`
			Links *struct {
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrganizationQuotaResponse parses an HTTP response from a GetOrganizationQuotaWithResponse call
func ParseGetOrganizationQuotaResponse(rsp *http.Response) (*GetOrganizationQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationQuota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationQuotaResponse parses an HTTP response from a UpdateOrganizationQuotaWithResponse call
func ParseUpdateOrganizationQuotaResponse(rsp *http.Response) (*UpdateOrganizationQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationQuota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseApplyOrganizationQuotaToOrganizationsResponse parses an HTTP response from a ApplyOrganizationQuotaToOrganizationsWithResponse call
func ParseApplyOrganizationQuotaToOrganizationsResponse(rsp *http.Response) (*ApplyOrganizationQuotaToOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplyOrganizationQuotaToOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data []struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
			Links struct {
				Self struct {
					Href string `json:"href"`
				} `json:"self"`
			} `json:"links"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListOrganizationsResponse parses an HTTP response from a ListOrganizationsWithResponse call
func ParseListOrganizationsResponse(rsp *http.Response) (*ListOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationResponse(rsp *http.Response) (*CreateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationResponse parses an HTTP response from a DeleteOrganizationWithResponse call
func ParseDeleteOrganizationResponse(rsp *http.Response) (*DeleteOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationResponse parses an HTTP response from a UpdateOrganizationWithResponse call
func ParseUpdateOrganizationResponse(rsp *http.Response) (*UpdateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDefaultDomainResponse parses an HTTP response from a GetDefaultDomainWithResponse call
func ParseGetDefaultDomainResponse(rsp *http.Response) (*GetDefaultDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDefaultIsolationSegmentResponse parses an HTTP response from a GetDefaultIsolationSegmentWithResponse call
func ParseGetDefaultIsolationSegmentResponse(rsp *http.Response) (*GetDefaultIsolationSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultIsolationSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAssignDefaultIsolationSegmentResponse parses an HTTP response from a AssignDefaultIsolationSegmentWithResponse call
func ParseAssignDefaultIsolationSegmentResponse(rsp *http.Response) (*AssignDefaultIsolationSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignDefaultIsolationSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsageSummaryResponse parses an HTTP response from a GetUsageSummaryWithResponse call
func ParseGetUsageSummaryResponse(rsp *http.Response) (*GetUsageSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsageSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsersForOrganizationResponse parses an HTTP response from a ListUsersForOrganizationWithResponse call
func ParseListUsersForOrganizationResponse(rsp *http.Response) (*ListUsersForOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersForOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3PackagesResponse parses an HTTP response from a GetV3PackagesWithResponse call
func ParseGetV3PackagesResponse(rsp *http.Response) (*GetV3PackagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3PackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Package  `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3PackagesResponse parses an HTTP response from a PostV3PackagesWithResponse call
func ParsePostV3PackagesResponse(rsp *http.Response) (*PostV3PackagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3PackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Package
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteV3PackagesGuidResponse parses an HTTP response from a DeleteV3PackagesGuidWithResponse call
func ParseDeleteV3PackagesGuidResponse(rsp *http.Response) (*DeleteV3PackagesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3PackagesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3PackagesGuidResponse parses an HTTP response from a GetV3PackagesGuidWithResponse call
func ParseGetV3PackagesGuidResponse(rsp *http.Response) (*GetV3PackagesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3PackagesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Package
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchV3PackagesGuidResponse parses an HTTP response from a PatchV3PackagesGuidWithResponse call
func ParsePatchV3PackagesGuidResponse(rsp *http.Response) (*PatchV3PackagesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3PackagesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Package
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3PackagesGuidCopyResponse parses an HTTP response from a PostV3PackagesGuidCopyWithResponse call
func ParsePostV3PackagesGuidCopyResponse(rsp *http.Response) (*PostV3PackagesGuidCopyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3PackagesGuidCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Package
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3PackagesGuidDownloadResponse parses an HTTP response from a GetV3PackagesGuidDownloadWithResponse call
func ParseGetV3PackagesGuidDownloadResponse(rsp *http.Response) (*GetV3PackagesGuidDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3PackagesGuidDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3PackagesGuidDropletsResponse parses an HTTP response from a GetV3PackagesGuidDropletsWithResponse call
func ParseGetV3PackagesGuidDropletsResponse(rsp *http.Response) (*GetV3PackagesGuidDropletsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3PackagesGuidDropletsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Droplet  `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3PackagesGuidUploadResponse parses an HTTP response from a PostV3PackagesGuidUploadWithResponse call
func ParsePostV3PackagesGuidUploadResponse(rsp *http.Response) (*PostV3PackagesGuidUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3PackagesGuidUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Package
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3ProcessesResponse parses an HTTP response from a GetV3ProcessesWithResponse call
func ParseGetV3ProcessesResponse(rsp *http.Response) (*GetV3ProcessesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ProcessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Process  `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3ProcessesGuidResponse parses an HTTP response from a GetV3ProcessesGuidWithResponse call
func ParseGetV3ProcessesGuidResponse(rsp *http.Response) (*GetV3ProcessesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ProcessesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Process
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchV3ProcessesGuidResponse parses an HTTP response from a PatchV3ProcessesGuidWithResponse call
func ParsePatchV3ProcessesGuidResponse(rsp *http.Response) (*PatchV3ProcessesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3ProcessesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Process
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3ProcessesGuidActionsScaleResponse parses an HTTP response from a PostV3ProcessesGuidActionsScaleWithResponse call
func ParsePostV3ProcessesGuidActionsScaleResponse(rsp *http.Response) (*PostV3ProcessesGuidActionsScaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3ProcessesGuidActionsScaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Process
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteV3ProcessesGuidInstancesIndexResponse parses an HTTP response from a DeleteV3ProcessesGuidInstancesIndexWithResponse call
func ParseDeleteV3ProcessesGuidInstancesIndexResponse(rsp *http.Response) (*DeleteV3ProcessesGuidInstancesIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3ProcessesGuidInstancesIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3ProcessesGuidSidecarsResponse parses an HTTP response from a GetV3ProcessesGuidSidecarsWithResponse call
func ParseGetV3ProcessesGuidSidecarsResponse(rsp *http.Response) (*GetV3ProcessesGuidSidecarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ProcessesGuidSidecarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination Pagination `json:"pagination"`
			Resources  []Sidecar  `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3ProcessesGuidStatsResponse parses an HTTP response from a GetV3ProcessesGuidStatsWithResponse call
func ParseGetV3ProcessesGuidStatsResponse(rsp *http.Response) (*GetV3ProcessesGuidStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ProcessesGuidStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Resources *[]ProcessStats `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3ResourceMatchesResponse parses an HTTP response from a PostV3ResourceMatchesWithResponse call
func ParsePostV3ResourceMatchesResponse(rsp *http.Response) (*PostV3ResourceMatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3ResourceMatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ResourceMatchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetV3RevisionsGuidResponse parses an HTTP response from a GetV3RevisionsGuidWithResponse call
func ParseGetV3RevisionsGuidResponse(rsp *http.Response) (*GetV3RevisionsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3RevisionsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Revision
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3RevisionsGuidResponse parses an HTTP response from a PatchV3RevisionsGuidWithResponse call
func ParsePatchV3RevisionsGuidResponse(rsp *http.Response) (*PatchV3RevisionsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3RevisionsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Revision
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3RevisionsGuidEnvironmentVariablesResponse parses an HTTP response from a GetV3RevisionsGuidEnvironmentVariablesWithResponse call
func ParseGetV3RevisionsGuidEnvironmentVariablesResponse(rsp *http.Response) (*GetV3RevisionsGuidEnvironmentVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3RevisionsGuidEnvironmentVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentVariables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3RolesResponse parses an HTTP response from a GetV3RolesWithResponse call
func ParseGetV3RolesResponse(rsp *http.Response) (*GetV3RolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3RolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Included Included resources when using include parameter
			Included *struct {
				Organizations *[]Organization `json:"organizations,omitempty"`
				Spaces        *[]Space        `json:"spaces,omitempty"`
				Users         *[]User         `json:"users,omitempty"`
			} `json:"included,omitempty"`
			Pagination Pagination `json:"pagination"`
			Resources  []Role     `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostV3RolesResponse parses an HTTP response from a PostV3RolesWithResponse call
func ParsePostV3RolesResponse(rsp *http.Response) (*PostV3RolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3RolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteV3RolesGuidResponse parses an HTTP response from a DeleteV3RolesGuidWithResponse call
func ParseDeleteV3RolesGuidResponse(rsp *http.Response) (*DeleteV3RolesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3RolesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Guid  *openapi_types.UUID `json:"guid,omitempty"`
			Links *struct {
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3RolesGuidResponse parses an HTTP response from a GetV3RolesGuidWithResponse call
func ParseGetV3RolesGuidResponse(rsp *http.Response) (*GetV3RolesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3RolesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3RoutesResponse parses an HTTP response from a GetV3RoutesWithResponse call
func ParseGetV3RoutesResponse(rsp *http.Response) (*GetV3RoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3RoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Included *struct {
				Domains       *[]Domain       `json:"domains,omitempty"`
				Organizations *[]Organization `json:"organizations,omitempty"`
				Spaces        *[]Space        `json:"spaces,omitempty"`
			} `json:"included,omitempty"`
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Route    `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3RoutesResponse parses an HTTP response from a PostV3RoutesWithResponse call
func ParsePostV3RoutesResponse(rsp *http.Response) (*PostV3RoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3RoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteV3RoutesGuidResponse parses an HTTP response from a DeleteV3RoutesGuidWithResponse call
func ParseDeleteV3RoutesGuidResponse(rsp *http.Response) (*DeleteV3RoutesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3RoutesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3RoutesGuidResponse parses an HTTP response from a GetV3RoutesGuidWithResponse call
func ParseGetV3RoutesGuidResponse(rsp *http.Response) (*GetV3RoutesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3RoutesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchV3RoutesGuidResponse parses an HTTP response from a PatchV3RoutesGuidWithResponse call
func ParsePatchV3RoutesGuidResponse(rsp *http.Response) (*PatchV3RoutesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3RoutesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3RoutesGuidDestinationsResponse parses an HTTP response from a GetV3RoutesGuidDestinationsWithResponse call
func ParseGetV3RoutesGuidDestinationsResponse(rsp *http.Response) (*GetV3RoutesGuidDestinationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3RoutesGuidDestinationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Destinations *[]Destination `json:"destinations,omitempty"`
			Links        *struct {
				Route *Link `json:"route,omitempty"`
				Self  *Link `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchV3RoutesGuidDestinationsResponse parses an HTTP response from a PatchV3RoutesGuidDestinationsWithResponse call
func ParsePatchV3RoutesGuidDestinationsResponse(rsp *http.Response) (*PatchV3RoutesGuidDestinationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3RoutesGuidDestinationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Destinations *[]Destination `json:"destinations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3RoutesGuidDestinationsResponse parses an HTTP response from a PostV3RoutesGuidDestinationsWithResponse call
func ParsePostV3RoutesGuidDestinationsResponse(rsp *http.Response) (*PostV3RoutesGuidDestinationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3RoutesGuidDestinationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Destinations *[]Destination `json:"destinations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteV3RoutesGuidDestinationsDestinationGuidResponse parses an HTTP response from a DeleteV3RoutesGuidDestinationsDestinationGuidWithResponse call
func ParseDeleteV3RoutesGuidDestinationsDestinationGuidResponse(rsp *http.Response) (*DeleteV3RoutesGuidDestinationsDestinationGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3RoutesGuidDestinationsDestinationGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3RoutesGuidRelationshipsSharedSpacesResponse parses an HTTP response from a GetV3RoutesGuidRelationshipsSharedSpacesWithResponse call
func ParseGetV3RoutesGuidRelationshipsSharedSpacesResponse(rsp *http.Response) (*GetV3RoutesGuidRelationshipsSharedSpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3RoutesGuidRelationshipsSharedSpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data List of spaces the route is shared with
			Data *[]struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
			Links *struct {
				Self *Link `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchV3RoutesGuidRelationshipsSpaceResponse parses an HTTP response from a PatchV3RoutesGuidRelationshipsSpaceWithResponse call
func ParsePatchV3RoutesGuidRelationshipsSpaceResponse(rsp *http.Response) (*PatchV3RoutesGuidRelationshipsSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3RoutesGuidRelationshipsSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				Guid *openapi_types.UUID `json:"guid,omitempty"`
			} `json:"data,omitempty"`
			Links *struct {
				Self *Link `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV3RoutesGuidTransferOwnerResponse parses an HTTP response from a PostV3RoutesGuidTransferOwnerWithResponse call
func ParsePostV3RoutesGuidTransferOwnerResponse(rsp *http.Response) (*PostV3RoutesGuidTransferOwnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3RoutesGuidTransferOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3SecurityGroupsResponse parses an HTTP response from a GetV3SecurityGroupsWithResponse call
func ParseGetV3SecurityGroupsResponse(rsp *http.Response) (*GetV3SecurityGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SecurityGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination Pagination      `json:"pagination"`
			Resources  []SecurityGroup `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostV3SecurityGroupsResponse parses an HTTP response from a PostV3SecurityGroupsWithResponse call
func ParsePostV3SecurityGroupsResponse(rsp *http.Response) (*PostV3SecurityGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3SecurityGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SecurityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteV3SecurityGroupsGuidResponse parses an HTTP response from a DeleteV3SecurityGroupsGuidWithResponse call
func ParseDeleteV3SecurityGroupsGuidResponse(rsp *http.Response) (*DeleteV3SecurityGroupsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3SecurityGroupsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Guid  *openapi_types.UUID `json:"guid,omitempty"`
			Links *struct {
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3SecurityGroupsGuidResponse parses an HTTP response from a GetV3SecurityGroupsGuidWithResponse call
func ParseGetV3SecurityGroupsGuidResponse(rsp *http.Response) (*GetV3SecurityGroupsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SecurityGroupsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV3SecurityGroupsGuidResponse parses an HTTP response from a PatchV3SecurityGroupsGuidWithResponse call
func ParsePatchV3SecurityGroupsGuidResponse(rsp *http.Response) (*PatchV3SecurityGroupsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3SecurityGroupsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse parses an HTTP response from a PostV3SecurityGroupsGuidRelationshipsRunningSpacesWithResponse call
func ParsePostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse(rsp *http.Response) (*PostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3SecurityGroupsGuidRelationshipsRunningSpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
			Links struct {
				Self struct {
					Href string `json:"href"`
				} `json:"self"`
			} `json:"links"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidResponse parses an HTTP response from a DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidWithResponse call
func ParseDeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidResponse(rsp *http.Response) (*DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3SecurityGroupsGuidRelationshipsRunningSpacesSpaceGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse parses an HTTP response from a PostV3SecurityGroupsGuidRelationshipsStagingSpacesWithResponse call
func ParsePostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse(rsp *http.Response) (*PostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3SecurityGroupsGuidRelationshipsStagingSpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
			Links struct {
				Self struct {
					Href string `json:"href"`
				} `json:"self"`
			} `json:"links"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidResponse parses an HTTP response from a DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidWithResponse call
func ParseDeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidResponse(rsp *http.Response) (*DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3SecurityGroupsGuidRelationshipsStagingSpacesSpaceGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3ServiceBrokersResponse parses an HTTP response from a GetV3ServiceBrokersWithResponse call
func ParseGetV3ServiceBrokersResponse(rsp *http.Response) (*GetV3ServiceBrokersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceBrokersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination      `json:"pagination,omitempty"`
			Resources  *[]ServiceBroker `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3ServiceBrokersResponse parses an HTTP response from a PostV3ServiceBrokersWithResponse call
func ParsePostV3ServiceBrokersResponse(rsp *http.Response) (*PostV3ServiceBrokersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3ServiceBrokersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ServiceBroker
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDeleteV3ServiceBrokersGuidResponse parses an HTTP response from a DeleteV3ServiceBrokersGuidWithResponse call
func ParseDeleteV3ServiceBrokersGuidResponse(rsp *http.Response) (*DeleteV3ServiceBrokersGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3ServiceBrokersGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3ServiceBrokersGuidResponse parses an HTTP response from a GetV3ServiceBrokersGuidWithResponse call
func ParseGetV3ServiceBrokersGuidResponse(rsp *http.Response) (*GetV3ServiceBrokersGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceBrokersGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceBroker
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3ServiceBrokersGuidResponse parses an HTTP response from a PatchV3ServiceBrokersGuidWithResponse call
func ParsePatchV3ServiceBrokersGuidResponse(rsp *http.Response) (*PatchV3ServiceBrokersGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3ServiceBrokersGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceBroker
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ServiceBroker
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParsePostV3ServiceBrokersGuidCatalogResponse parses an HTTP response from a PostV3ServiceBrokersGuidCatalogWithResponse call
func ParsePostV3ServiceBrokersGuidCatalogResponse(rsp *http.Response) (*PostV3ServiceBrokersGuidCatalogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3ServiceBrokersGuidCatalogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3ServiceBrokersGuidJobsSynchronizationResponse parses an HTTP response from a GetV3ServiceBrokersGuidJobsSynchronizationWithResponse call
func ParseGetV3ServiceBrokersGuidJobsSynchronizationResponse(rsp *http.Response) (*GetV3ServiceBrokersGuidJobsSynchronizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceBrokersGuidJobsSynchronizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LastOperation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3ServiceCredentialBindingsResponse parses an HTTP response from a PostV3ServiceCredentialBindingsWithResponse call
func ParsePostV3ServiceCredentialBindingsResponse(rsp *http.Response) (*PostV3ServiceCredentialBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3ServiceCredentialBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServiceCredentialBinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV3ServiceCredentialBindingsGuidResponse parses an HTTP response from a DeleteV3ServiceCredentialBindingsGuidWithResponse call
func ParseDeleteV3ServiceCredentialBindingsGuidResponse(rsp *http.Response) (*DeleteV3ServiceCredentialBindingsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3ServiceCredentialBindingsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3ServiceCredentialBindingsGuidResponse parses an HTTP response from a GetV3ServiceCredentialBindingsGuidWithResponse call
func ParseGetV3ServiceCredentialBindingsGuidResponse(rsp *http.Response) (*GetV3ServiceCredentialBindingsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceCredentialBindingsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceCredentialBinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3ServiceCredentialBindingsGuidResponse parses an HTTP response from a PatchV3ServiceCredentialBindingsGuidWithResponse call
func ParsePatchV3ServiceCredentialBindingsGuidResponse(rsp *http.Response) (*PatchV3ServiceCredentialBindingsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3ServiceCredentialBindingsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceCredentialBinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3ServiceCredentialBindingsGuidDetailsResponse parses an HTTP response from a GetV3ServiceCredentialBindingsGuidDetailsWithResponse call
func ParseGetV3ServiceCredentialBindingsGuidDetailsResponse(rsp *http.Response) (*GetV3ServiceCredentialBindingsGuidDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceCredentialBindingsGuidDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Credentials    *map[string]interface{} `json:"credentials,omitempty"`
			SyslogDrainUrl *string                 `json:"syslog_drain_url,omitempty"`
			VolumeMounts   *[]string               `json:"volume_mounts,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3ServiceCredentialBindingsGuidParametersResponse parses an HTTP response from a GetV3ServiceCredentialBindingsGuidParametersWithResponse call
func ParseGetV3ServiceCredentialBindingsGuidParametersResponse(rsp *http.Response) (*GetV3ServiceCredentialBindingsGuidParametersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceCredentialBindingsGuidParametersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3ServiceInstancesResponse parses an HTTP response from a GetV3ServiceInstancesWithResponse call
func ParseGetV3ServiceInstancesResponse(rsp *http.Response) (*GetV3ServiceInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Resources *[]ServiceInstance `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV3ServiceInstancesGuidResponse parses an HTTP response from a DeleteV3ServiceInstancesGuidWithResponse call
func ParseDeleteV3ServiceInstancesGuidResponse(rsp *http.Response) (*DeleteV3ServiceInstancesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3ServiceInstancesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchV3ServiceInstancesGuidResponse parses an HTTP response from a PatchV3ServiceInstancesGuidWithResponse call
func ParsePatchV3ServiceInstancesGuidResponse(rsp *http.Response) (*PatchV3ServiceInstancesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3ServiceInstancesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3ServiceInstancesGuidCredentialsResponse parses an HTTP response from a GetV3ServiceInstancesGuidCredentialsWithResponse call
func ParseGetV3ServiceInstancesGuidCredentialsResponse(rsp *http.Response) (*GetV3ServiceInstancesGuidCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceInstancesGuidCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3ServiceInstancesGuidRelationshipsSharedSpacesResponse parses an HTTP response from a GetV3ServiceInstancesGuidRelationshipsSharedSpacesWithResponse call
func ParseGetV3ServiceInstancesGuidRelationshipsSharedSpacesResponse(rsp *http.Response) (*GetV3ServiceInstancesGuidRelationshipsSharedSpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceInstancesGuidRelationshipsSharedSpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]Space `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse parses an HTTP response from a PostV3ServiceInstancesGuidRelationshipsSharedSpacesWithResponse call
func ParsePostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse(rsp *http.Response) (*PostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3ServiceInstancesGuidRelationshipsSharedSpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]Space `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryResponse parses an HTTP response from a GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryWithResponse call
func ParseGetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryResponse(rsp *http.Response) (*GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsageSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidResponse parses an HTTP response from a DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidWithResponse call
func ParseDeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidResponse(rsp *http.Response) (*DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3ServiceInstancesGuidRelationshipsSharedSpacesSpaceGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3ServiceOfferingsResponse parses an HTTP response from a GetV3ServiceOfferingsWithResponse call
func ParseGetV3ServiceOfferingsResponse(rsp *http.Response) (*GetV3ServiceOfferingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceOfferingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceOfferingList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3ServiceOfferingsResponse parses an HTTP response from a PostV3ServiceOfferingsWithResponse call
func ParsePostV3ServiceOfferingsResponse(rsp *http.Response) (*PostV3ServiceOfferingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3ServiceOfferingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServiceOffering
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV3ServiceOfferingsGuidResponse parses an HTTP response from a DeleteV3ServiceOfferingsGuidWithResponse call
func ParseDeleteV3ServiceOfferingsGuidResponse(rsp *http.Response) (*DeleteV3ServiceOfferingsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3ServiceOfferingsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3ServiceOfferingsGuidResponse parses an HTTP response from a GetV3ServiceOfferingsGuidWithResponse call
func ParseGetV3ServiceOfferingsGuidResponse(rsp *http.Response) (*GetV3ServiceOfferingsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceOfferingsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceOffering
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3ServiceOfferingsGuidResponse parses an HTTP response from a PatchV3ServiceOfferingsGuidWithResponse call
func ParsePatchV3ServiceOfferingsGuidResponse(rsp *http.Response) (*PatchV3ServiceOfferingsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3ServiceOfferingsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceOffering
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3ServicePlansResponse parses an HTTP response from a GetV3ServicePlansWithResponse call
func ParseGetV3ServicePlansResponse(rsp *http.Response) (*GetV3ServicePlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServicePlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicePlanList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3ServicePlansResponse parses an HTTP response from a PostV3ServicePlansWithResponse call
func ParsePostV3ServicePlansResponse(rsp *http.Response) (*PostV3ServicePlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3ServicePlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServicePlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV3ServicePlansGuidResponse parses an HTTP response from a DeleteV3ServicePlansGuidWithResponse call
func ParseDeleteV3ServicePlansGuidResponse(rsp *http.Response) (*DeleteV3ServicePlansGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3ServicePlansGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3ServicePlansGuidResponse parses an HTTP response from a GetV3ServicePlansGuidWithResponse call
func ParseGetV3ServicePlansGuidResponse(rsp *http.Response) (*GetV3ServicePlansGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServicePlansGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicePlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3ServicePlansGuidResponse parses an HTTP response from a PatchV3ServicePlansGuidWithResponse call
func ParsePatchV3ServicePlansGuidResponse(rsp *http.Response) (*PatchV3ServicePlansGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3ServicePlansGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicePlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3ServicePlansGuidVisibilityResponse parses an HTTP response from a GetV3ServicePlansGuidVisibilityWithResponse call
func ParseGetV3ServicePlansGuidVisibilityResponse(rsp *http.Response) (*GetV3ServicePlansGuidVisibilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServicePlansGuidVisibilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicePlanVisibility
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV3ServicePlansGuidVisibilityResponse parses an HTTP response from a PatchV3ServicePlansGuidVisibilityWithResponse call
func ParsePatchV3ServicePlansGuidVisibilityResponse(rsp *http.Response) (*PatchV3ServicePlansGuidVisibilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3ServicePlansGuidVisibilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicePlanVisibility
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostV3ServicePlansGuidVisibilityResponse parses an HTTP response from a PostV3ServicePlansGuidVisibilityWithResponse call
func ParsePostV3ServicePlansGuidVisibilityResponse(rsp *http.Response) (*PostV3ServicePlansGuidVisibilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3ServicePlansGuidVisibilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicePlanVisibility
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteV3ServicePlansGuidVisibilityOrganizationGuidResponse parses an HTTP response from a DeleteV3ServicePlansGuidVisibilityOrganizationGuidWithResponse call
func ParseDeleteV3ServicePlansGuidVisibilityOrganizationGuidResponse(rsp *http.Response) (*DeleteV3ServicePlansGuidVisibilityOrganizationGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3ServicePlansGuidVisibilityOrganizationGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3ServiceRouteBindingsResponse parses an HTTP response from a GetV3ServiceRouteBindingsWithResponse call
func ParseGetV3ServiceRouteBindingsResponse(rsp *http.Response) (*GetV3ServiceRouteBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceRouteBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination            `json:"pagination,omitempty"`
			Resources  *[]ServiceRouteBinding `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3ServiceRouteBindingsResponse parses an HTTP response from a PostV3ServiceRouteBindingsWithResponse call
func ParsePostV3ServiceRouteBindingsResponse(rsp *http.Response) (*PostV3ServiceRouteBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3ServiceRouteBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServiceRouteBinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV3ServiceRouteBindingsGuidResponse parses an HTTP response from a DeleteV3ServiceRouteBindingsGuidWithResponse call
func ParseDeleteV3ServiceRouteBindingsGuidResponse(rsp *http.Response) (*DeleteV3ServiceRouteBindingsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3ServiceRouteBindingsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3ServiceRouteBindingsGuidResponse parses an HTTP response from a GetV3ServiceRouteBindingsGuidWithResponse call
func ParseGetV3ServiceRouteBindingsGuidResponse(rsp *http.Response) (*GetV3ServiceRouteBindingsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceRouteBindingsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceRouteBinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3ServiceRouteBindingsGuidResponse parses an HTTP response from a PatchV3ServiceRouteBindingsGuidWithResponse call
func ParsePatchV3ServiceRouteBindingsGuidResponse(rsp *http.Response) (*PatchV3ServiceRouteBindingsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3ServiceRouteBindingsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceRouteBinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3ServiceRouteBindingsGuidParametersResponse parses an HTTP response from a GetV3ServiceRouteBindingsGuidParametersWithResponse call
func ParseGetV3ServiceRouteBindingsGuidParametersResponse(rsp *http.Response) (*GetV3ServiceRouteBindingsGuidParametersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceRouteBindingsGuidParametersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3ServiceUsageEventsResponse parses an HTTP response from a GetV3ServiceUsageEventsWithResponse call
func ParseGetV3ServiceUsageEventsResponse(rsp *http.Response) (*GetV3ServiceUsageEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceUsageEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination          `json:"pagination,omitempty"`
			Resources  *[]ServiceUsageEvent `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3ServiceUsageEventsResponse parses an HTTP response from a PostV3ServiceUsageEventsWithResponse call
func ParsePostV3ServiceUsageEventsResponse(rsp *http.Response) (*PostV3ServiceUsageEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3ServiceUsageEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3ServiceUsageEventsGuidResponse parses an HTTP response from a GetV3ServiceUsageEventsGuidWithResponse call
func ParseGetV3ServiceUsageEventsGuidResponse(rsp *http.Response) (*GetV3ServiceUsageEventsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3ServiceUsageEventsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceUsageEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV3SidecarsGuidResponse parses an HTTP response from a DeleteV3SidecarsGuidWithResponse call
func ParseDeleteV3SidecarsGuidResponse(rsp *http.Response) (*DeleteV3SidecarsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3SidecarsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3SidecarsGuidResponse parses an HTTP response from a GetV3SidecarsGuidWithResponse call
func ParseGetV3SidecarsGuidResponse(rsp *http.Response) (*GetV3SidecarsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SidecarsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Sidecar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV3SidecarsGuidResponse parses an HTTP response from a PatchV3SidecarsGuidWithResponse call
func ParsePatchV3SidecarsGuidResponse(rsp *http.Response) (*PatchV3SidecarsGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3SidecarsGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Sidecar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetV3SidecarsGuidProcessesResponse parses an HTTP response from a GetV3SidecarsGuidProcessesWithResponse call
func ParseGetV3SidecarsGuidProcessesResponse(rsp *http.Response) (*GetV3SidecarsGuidProcessesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SidecarsGuidProcessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Process  `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetV3SpaceQuotasResponse parses an HTTP response from a GetV3SpaceQuotasWithResponse call
func ParseGetV3SpaceQuotasResponse(rsp *http.Response) (*GetV3SpaceQuotasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SpaceQuotasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Included Included resources when using include parameter
			Included *struct {
				Organizations *[]Organization `json:"organizations,omitempty"`
				Spaces        *[]Space        `json:"spaces,omitempty"`
			} `json:"included,omitempty"`
			Pagination Pagination   `json:"pagination"`
			Resources  []SpaceQuota `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostV3SpaceQuotasResponse parses an HTTP response from a PostV3SpaceQuotasWithResponse call
func ParsePostV3SpaceQuotasResponse(rsp *http.Response) (*PostV3SpaceQuotasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3SpaceQuotasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SpaceQuota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteV3SpaceQuotasGuidResponse parses an HTTP response from a DeleteV3SpaceQuotasGuidWithResponse call
func ParseDeleteV3SpaceQuotasGuidResponse(rsp *http.Response) (*DeleteV3SpaceQuotasGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3SpaceQuotasGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Guid  *openapi_types.UUID `json:"guid,omitempty"`
			Links *struct {
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3SpaceQuotasGuidResponse parses an HTTP response from a GetV3SpaceQuotasGuidWithResponse call
func ParseGetV3SpaceQuotasGuidResponse(rsp *http.Response) (*GetV3SpaceQuotasGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SpaceQuotasGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpaceQuota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV3SpaceQuotasGuidResponse parses an HTTP response from a PatchV3SpaceQuotasGuidWithResponse call
func ParsePatchV3SpaceQuotasGuidResponse(rsp *http.Response) (*PatchV3SpaceQuotasGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3SpaceQuotasGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpaceQuota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostV3SpaceQuotasGuidRelationshipsSpacesResponse parses an HTTP response from a PostV3SpaceQuotasGuidRelationshipsSpacesWithResponse call
func ParsePostV3SpaceQuotasGuidRelationshipsSpacesResponse(rsp *http.Response) (*PostV3SpaceQuotasGuidRelationshipsSpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3SpaceQuotasGuidRelationshipsSpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []struct {
				Guid openapi_types.UUID `json:"guid"`
			} `json:"data"`
			Links struct {
				Self struct {
					Href string `json:"href"`
				} `json:"self"`
			} `json:"links"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidResponse parses an HTTP response from a DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidWithResponse call
func ParseDeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidResponse(rsp *http.Response) (*DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3SpaceQuotasGuidRelationshipsSpacesSpaceGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3SpacesResponse parses an HTTP response from a GetV3SpacesWithResponse call
func ParseGetV3SpacesResponse(rsp *http.Response) (*GetV3SpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Space    `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3SpacesResponse parses an HTTP response from a PostV3SpacesWithResponse call
func ParsePostV3SpacesResponse(rsp *http.Response) (*PostV3SpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3SpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Space
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV3SpacesGuidResponse parses an HTTP response from a DeleteV3SpacesGuidWithResponse call
func ParseDeleteV3SpacesGuidResponse(rsp *http.Response) (*DeleteV3SpacesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3SpacesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3SpacesGuidResponse parses an HTTP response from a GetV3SpacesGuidWithResponse call
func ParseGetV3SpacesGuidResponse(rsp *http.Response) (*GetV3SpacesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SpacesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Space
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3SpacesGuidResponse parses an HTTP response from a PatchV3SpacesGuidWithResponse call
func ParsePatchV3SpacesGuidResponse(rsp *http.Response) (*PatchV3SpacesGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3SpacesGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Space
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3SpacesGuidFeaturesResponse parses an HTTP response from a GetV3SpacesGuidFeaturesWithResponse call
func ParseGetV3SpacesGuidFeaturesResponse(rsp *http.Response) (*GetV3SpacesGuidFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SpacesGuidFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Resources []SpaceFeature `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3SpacesGuidFeaturesNameResponse parses an HTTP response from a GetV3SpacesGuidFeaturesNameWithResponse call
func ParseGetV3SpacesGuidFeaturesNameResponse(rsp *http.Response) (*GetV3SpacesGuidFeaturesNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SpacesGuidFeaturesNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpaceFeature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV3SpacesGuidFeaturesNameResponse parses an HTTP response from a PatchV3SpacesGuidFeaturesNameWithResponse call
func ParsePatchV3SpacesGuidFeaturesNameResponse(rsp *http.Response) (*PatchV3SpacesGuidFeaturesNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3SpacesGuidFeaturesNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpaceFeature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostV3SpacesGuidManifestResponse parses an HTTP response from a PostV3SpacesGuidManifestWithResponse call
func ParsePostV3SpacesGuidManifestResponse(rsp *http.Response) (*PostV3SpacesGuidManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3SpacesGuidManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Guid  *openapi_types.UUID `json:"guid,omitempty"`
			Links *struct {
				Job *struct {
					Href *string `json:"href,omitempty"`
				} `json:"job,omitempty"`
				Self *struct {
					Href *string `json:"href,omitempty"`
				} `json:"self,omitempty"`
			} `json:"links,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostV3SpacesGuidManifestDiffResponse parses an HTTP response from a PostV3SpacesGuidManifestDiffWithResponse call
func ParsePostV3SpacesGuidManifestDiffResponse(rsp *http.Response) (*PostV3SpacesGuidManifestDiffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3SpacesGuidManifestDiffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManifestDiff
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntityError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetV3SpacesGuidRelationshipsIsolationSegmentResponse parses an HTTP response from a GetV3SpacesGuidRelationshipsIsolationSegmentWithResponse call
func ParseGetV3SpacesGuidRelationshipsIsolationSegmentResponse(rsp *http.Response) (*GetV3SpacesGuidRelationshipsIsolationSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SpacesGuidRelationshipsIsolationSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3SpacesGuidRelationshipsIsolationSegmentResponse parses an HTTP response from a PatchV3SpacesGuidRelationshipsIsolationSegmentWithResponse call
func ParsePatchV3SpacesGuidRelationshipsIsolationSegmentResponse(rsp *http.Response) (*PatchV3SpacesGuidRelationshipsIsolationSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3SpacesGuidRelationshipsIsolationSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				Guid *string `json:"guid,omitempty"`
			} `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3SpacesGuidRunningSecurityGroupsResponse parses an HTTP response from a GetV3SpacesGuidRunningSecurityGroupsWithResponse call
func ParseGetV3SpacesGuidRunningSecurityGroupsResponse(rsp *http.Response) (*GetV3SpacesGuidRunningSecurityGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SpacesGuidRunningSecurityGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination Pagination      `json:"pagination"`
			Resources  []SecurityGroup `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3SpacesGuidStagingSecurityGroupsResponse parses an HTTP response from a GetV3SpacesGuidStagingSecurityGroupsWithResponse call
func ParseGetV3SpacesGuidStagingSecurityGroupsResponse(rsp *http.Response) (*GetV3SpacesGuidStagingSecurityGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SpacesGuidStagingSecurityGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination Pagination      `json:"pagination"`
			Resources  []SecurityGroup `json:"resources"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV3SpacesGuidUsersResponse parses an HTTP response from a GetV3SpacesGuidUsersWithResponse call
func ParseGetV3SpacesGuidUsersResponse(rsp *http.Response) (*GetV3SpacesGuidUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3SpacesGuidUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]User     `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3StacksResponse parses an HTTP response from a GetV3StacksWithResponse call
func ParseGetV3StacksResponse(rsp *http.Response) (*GetV3StacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3StacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Stack    `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3StacksResponse parses an HTTP response from a PostV3StacksWithResponse call
func ParsePostV3StacksResponse(rsp *http.Response) (*PostV3StacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3StacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Stack
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV3StacksGuidResponse parses an HTTP response from a DeleteV3StacksGuidWithResponse call
func ParseDeleteV3StacksGuidResponse(rsp *http.Response) (*DeleteV3StacksGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3StacksGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3StacksGuidResponse parses an HTTP response from a GetV3StacksGuidWithResponse call
func ParseGetV3StacksGuidResponse(rsp *http.Response) (*GetV3StacksGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3StacksGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stack
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3StacksGuidResponse parses an HTTP response from a PatchV3StacksGuidWithResponse call
func ParsePatchV3StacksGuidResponse(rsp *http.Response) (*PatchV3StacksGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3StacksGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stack
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3StacksGuidAppsResponse parses an HTTP response from a GetV3StacksGuidAppsWithResponse call
func ParseGetV3StacksGuidAppsResponse(rsp *http.Response) (*GetV3StacksGuidAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3StacksGuidAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]App      `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3TasksResponse parses an HTTP response from a GetV3TasksWithResponse call
func ParseGetV3TasksResponse(rsp *http.Response) (*GetV3TasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3TasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *Pagination `json:"pagination,omitempty"`
			Resources  *[]Task     `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3TasksGuidResponse parses an HTTP response from a GetV3TasksGuidWithResponse call
func ParseGetV3TasksGuidResponse(rsp *http.Response) (*GetV3TasksGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3TasksGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3TasksGuidResponse parses an HTTP response from a PatchV3TasksGuidWithResponse call
func ParsePatchV3TasksGuidResponse(rsp *http.Response) (*PatchV3TasksGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3TasksGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3TasksGuidResponse parses an HTTP response from a PostV3TasksGuidWithResponse call
func ParsePostV3TasksGuidResponse(rsp *http.Response) (*PostV3TasksGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3TasksGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetV3UsersResponse parses an HTTP response from a GetV3UsersWithResponse call
func ParseGetV3UsersResponse(rsp *http.Response) (*GetV3UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Pagination *struct {
				First *struct {
					Href *string `json:"href,omitempty"`
				} `json:"first,omitempty"`
				Last *struct {
					Href *string `json:"href,omitempty"`
				} `json:"last,omitempty"`
				Next *struct {
					Href *string `json:"href,omitempty"`
				} `json:"next,omitempty"`
				Previous *struct {
					Href *string `json:"href,omitempty"`
				} `json:"previous"`
				TotalPages   *int `json:"total_pages,omitempty"`
				TotalResults *int `json:"total_results,omitempty"`
			} `json:"pagination,omitempty"`
			Resources *[]User `json:"resources,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3UsersResponse parses an HTTP response from a PostV3UsersWithResponse call
func ParsePostV3UsersResponse(rsp *http.Response) (*PostV3UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV3UsersGuidResponse parses an HTTP response from a DeleteV3UsersGuidWithResponse call
func ParseDeleteV3UsersGuidResponse(rsp *http.Response) (*DeleteV3UsersGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV3UsersGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV3UsersGuidResponse parses an HTTP response from a GetV3UsersGuidWithResponse call
func ParseGetV3UsersGuidResponse(rsp *http.Response) (*GetV3UsersGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3UsersGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV3UsersGuidResponse parses an HTTP response from a PatchV3UsersGuidWithResponse call
func ParsePatchV3UsersGuidResponse(rsp *http.Response) (*PatchV3UsersGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV3UsersGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
