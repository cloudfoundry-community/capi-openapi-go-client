/*
Cloud Controller API

API specification for managing environment variable groups in Cloud Controller.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
)

// checks if the AppUsageEventMemoryInMbPerInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppUsageEventMemoryInMbPerInstance{}

// AppUsageEventMemoryInMbPerInstance struct for AppUsageEventMemoryInMbPerInstance
type AppUsageEventMemoryInMbPerInstance struct {
	// Current memory in MB of the app that this event pertains to, if applicable
	Current NullableInt32 `json:"current,omitempty"`
	// Previous memory in MB of the app that this event pertains to, if applicable
	Previous NullableInt32 `json:"previous,omitempty"`
}

// NewAppUsageEventMemoryInMbPerInstance instantiates a new AppUsageEventMemoryInMbPerInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppUsageEventMemoryInMbPerInstance() *AppUsageEventMemoryInMbPerInstance {
	this := AppUsageEventMemoryInMbPerInstance{}
	return &this
}

// NewAppUsageEventMemoryInMbPerInstanceWithDefaults instantiates a new AppUsageEventMemoryInMbPerInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppUsageEventMemoryInMbPerInstanceWithDefaults() *AppUsageEventMemoryInMbPerInstance {
	this := AppUsageEventMemoryInMbPerInstance{}
	return &this
}

// GetCurrent returns the Current field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppUsageEventMemoryInMbPerInstance) GetCurrent() int32 {
	if o == nil || IsNil(o.Current.Get()) {
		var ret int32
		return ret
	}
	return *o.Current.Get()
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppUsageEventMemoryInMbPerInstance) GetCurrentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Current.Get(), o.Current.IsSet()
}

// HasCurrent returns a boolean if a field has been set.
func (o *AppUsageEventMemoryInMbPerInstance) HasCurrent() bool {
	if o != nil && o.Current.IsSet() {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given NullableInt32 and assigns it to the Current field.
func (o *AppUsageEventMemoryInMbPerInstance) SetCurrent(v int32) {
	o.Current.Set(&v)
}
// SetCurrentNil sets the value for Current to be an explicit nil
func (o *AppUsageEventMemoryInMbPerInstance) SetCurrentNil() {
	o.Current.Set(nil)
}

// UnsetCurrent ensures that no value is present for Current, not even an explicit nil
func (o *AppUsageEventMemoryInMbPerInstance) UnsetCurrent() {
	o.Current.Unset()
}

// GetPrevious returns the Previous field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppUsageEventMemoryInMbPerInstance) GetPrevious() int32 {
	if o == nil || IsNil(o.Previous.Get()) {
		var ret int32
		return ret
	}
	return *o.Previous.Get()
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppUsageEventMemoryInMbPerInstance) GetPreviousOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Previous.Get(), o.Previous.IsSet()
}

// HasPrevious returns a boolean if a field has been set.
func (o *AppUsageEventMemoryInMbPerInstance) HasPrevious() bool {
	if o != nil && o.Previous.IsSet() {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given NullableInt32 and assigns it to the Previous field.
func (o *AppUsageEventMemoryInMbPerInstance) SetPrevious(v int32) {
	o.Previous.Set(&v)
}
// SetPreviousNil sets the value for Previous to be an explicit nil
func (o *AppUsageEventMemoryInMbPerInstance) SetPreviousNil() {
	o.Previous.Set(nil)
}

// UnsetPrevious ensures that no value is present for Previous, not even an explicit nil
func (o *AppUsageEventMemoryInMbPerInstance) UnsetPrevious() {
	o.Previous.Unset()
}

func (o AppUsageEventMemoryInMbPerInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppUsageEventMemoryInMbPerInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Current.IsSet() {
		toSerialize["current"] = o.Current.Get()
	}
	if o.Previous.IsSet() {
		toSerialize["previous"] = o.Previous.Get()
	}
	return toSerialize, nil
}

type NullableAppUsageEventMemoryInMbPerInstance struct {
	value *AppUsageEventMemoryInMbPerInstance
	isSet bool
}

func (v NullableAppUsageEventMemoryInMbPerInstance) Get() *AppUsageEventMemoryInMbPerInstance {
	return v.value
}

func (v *NullableAppUsageEventMemoryInMbPerInstance) Set(val *AppUsageEventMemoryInMbPerInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableAppUsageEventMemoryInMbPerInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableAppUsageEventMemoryInMbPerInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppUsageEventMemoryInMbPerInstance(val *AppUsageEventMemoryInMbPerInstance) *NullableAppUsageEventMemoryInMbPerInstance {
	return &NullableAppUsageEventMemoryInMbPerInstance{value: val, isSet: true}
}

func (v NullableAppUsageEventMemoryInMbPerInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppUsageEventMemoryInMbPerInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


