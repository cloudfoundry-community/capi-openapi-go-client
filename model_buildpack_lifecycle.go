/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
)

// checks if the BuildpackLifecycle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildpackLifecycle{}

// BuildpackLifecycle Lifecycle information (for Cloud Native Buildpacks)
type BuildpackLifecycle struct {
	Data *BuildpackLifecycleData `json:"data,omitempty"`
	// Type of buildpack lifecycle
	Type *string `json:"type,omitempty"`
}

// NewBuildpackLifecycle instantiates a new BuildpackLifecycle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildpackLifecycle() *BuildpackLifecycle {
	this := BuildpackLifecycle{}
	return &this
}

// NewBuildpackLifecycleWithDefaults instantiates a new BuildpackLifecycle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildpackLifecycleWithDefaults() *BuildpackLifecycle {
	this := BuildpackLifecycle{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *BuildpackLifecycle) GetData() BuildpackLifecycleData {
	if o == nil || IsNil(o.Data) {
		var ret BuildpackLifecycleData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildpackLifecycle) GetDataOk() (*BuildpackLifecycleData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *BuildpackLifecycle) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given BuildpackLifecycleData and assigns it to the Data field.
func (o *BuildpackLifecycle) SetData(v BuildpackLifecycleData) {
	o.Data = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BuildpackLifecycle) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildpackLifecycle) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BuildpackLifecycle) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BuildpackLifecycle) SetType(v string) {
	o.Type = &v
}

func (o BuildpackLifecycle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildpackLifecycle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableBuildpackLifecycle struct {
	value *BuildpackLifecycle
	isSet bool
}

func (v NullableBuildpackLifecycle) Get() *BuildpackLifecycle {
	return v.value
}

func (v *NullableBuildpackLifecycle) Set(val *BuildpackLifecycle) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildpackLifecycle) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildpackLifecycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildpackLifecycle(val *BuildpackLifecycle) *NullableBuildpackLifecycle {
	return &NullableBuildpackLifecycle{value: val, isSet: true}
}

func (v NullableBuildpackLifecycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildpackLifecycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


