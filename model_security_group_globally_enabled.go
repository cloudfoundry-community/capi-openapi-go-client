/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SecurityGroupGloballyEnabled type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityGroupGloballyEnabled{}

// SecurityGroupGloballyEnabled Whether this security group is applied globally
type SecurityGroupGloballyEnabled struct {
	// Applied globally to all running apps
	Running bool `json:"running"`
	// Applied globally during app staging
	Staging bool `json:"staging"`
}

type _SecurityGroupGloballyEnabled SecurityGroupGloballyEnabled

// NewSecurityGroupGloballyEnabled instantiates a new SecurityGroupGloballyEnabled object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityGroupGloballyEnabled(running bool, staging bool) *SecurityGroupGloballyEnabled {
	this := SecurityGroupGloballyEnabled{}
	this.Running = running
	this.Staging = staging
	return &this
}

// NewSecurityGroupGloballyEnabledWithDefaults instantiates a new SecurityGroupGloballyEnabled object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityGroupGloballyEnabledWithDefaults() *SecurityGroupGloballyEnabled {
	this := SecurityGroupGloballyEnabled{}
	return &this
}

// GetRunning returns the Running field value
func (o *SecurityGroupGloballyEnabled) GetRunning() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Running
}

// GetRunningOk returns a tuple with the Running field value
// and a boolean to check if the value has been set.
func (o *SecurityGroupGloballyEnabled) GetRunningOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Running, true
}

// SetRunning sets field value
func (o *SecurityGroupGloballyEnabled) SetRunning(v bool) {
	o.Running = v
}

// GetStaging returns the Staging field value
func (o *SecurityGroupGloballyEnabled) GetStaging() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Staging
}

// GetStagingOk returns a tuple with the Staging field value
// and a boolean to check if the value has been set.
func (o *SecurityGroupGloballyEnabled) GetStagingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Staging, true
}

// SetStaging sets field value
func (o *SecurityGroupGloballyEnabled) SetStaging(v bool) {
	o.Staging = v
}

func (o SecurityGroupGloballyEnabled) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityGroupGloballyEnabled) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["running"] = o.Running
	toSerialize["staging"] = o.Staging
	return toSerialize, nil
}

func (o *SecurityGroupGloballyEnabled) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"running",
		"staging",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecurityGroupGloballyEnabled := _SecurityGroupGloballyEnabled{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecurityGroupGloballyEnabled)

	if err != nil {
		return err
	}

	*o = SecurityGroupGloballyEnabled(varSecurityGroupGloballyEnabled)

	return err
}

type NullableSecurityGroupGloballyEnabled struct {
	value *SecurityGroupGloballyEnabled
	isSet bool
}

func (v NullableSecurityGroupGloballyEnabled) Get() *SecurityGroupGloballyEnabled {
	return v.value
}

func (v *NullableSecurityGroupGloballyEnabled) Set(val *SecurityGroupGloballyEnabled) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityGroupGloballyEnabled) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityGroupGloballyEnabled) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityGroupGloballyEnabled(val *SecurityGroupGloballyEnabled) *NullableSecurityGroupGloballyEnabled {
	return &NullableSecurityGroupGloballyEnabled{value: val, isSet: true}
}

func (v NullableSecurityGroupGloballyEnabled) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityGroupGloballyEnabled) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


