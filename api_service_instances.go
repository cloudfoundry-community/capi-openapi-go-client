/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ServiceInstancesAPI interface {

	/*
	V3ServiceInstancesGuidRelationshipsSharedSpacesGet List shared spaces relationship (experimental)

	Lists the spaces that the service instance has been shared to.

This feature is experimental and subject to change.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid GUID of the service instance
	@return ApiV3ServiceInstancesGuidRelationshipsSharedSpacesGetRequest
	*/
	V3ServiceInstancesGuidRelationshipsSharedSpacesGet(ctx context.Context, guid string) ApiV3ServiceInstancesGuidRelationshipsSharedSpacesGetRequest

	// V3ServiceInstancesGuidRelationshipsSharedSpacesGetExecute executes the request
	//  @return V3ServiceInstancesGuidRelationshipsSharedSpacesGet200Response
	V3ServiceInstancesGuidRelationshipsSharedSpacesGetExecute(r ApiV3ServiceInstancesGuidRelationshipsSharedSpacesGetRequest) (*V3ServiceInstancesGuidRelationshipsSharedSpacesGet200Response, *http.Response, error)

	/*
	V3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGet Get usage summary in shared spaces (experimental)

	Returns the number of bound apps in spaces where the service instance has been shared to.

This feature is experimental and subject to change.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid GUID of the service instance
	@return ApiV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetRequest
	*/
	V3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGet(ctx context.Context, guid string) ApiV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetRequest

	// V3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetExecute executes the request
	//  @return UsageSummary
	V3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetExecute(r ApiV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetRequest) (*UsageSummary, *http.Response, error)
}

// ServiceInstancesAPIService ServiceInstancesAPI service
type ServiceInstancesAPIService service

type ApiV3ServiceInstancesGuidRelationshipsSharedSpacesGetRequest struct {
	ctx context.Context
	ApiService ServiceInstancesAPI
	guid string
}

func (r ApiV3ServiceInstancesGuidRelationshipsSharedSpacesGetRequest) Execute() (*V3ServiceInstancesGuidRelationshipsSharedSpacesGet200Response, *http.Response, error) {
	return r.ApiService.V3ServiceInstancesGuidRelationshipsSharedSpacesGetExecute(r)
}

/*
V3ServiceInstancesGuidRelationshipsSharedSpacesGet List shared spaces relationship (experimental)

Lists the spaces that the service instance has been shared to.

This feature is experimental and subject to change.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid GUID of the service instance
 @return ApiV3ServiceInstancesGuidRelationshipsSharedSpacesGetRequest
*/
func (a *ServiceInstancesAPIService) V3ServiceInstancesGuidRelationshipsSharedSpacesGet(ctx context.Context, guid string) ApiV3ServiceInstancesGuidRelationshipsSharedSpacesGetRequest {
	return ApiV3ServiceInstancesGuidRelationshipsSharedSpacesGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return V3ServiceInstancesGuidRelationshipsSharedSpacesGet200Response
func (a *ServiceInstancesAPIService) V3ServiceInstancesGuidRelationshipsSharedSpacesGetExecute(r ApiV3ServiceInstancesGuidRelationshipsSharedSpacesGetRequest) (*V3ServiceInstancesGuidRelationshipsSharedSpacesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V3ServiceInstancesGuidRelationshipsSharedSpacesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesAPIService.V3ServiceInstancesGuidRelationshipsSharedSpacesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/service_instances/{guid}/relationships/shared_spaces"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetRequest struct {
	ctx context.Context
	ApiService ServiceInstancesAPI
	guid string
}

func (r ApiV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetRequest) Execute() (*UsageSummary, *http.Response, error) {
	return r.ApiService.V3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetExecute(r)
}

/*
V3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGet Get usage summary in shared spaces (experimental)

Returns the number of bound apps in spaces where the service instance has been shared to.

This feature is experimental and subject to change.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid GUID of the service instance
 @return ApiV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetRequest
*/
func (a *ServiceInstancesAPIService) V3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGet(ctx context.Context, guid string) ApiV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetRequest {
	return ApiV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return UsageSummary
func (a *ServiceInstancesAPIService) V3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetExecute(r ApiV3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGetRequest) (*UsageSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsageSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceInstancesAPIService.V3ServiceInstancesGuidRelationshipsSharedSpacesUsageSummaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/service_instances/{guid}/relationships/shared_spaces/usage_summary"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
