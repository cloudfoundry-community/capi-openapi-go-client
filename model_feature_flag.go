/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the FeatureFlag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureFlag{}

// FeatureFlag struct for FeatureFlag
type FeatureFlag struct {
	// Custom error message shown when the feature is disabled
	CustomErrorMessage NullableString `json:"custom_error_message,omitempty"`
	// Whether the feature is enabled
	Enabled bool `json:"enabled"`
	Links FeatureFlagLinks `json:"links"`
	Metadata *FeatureFlagMetadata `json:"metadata,omitempty"`
	// Unique name of the feature flag
	Name string `json:"name"`
	// Timestamp when the feature flag was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

type _FeatureFlag FeatureFlag

// NewFeatureFlag instantiates a new FeatureFlag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureFlag(enabled bool, links FeatureFlagLinks, name string, updatedAt time.Time) *FeatureFlag {
	this := FeatureFlag{}
	this.Enabled = enabled
	this.Links = links
	this.Name = name
	this.UpdatedAt = updatedAt
	return &this
}

// NewFeatureFlagWithDefaults instantiates a new FeatureFlag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureFlagWithDefaults() *FeatureFlag {
	this := FeatureFlag{}
	return &this
}

// GetCustomErrorMessage returns the CustomErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureFlag) GetCustomErrorMessage() string {
	if o == nil || IsNil(o.CustomErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.CustomErrorMessage.Get()
}

// GetCustomErrorMessageOk returns a tuple with the CustomErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureFlag) GetCustomErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomErrorMessage.Get(), o.CustomErrorMessage.IsSet()
}

// HasCustomErrorMessage returns a boolean if a field has been set.
func (o *FeatureFlag) HasCustomErrorMessage() bool {
	if o != nil && o.CustomErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetCustomErrorMessage gets a reference to the given NullableString and assigns it to the CustomErrorMessage field.
func (o *FeatureFlag) SetCustomErrorMessage(v string) {
	o.CustomErrorMessage.Set(&v)
}
// SetCustomErrorMessageNil sets the value for CustomErrorMessage to be an explicit nil
func (o *FeatureFlag) SetCustomErrorMessageNil() {
	o.CustomErrorMessage.Set(nil)
}

// UnsetCustomErrorMessage ensures that no value is present for CustomErrorMessage, not even an explicit nil
func (o *FeatureFlag) UnsetCustomErrorMessage() {
	o.CustomErrorMessage.Unset()
}

// GetEnabled returns the Enabled field value
func (o *FeatureFlag) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *FeatureFlag) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *FeatureFlag) SetEnabled(v bool) {
	o.Enabled = v
}

// GetLinks returns the Links field value
func (o *FeatureFlag) GetLinks() FeatureFlagLinks {
	if o == nil {
		var ret FeatureFlagLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *FeatureFlag) GetLinksOk() (*FeatureFlagLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *FeatureFlag) SetLinks(v FeatureFlagLinks) {
	o.Links = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *FeatureFlag) GetMetadata() FeatureFlagMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret FeatureFlagMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureFlag) GetMetadataOk() (*FeatureFlagMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *FeatureFlag) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given FeatureFlagMetadata and assigns it to the Metadata field.
func (o *FeatureFlag) SetMetadata(v FeatureFlagMetadata) {
	o.Metadata = &v
}

// GetName returns the Name field value
func (o *FeatureFlag) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeatureFlag) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeatureFlag) SetName(v string) {
	o.Name = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *FeatureFlag) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *FeatureFlag) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *FeatureFlag) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o FeatureFlag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureFlag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomErrorMessage.IsSet() {
		toSerialize["custom_error_message"] = o.CustomErrorMessage.Get()
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["links"] = o.Links
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["name"] = o.Name
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *FeatureFlag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"links",
		"name",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeatureFlag := _FeatureFlag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeatureFlag)

	if err != nil {
		return err
	}

	*o = FeatureFlag(varFeatureFlag)

	return err
}

type NullableFeatureFlag struct {
	value *FeatureFlag
	isSet bool
}

func (v NullableFeatureFlag) Get() *FeatureFlag {
	return v.value
}

func (v *NullableFeatureFlag) Set(val *FeatureFlag) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureFlag) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureFlag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureFlag(val *FeatureFlag) *NullableFeatureFlag {
	return &NullableFeatureFlag{value: val, isSet: true}
}

func (v NullableFeatureFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureFlag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


