/*
Cloud Foundry API

OpenAPI specification for the Cloud Foundry API.

API version: 3.195.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package capiclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// V3ServiceInstancesGuidPatchRequest - struct for V3ServiceInstancesGuidPatchRequest
type V3ServiceInstancesGuidPatchRequest struct {
	ManagedServiceInstanceUpdate *ManagedServiceInstanceUpdate
	UserProvidedServiceInstanceUpdate *UserProvidedServiceInstanceUpdate
}

// ManagedServiceInstanceUpdateAsV3ServiceInstancesGuidPatchRequest is a convenience function that returns ManagedServiceInstanceUpdate wrapped in V3ServiceInstancesGuidPatchRequest
func ManagedServiceInstanceUpdateAsV3ServiceInstancesGuidPatchRequest(v *ManagedServiceInstanceUpdate) V3ServiceInstancesGuidPatchRequest {
	return V3ServiceInstancesGuidPatchRequest{
		ManagedServiceInstanceUpdate: v,
	}
}

// UserProvidedServiceInstanceUpdateAsV3ServiceInstancesGuidPatchRequest is a convenience function that returns UserProvidedServiceInstanceUpdate wrapped in V3ServiceInstancesGuidPatchRequest
func UserProvidedServiceInstanceUpdateAsV3ServiceInstancesGuidPatchRequest(v *UserProvidedServiceInstanceUpdate) V3ServiceInstancesGuidPatchRequest {
	return V3ServiceInstancesGuidPatchRequest{
		UserProvidedServiceInstanceUpdate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *V3ServiceInstancesGuidPatchRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ManagedServiceInstanceUpdate
	err = newStrictDecoder(data).Decode(&dst.ManagedServiceInstanceUpdate)
	if err == nil {
		jsonManagedServiceInstanceUpdate, _ := json.Marshal(dst.ManagedServiceInstanceUpdate)
		if string(jsonManagedServiceInstanceUpdate) == "{}" { // empty struct
			dst.ManagedServiceInstanceUpdate = nil
		} else {
			if err = validator.Validate(dst.ManagedServiceInstanceUpdate); err != nil {
				dst.ManagedServiceInstanceUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.ManagedServiceInstanceUpdate = nil
	}

	// try to unmarshal data into UserProvidedServiceInstanceUpdate
	err = newStrictDecoder(data).Decode(&dst.UserProvidedServiceInstanceUpdate)
	if err == nil {
		jsonUserProvidedServiceInstanceUpdate, _ := json.Marshal(dst.UserProvidedServiceInstanceUpdate)
		if string(jsonUserProvidedServiceInstanceUpdate) == "{}" { // empty struct
			dst.UserProvidedServiceInstanceUpdate = nil
		} else {
			if err = validator.Validate(dst.UserProvidedServiceInstanceUpdate); err != nil {
				dst.UserProvidedServiceInstanceUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserProvidedServiceInstanceUpdate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ManagedServiceInstanceUpdate = nil
		dst.UserProvidedServiceInstanceUpdate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(V3ServiceInstancesGuidPatchRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(V3ServiceInstancesGuidPatchRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src V3ServiceInstancesGuidPatchRequest) MarshalJSON() ([]byte, error) {
	if src.ManagedServiceInstanceUpdate != nil {
		return json.Marshal(&src.ManagedServiceInstanceUpdate)
	}

	if src.UserProvidedServiceInstanceUpdate != nil {
		return json.Marshal(&src.UserProvidedServiceInstanceUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *V3ServiceInstancesGuidPatchRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ManagedServiceInstanceUpdate != nil {
		return obj.ManagedServiceInstanceUpdate
	}

	if obj.UserProvidedServiceInstanceUpdate != nil {
		return obj.UserProvidedServiceInstanceUpdate
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj V3ServiceInstancesGuidPatchRequest) GetActualInstanceValue() (interface{}) {
	if obj.ManagedServiceInstanceUpdate != nil {
		return *obj.ManagedServiceInstanceUpdate
	}

	if obj.UserProvidedServiceInstanceUpdate != nil {
		return *obj.UserProvidedServiceInstanceUpdate
	}

	// all schemas are nil
	return nil
}

type NullableV3ServiceInstancesGuidPatchRequest struct {
	value *V3ServiceInstancesGuidPatchRequest
	isSet bool
}

func (v NullableV3ServiceInstancesGuidPatchRequest) Get() *V3ServiceInstancesGuidPatchRequest {
	return v.value
}

func (v *NullableV3ServiceInstancesGuidPatchRequest) Set(val *V3ServiceInstancesGuidPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV3ServiceInstancesGuidPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV3ServiceInstancesGuidPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3ServiceInstancesGuidPatchRequest(val *V3ServiceInstancesGuidPatchRequest) *NullableV3ServiceInstancesGuidPatchRequest {
	return &NullableV3ServiceInstancesGuidPatchRequest{value: val, isSet: true}
}

func (v NullableV3ServiceInstancesGuidPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3ServiceInstancesGuidPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


